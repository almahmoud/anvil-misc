<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Test Results (powered by Planemo)"
           tests="36"
           errors="2"
           failures="0"
           skip="0">
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #1)" name="0" time="51.63502621650696">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/8/a/9/dataset_8a9a8a89-3ada-4ddd-8eae-e48272a7141e.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15Getting block 2 of 15  Reserving size (1554) for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 1: 60%  bucket 2: 30%  bucket 1: 70%  bucket 2: 40%  bucket 1: 80%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 40%  Entering block accumulator loop for bucket 4:  bucket 3: 50%  bucket 3: 60%  bucket 4: 10%  bucket 3: 70%  bucket 3: 80%  bucket 4: 20%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Entering block accumulator loop for bucket 7:  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #2)" name="1" time="47.394572257995605">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/6/1/dataset_3610878f-8502-44e1-b920-71bcb08cbace.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 1: 60%  bucket 2: 30%  bucket 1: 70%  bucket 1: 80%  bucket 1: 90%  bucket 2: 40%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 3: 50%  bucket 4: 70%  bucket 4: 80%  bucket 3: 60%  bucket 4: 90%  bucket 3: 70%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 10: 90%  bucket 9: 80%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%Getting block 4 of 15  bucket 3: 20%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 3: 40%  bucket 4: 10%  bucket 3: 50%  bucket 4: 20%  bucket 3: 60%  bucket 3: 70%  bucket 4: 30%  bucket 3: 80%  bucket 4: 40%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  bucket 5: 20%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 7: 80%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #3)" name="2" time="58.50248193740845">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/6/1/dataset_3610878f-8502-44e1-b920-71bcb08cbace.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 1: 70%  bucket 1: 80%  bucket 1: 90%  bucket 2: 40%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 3: 80%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  bucket 2: 90%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  bucket 7: 10%  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 8: 70%  bucket 7: 90%  bucket 7: 100%  bucket 8: 80%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 15  bucket 11: 20%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 30%  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 12: 10%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 14: 20%  bucket 13: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #4)" name="3" time="61.24483394622803">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/6/1/dataset_3610878f-8502-44e1-b920-71bcb08cbace.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%Getting block 2 of 15  Reserving size (1554) for bucket 2  bucket 1: 40%  Calculating Z arrays for bucket 2  bucket 1: 50%  Entering block accumulator loop for bucket 2:  bucket 1: 60%  bucket 2: 10%  bucket 1: 70%  bucket 2: 20%  bucket 2: 30%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 4: 70%  bucket 3: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 5: 80%  bucket 6: 50%  bucket 6: 60%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  Sorting block time: 00:00:00Returning block of 547 for bucket 5  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 10: 50%  bucket 9: 40%  bucket 10: 60%  bucket 9: 50%  bucket 10: 70%  bucket 10: 80%  bucket 9: 60%  bucket 10: 90%  bucket 9: 70%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 80%  bucket 9: 90%  Sorting block time: 00:00:00Returning block of 682 for bucket 10  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 7: 100%  bucket 8: 70%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 15  bucket 11: 30%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 12: 40%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #5)" name="4" time="30.03779935836792">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/c/2/dataset_2c2cbd92-bab3-433c-bf1f-4e843666295e.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 15  Entering block accumulator loop for bucket 1:  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 4: 10%  bucket 3: 40%  bucket 4: 20%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  bucket 6: 70%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 8: 50%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 9: 10%  bucket 10: 30%  bucket 9: 20%  bucket 10: 40%  bucket 9: 30%  bucket 10: 50%  bucket 9: 40%  bucket 10: 60%  bucket 9: 50%  bucket 10: 70%  bucket 9: 60%  bucket 10: 80%  bucket 9: 70%  bucket 10: 90%  bucket 9: 80%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 30%  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 12: 10%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 13: 70%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  bucket 13: 90%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  bucket 5: 20%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  bucket 9: 10%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index3 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #6)" name="5" time="51.398488998413086">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/c/2/dataset_2c2cbd92-bab3-433c-bf1f-4e843666295e.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 3: 30%  bucket 4: 60%  bucket 3: 40%  bucket 4: 70%  bucket 3: 50%  bucket 4: 80%  bucket 3: 60%  bucket 4: 90%  bucket 3: 70%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 8: 60%  bucket 7: 60%  bucket 8: 70%  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 11: 100%  bucket 12: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 2: 90%  bucket 1: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 3: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 4: 70%  bucket 3: 60%  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 3: 80%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #7)" name="6" time="66.08892345428467">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/8/4/d/dataset_84dcea9f-199e-4b75-a249-6f84f9294c76.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 1: 90%  bucket 2: 90%  bucket 2: 100%  bucket 1: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block of length 1407 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 4 of 15Getting block 3 of 15  Reserving size (1554) for bucket 4  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 3: 60%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 30%  Entering block accumulator loop for bucket 8:  bucket 7: 40%  bucket 8: 10%  bucket 7: 50%  bucket 8: 20%  bucket 7: 60%  bucket 8: 30%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 8: 50%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Entering block accumulator loop for bucket 9:  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 13:  bucket 14: 10%  bucket 14: 20%  bucket 13: 10%  bucket 14: 30%  bucket 13: 20%  bucket 14: 40%  bucket 13: 30%  bucket 14: 50%  bucket 13: 40%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 13: 70%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  bucket 13: 90%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 1: 70%  bucket 2: 40%  bucket 1: 80%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 4: 40%  bucket 3: 30%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 3: 50%  bucket 4: 70%  bucket 3: 60%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 9: 100%  bucket 10: 90%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 967 for bucket 14Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #8)" name="7" time="60.32325053215027">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/8/4/d/dataset_84dcea9f-199e-4b75-a249-6f84f9294c76.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15Getting block 6 of 15  Reserving size (1554) for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 7: 50%  bucket 8: 20%  bucket 7: 60%  bucket 8: 30%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 8: 50%  bucket 7: 90%  bucket 8: 60%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 9: 80%  bucket 10: 50%  bucket 9: 90%  bucket 10: 60%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 14: 50%  bucket 13: 40%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 14: 90%  bucket 13: 70%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 1: 90%  bucket 1: 100%  bucket 2: 90%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 4: 70%  bucket 3: 50%  bucket 4: 80%  bucket 3: 60%  bucket 4: 90%  bucket 3: 70%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #9)" name="8" time="60.35300421714783">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/8/4/d/dataset_84dcea9f-199e-4b75-a249-6f84f9294c76.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 3: 50%  bucket 4: 30%  bucket 3: 60%  bucket 4: 40%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 4: 60%  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 15  bucket 5: 20%  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 15  bucket 11: 30%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 11: 70%  bucket 12: 20%  bucket 11: 80%  bucket 12: 30%  bucket 11: 90%  bucket 12: 40%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  bucket 6: 80%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  Entering block accumulator loop for bucket 7:  bucket 8: 20%  bucket 7: 10%  bucket 8: 30%  bucket 7: 20%  bucket 8: 40%  bucket 7: 30%  bucket 8: 50%  bucket 7: 40%  bucket 7: 50%  bucket 8: 60%  bucket 7: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  bucket 9: 20%  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 9: 80%  bucket 10: 50%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #10)" name="9" time="59.141621351242065">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/e/6/f/dataset_e6f96761-329f-4f01-8e48-06a131195d57.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 30%  Entering block accumulator loop for bucket 4:  bucket 3: 40%  bucket 3: 50%  bucket 4: 10%  bucket 3: 60%  bucket 3: 70%  bucket 4: 20%  bucket 3: 80%  bucket 4: 30%  bucket 3: 90%  bucket 4: 40%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  bucket 3: 10%  Calculating Z arrays for bucket 4  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 4: 10%  bucket 3: 40%  bucket 3: 50%  bucket 4: 20%  bucket 3: 60%  bucket 4: 30%  bucket 3: 70%  bucket 3: 80%  bucket 4: 40%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 6: 60%  bucket 5: 50%  bucket 6: 70%  bucket 5: 60%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2 (Test #1)" name="0" time="41.088473320007324">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2 (Test #2)" name="1" time="24.043675661087036">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2 (Test #1)" name="0" time="58.000619411468506">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.89 seconds elapse.[bwa_index] Update BWT... 0.02 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.23 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.300 sec; CPU: 1.181 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.041 CPU sec, 0.021 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.135 sec; CPU: 0.050 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2 (Test #2)" name="1" time="58.97567892074585">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.90 seconds elapse.[bwa_index] Update BWT... 0.03 sec[bwa_index] Pack forward-only FASTA... 0.02 sec[bwa_index] Construct SA from BWT and Occ... 0.22 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.265 sec; CPU: 1.182 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.037 CPU sec, 0.020 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.168 sec; CPU: 0.046 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #1)" name="0" time="30.079591274261475">
        
            
            <system-out><![CDATA[
            INFO [2021-04-24 21:22:56,106]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bamINFO [2021-04-24 21:22:56,120]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-24 21:22:59,428]: Executing lofreq filter -i /tmp/lofreq2_call_parallelu8d3qkfa/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #2)" name="1" time="26.641074419021606">
        
            
            <system-out><![CDATA[
            INFO [2021-04-24 21:23:07,236]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-04-24 21:23:07,262]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-24 21:23:11,036]: Executing lofreq filter -i /tmp/lofreq2_call_parallellbvq5lir/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #3)" name="2" time="34.46298575401306">
        
            
            <system-out><![CDATA[
            INFO [2021-04-24 21:23:31,338]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-04-24 21:23:31,353]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-24 21:23:35,011]: Executing lofreq filter -i /tmp/lofreq2_call_parallelb253snga/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #4)" name="3" time="38.80998158454895">
        
            
            <system-out><![CDATA[
            INFO [2021-04-24 21:23:36,663]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-04-24 21:23:36,676]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-04-24 21:23:39,710]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #5)" name="4" time="36.33938932418823">
        
            
            <system-out><![CDATA[
            INFO [2021-04-24 21:23:41,774]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-04-24 21:23:41,790]: Adding 3 commands to mp-poolNumber of substitution tests performed: 0Number of indel tests performed: 9INFO [2021-04-24 21:23:46,649]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #1)" name="0" time="44.00333046913147">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.18] collected minimizers[M::mm_idx_gen::0.005*1.11] sorted minimizers[M::main::0.005*1.11] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.11] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.10] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.008*1.05] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/e/a/5/dataset_ea5ce3ed-e6f4-43be-bbac-f8f229f2c49d.dat[M::main] Real time: 0.010 sec; CPU: 0.010 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #2)" name="1" time="43.984694719314575">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.92] collected minimizers[M::mm_idx_gen::0.006*1.11] sorted minimizers[M::main::0.006*1.11] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*1.11] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*1.10] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.010*1.04] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/e/a/5/dataset_ea5ce3ed-e6f4-43be-bbac-f8f229f2c49d.dat[M::main] Real time: 0.011 sec; CPU: 0.011 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #3)" name="2" time="52.396111726760864">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.15] collected minimizers[M::mm_idx_gen::0.004*1.33] sorted minimizers[M::main::0.005*1.33] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.33] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.32] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.016*1.53] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/3/6/d/dataset_36d95e63-c773-42ce-8c81-f81cb3aa7fe0.dat /galaxy/server/database/objects/7/3/f/dataset_73f7ee67-7e22-4b66-8015-7cd0f4df53a5.dat[M::main] Real time: 0.018 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #4)" name="3" time="49.129947900772095">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.99] collected minimizers[M::mm_idx_gen::0.005*1.17] sorted minimizers[M::main::0.005*1.17] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.17] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.16] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.016*1.36] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/0/d/dataset_80dd52b0-36ae-4896-a577-e013ee580b82.dat /galaxy/server/database/objects/7/3/f/dataset_73f7ee67-7e22-4b66-8015-7cd0f4df53a5.dat[M::main] Real time: 0.018 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #5)" name="4" time="29.98038077354431">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.005*0.79] collected minimizers[M::mm_idx_gen::0.007*0.90] sorted minimizers[M::main::0.007*0.90] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.007*0.90] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.007*0.91] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.022*1.32] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/b/9/dataset_1b9be67c-a95c-4599-ad01-7fdacaff6394.dat /galaxy/server/database/objects/5/8/7/dataset_5873d354-1c7f-4565-8a2d-9e5253a7195f.dat[M::main] Real time: 0.024 sec; CPU: 0.031 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #6)" name="5" time="12.992020845413208">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: caePb1,bosTau5,hg38female,mm7canon,hg19chrM,oryLat2,AaegL1,ci2canon,caePb3,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,choHof1,sacCer3,ce9,nomLeu1,monDom5,calJac3,priPac1,tetNig1,panPan1,Spur_v2.6,canFam3,eriEur1,bosTauMd3,ce8,caeRem2,Homo_sapiens_AK1,ce7,calJac1,apiMel2,felCat8,rn5,gadMor1,cb3canon,apiMel4,burkPseu_1710B,hg19female,taeGut2,sorAra1,droVir3,sarHar1,baciSubt,ce10,melGal1,felCat4,loxAfr3,lMaj5,rn4canon,panTro2canon,caeJap3,eschColi_O157H7_EC4115,mm8,dp3,ce4,cb3full,hg18,droEre1,felCat3,aptMan1,petMar1,aplCal1,mm9female,27835,PhumU1,hg19chrX,danRer3,Homo_sapiens_nuHg19_mtrCRS,burkPseu_K96243,felCat4canon,turTru2,monDom4,panTro4,rn3canon,ce2,felCat5,panTro3full,braFlo1,hg19canon,hg18chr21,mm9,equCab2,geoFor1,bosTau6,loxAfr1,nomLeu3,rn6,fr1,Schizosaccharomyces_pombe_1.1,eschColi_O157H7_TW14359,droAna3,sacCer2,panTro2,vicPac2,melUnd1,rn4,panTro3canon,bosTau4,susScr3,Xanthomonas_oryzae_PXO99A,monDom1,echTel1,papHam1,mm8canon,droMoj2,triCas2,bosTau2,mm9canon,hg18canon,strPur2,sacCer1,dp4,droGri2,Xanthomonas_oryzae_MAFF_311018,dasNov1,equCab2chrM,taeGut1,hg38canon,caeJap4,borEut13,caeRem1,caeRem3,burkPseu_668,eschColi_APEC_O1,galGal4,panTro1,droYak1,danRer7,otoGar3,oryLat1,eschColi_CFT073,droVir2,oviAri1,eschColi_O157H7,oryza_sativa_japonica_nipponbare_IRGSP4.0,galGal3canon,eschColi_O157H7_EDL933,gorGor3,AgamP3,Bombyx_mori_p50T_2.0,saiBol1,danRer6,hetGla1,Sscrofa9.58,eschColi_K12,eschColi_K12_W3110,bordBron,susScr2,tetNig2,droAna1,speTri2,hg17,danRer2,bosTau8,droSim1,oryCun1,pseuAeru_UCBPP_PA14,ce6,vicPac1,bosTau7,rheMac3,papAnu2,calJac3canon,taeGut1canon,caeJap1,anoCar1,droVir1,allMis1,hg38,dipOrd1,hg19_rCRS_pUC18_phiX174,gasAcu1,hg18nohaps,danRer10,Araly1,caeJap2,nomLeu2,Tcas_3.0,Xanthomonas_oryzae_KACC10331,droWil1,ornAna1,mm10,dm2,hg_g1k_v37,pseuAeru_PA7,danRer5,phiX,pseuAeru_PAO1,apiMel3,tetNig1canon,ailMel1,dasNov3,ce3,xenTro1,hg19,droMoj1,myoLuc2,Arabidopsis_thaliana_TAIR9,anoCar2,oryLat2canon,chrPic1,Ptrichocarpa_156,rn3,burkPseu_1106A,bosTau3,venter1,ponAbe2,xenTro3,tarSyr1,ente638,musFur1,dm3,cerSim1,pUC18,rheMac2,ci2full,IscaW1,droGri1,cavPor3,Hydra_JCVI,strePneu_R6,danRer4,tupBel1,galGal2canon,canFam2,apiMel1,panTro1canon,Tcacao_1.0,droSec1,caeRem4,strPur3,xenTro2,droEre2,otoGar1,droMoj3,latCha1,droPer1,fr2,hg17canon,galGal2,ce5,oryCun2,Arabidopsis_thaliana_TAIR10,canFam1,galGal3,anoGam1,criGri1,equCab1,mm7,micMur1,dm6,CpipJ1,Amel_4.5,droAna2,susScr1,caePb2,tetNig2canon,droYak2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: caePb1,bosTau5,hg38female,mm7canon,hg19chrM,oryLat2,AaegL1,ci2canon,caePb3,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,choHof1,sacCer3,ce9,nomLeu1,monDom5,calJac3,priPac1,tetNig1,panPan1,Spur_v2.6,canFam3,eriEur1,bosTauMd3,ce8,caeRem2,Homo_sapiens_AK1,ce7,calJac1,apiMel2,felCat8,rn5,gadMor1,cb3canon,apiMel4,burkPseu_1710B,hg19female,taeGut2,sorAra1,droVir3,sarHar1,baciSubt,ce10,melGal1,felCat4,loxAfr3,lMaj5,rn4canon,panTro2canon,caeJap3,eschColi_O157H7_EC4115,mm8,dp3,ce4,cb3full,hg18,droEre1,felCat3,aptMan1,petMar1,aplCal1,mm9female,27835,PhumU1,hg19chrX,danRer3,Homo_sapiens_nuHg19_mtrCRS,burkPseu_K96243,felCat4canon,turTru2,monDom4,panTro4,rn3canon,ce2,felCat5,panTro3full,braFlo1,hg19canon,hg18chr21,mm9,equCab2,geoFor1,bosTau6,loxAfr1,nomLeu3,rn6,fr1,Schizosaccharomyces_pombe_1.1,eschColi_O157H7_TW14359,droAna3,sacCer2,panTro2,vicPac2,melUnd1,rn4,panTro3canon,bosTau4,susScr3,Xanthomonas_oryzae_PXO99A,monDom1,echTel1,papHam1,mm8canon,droMoj2,triCas2,bosTau2,mm9canon,hg18canon,strPur2,sacCer1,dp4,droGri2,Xanthomonas_oryzae_MAFF_311018,dasNov1,equCab2chrM,taeGut1,hg38canon,caeJap4,borEut13,caeRem1,caeRem3,burkPseu_668,eschColi_APEC_O1,galGal4,panTro1,droYak1,danRer7,otoGar3,oryLat1,eschColi_CFT073,droVir2,oviAri1,eschColi_O157H7,oryza_sativa_japonica_nipponbare_IRGSP4.0,galGal3canon,eschColi_O157H7_EDL933,gorGor3,AgamP3,Bombyx_mori_p50T_2.0,saiBol1,danRer6,hetGla1,Sscrofa9.58,eschColi_K12,eschColi_K12_W3110,bordBron,susScr2,tetNig2,droAna1,speTri2,hg17,danRer2,bosTau8,droSim1,oryCun1,pseuAeru_UCBPP_PA14,ce6,vicPac1,bosTau7,rheMac3,papAnu2,calJac3canon,taeGut1canon,caeJap1,anoCar1,droVir1,allMis1,hg38,dipOrd1,hg19_rCRS_pUC18_phiX174,gasAcu1,hg18nohaps,danRer10,Araly1,caeJap2,nomLeu2,Tcas_3.0,Xanthomonas_oryzae_KACC10331,droWil1,ornAna1,mm10,dm2,hg_g1k_v37,pseuAeru_PA7,danRer5,phiX,pseuAeru_PAO1,apiMel3,tetNig1canon,ailMel1,dasNov3,ce3,xenTro1,hg19,droMoj1,myoLuc2,Arabidopsis_thaliana_TAIR9,anoCar2,oryLat2canon,chrPic1,Ptrichocarpa_156,rn3,burkPseu_1106A,bosTau3,venter1,ponAbe2,xenTro3,tarSyr1,ente638,musFur1,dm3,cerSim1,pUC18,rheMac2,ci2full,IscaW1,droGri1,cavPor3,Hydra_JCVI,strePneu_R6,danRer4,tupBel1,galGal2canon,canFam2,apiMel1,panTro1canon,Tcacao_1.0,droSec1,caeRem4,strPur3,xenTro2,droEre2,otoGar1,droMoj3,latCha1,droPer1,fr2,hg17canon,galGal2,ce5,oryCun2,Arabidopsis_thaliana_TAIR10,canFam1,galGal3,anoGam1,criGri1,equCab1,mm7,micMur1,dm6,CpipJ1,Amel_4.5,droAna2,susScr1,caePb2,tetNig2canon,droYak2)", "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "7e2ba6e9a9be6fa0",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 5, "time_seconds": 12.992020845413208, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #7)" name="6" time="15.246415138244629">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: caePb1,bosTau5,hg38female,mm7canon,hg19chrM,oryLat2,AaegL1,ci2canon,caePb3,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,choHof1,sacCer3,ce9,nomLeu1,monDom5,calJac3,priPac1,tetNig1,panPan1,Spur_v2.6,canFam3,eriEur1,bosTauMd3,ce8,caeRem2,Homo_sapiens_AK1,ce7,calJac1,apiMel2,felCat8,rn5,gadMor1,cb3canon,apiMel4,burkPseu_1710B,hg19female,taeGut2,sorAra1,droVir3,sarHar1,baciSubt,ce10,melGal1,felCat4,loxAfr3,lMaj5,rn4canon,panTro2canon,caeJap3,eschColi_O157H7_EC4115,mm8,dp3,ce4,cb3full,hg18,droEre1,felCat3,aptMan1,petMar1,aplCal1,mm9female,27835,PhumU1,hg19chrX,danRer3,Homo_sapiens_nuHg19_mtrCRS,burkPseu_K96243,felCat4canon,turTru2,monDom4,panTro4,rn3canon,ce2,felCat5,panTro3full,braFlo1,hg19canon,hg18chr21,mm9,equCab2,geoFor1,bosTau6,loxAfr1,nomLeu3,rn6,fr1,Schizosaccharomyces_pombe_1.1,eschColi_O157H7_TW14359,droAna3,sacCer2,panTro2,vicPac2,melUnd1,rn4,panTro3canon,bosTau4,susScr3,Xanthomonas_oryzae_PXO99A,monDom1,echTel1,papHam1,mm8canon,droMoj2,triCas2,bosTau2,mm9canon,hg18canon,strPur2,sacCer1,dp4,droGri2,Xanthomonas_oryzae_MAFF_311018,dasNov1,equCab2chrM,taeGut1,hg38canon,caeJap4,borEut13,caeRem1,caeRem3,burkPseu_668,eschColi_APEC_O1,galGal4,panTro1,droYak1,danRer7,otoGar3,oryLat1,eschColi_CFT073,droVir2,oviAri1,eschColi_O157H7,oryza_sativa_japonica_nipponbare_IRGSP4.0,galGal3canon,eschColi_O157H7_EDL933,gorGor3,AgamP3,Bombyx_mori_p50T_2.0,saiBol1,danRer6,hetGla1,Sscrofa9.58,eschColi_K12,eschColi_K12_W3110,bordBron,susScr2,tetNig2,droAna1,speTri2,hg17,danRer2,bosTau8,droSim1,oryCun1,pseuAeru_UCBPP_PA14,ce6,vicPac1,bosTau7,rheMac3,papAnu2,calJac3canon,taeGut1canon,caeJap1,anoCar1,droVir1,allMis1,hg38,dipOrd1,hg19_rCRS_pUC18_phiX174,gasAcu1,hg18nohaps,danRer10,Araly1,caeJap2,nomLeu2,Tcas_3.0,Xanthomonas_oryzae_KACC10331,droWil1,ornAna1,mm10,dm2,hg_g1k_v37,pseuAeru_PA7,danRer5,phiX,pseuAeru_PAO1,apiMel3,tetNig1canon,ailMel1,dasNov3,ce3,xenTro1,hg19,droMoj1,myoLuc2,Arabidopsis_thaliana_TAIR9,anoCar2,oryLat2canon,chrPic1,Ptrichocarpa_156,rn3,burkPseu_1106A,bosTau3,venter1,ponAbe2,xenTro3,tarSyr1,ente638,musFur1,dm3,cerSim1,pUC18,rheMac2,ci2full,IscaW1,droGri1,cavPor3,Hydra_JCVI,strePneu_R6,danRer4,tupBel1,galGal2canon,canFam2,apiMel1,panTro1canon,Tcacao_1.0,droSec1,caeRem4,strPur3,xenTro2,droEre2,otoGar1,droMoj3,latCha1,droPer1,fr2,hg17canon,galGal2,ce5,oryCun2,Arabidopsis_thaliana_TAIR10,canFam1,galGal3,anoGam1,criGri1,equCab1,mm7,micMur1,dm6,CpipJ1,Amel_4.5,droAna2,susScr1,caePb2,tetNig2canon,droYak2)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: caePb1,bosTau5,hg38female,mm7canon,hg19chrM,oryLat2,AaegL1,ci2canon,caePb3,eschColi_K12_DH10B,Zea_mays_B73_RefGen_v2,choHof1,sacCer3,ce9,nomLeu1,monDom5,calJac3,priPac1,tetNig1,panPan1,Spur_v2.6,canFam3,eriEur1,bosTauMd3,ce8,caeRem2,Homo_sapiens_AK1,ce7,calJac1,apiMel2,felCat8,rn5,gadMor1,cb3canon,apiMel4,burkPseu_1710B,hg19female,taeGut2,sorAra1,droVir3,sarHar1,baciSubt,ce10,melGal1,felCat4,loxAfr3,lMaj5,rn4canon,panTro2canon,caeJap3,eschColi_O157H7_EC4115,mm8,dp3,ce4,cb3full,hg18,droEre1,felCat3,aptMan1,petMar1,aplCal1,mm9female,27835,PhumU1,hg19chrX,danRer3,Homo_sapiens_nuHg19_mtrCRS,burkPseu_K96243,felCat4canon,turTru2,monDom4,panTro4,rn3canon,ce2,felCat5,panTro3full,braFlo1,hg19canon,hg18chr21,mm9,equCab2,geoFor1,bosTau6,loxAfr1,nomLeu3,rn6,fr1,Schizosaccharomyces_pombe_1.1,eschColi_O157H7_TW14359,droAna3,sacCer2,panTro2,vicPac2,melUnd1,rn4,panTro3canon,bosTau4,susScr3,Xanthomonas_oryzae_PXO99A,monDom1,echTel1,papHam1,mm8canon,droMoj2,triCas2,bosTau2,mm9canon,hg18canon,strPur2,sacCer1,dp4,droGri2,Xanthomonas_oryzae_MAFF_311018,dasNov1,equCab2chrM,taeGut1,hg38canon,caeJap4,borEut13,caeRem1,caeRem3,burkPseu_668,eschColi_APEC_O1,galGal4,panTro1,droYak1,danRer7,otoGar3,oryLat1,eschColi_CFT073,droVir2,oviAri1,eschColi_O157H7,oryza_sativa_japonica_nipponbare_IRGSP4.0,galGal3canon,eschColi_O157H7_EDL933,gorGor3,AgamP3,Bombyx_mori_p50T_2.0,saiBol1,danRer6,hetGla1,Sscrofa9.58,eschColi_K12,eschColi_K12_W3110,bordBron,susScr2,tetNig2,droAna1,speTri2,hg17,danRer2,bosTau8,droSim1,oryCun1,pseuAeru_UCBPP_PA14,ce6,vicPac1,bosTau7,rheMac3,papAnu2,calJac3canon,taeGut1canon,caeJap1,anoCar1,droVir1,allMis1,hg38,dipOrd1,hg19_rCRS_pUC18_phiX174,gasAcu1,hg18nohaps,danRer10,Araly1,caeJap2,nomLeu2,Tcas_3.0,Xanthomonas_oryzae_KACC10331,droWil1,ornAna1,mm10,dm2,hg_g1k_v37,pseuAeru_PA7,danRer5,phiX,pseuAeru_PAO1,apiMel3,tetNig1canon,ailMel1,dasNov3,ce3,xenTro1,hg19,droMoj1,myoLuc2,Arabidopsis_thaliana_TAIR9,anoCar2,oryLat2canon,chrPic1,Ptrichocarpa_156,rn3,burkPseu_1106A,bosTau3,venter1,ponAbe2,xenTro3,tarSyr1,ente638,musFur1,dm3,cerSim1,pUC18,rheMac2,ci2full,IscaW1,droGri1,cavPor3,Hydra_JCVI,strePneu_R6,danRer4,tupBel1,galGal2canon,canFam2,apiMel1,panTro1canon,Tcacao_1.0,droSec1,caeRem4,strPur3,xenTro2,droEre2,otoGar1,droMoj3,latCha1,droPer1,fr2,hg17canon,galGal2,ce5,oryCun2,Arabidopsis_thaliana_TAIR10,canFam1,galGal3,anoGam1,criGri1,equCab1,mm7,micMur1,dm6,CpipJ1,Amel_4.5,droAna2,susScr1,caePb2,tetNig2canon,droYak2)", "inputs": {  "alignment_options|A": "2",  "alignment_options|B": "8",  "alignment_options|E": "2",  "alignment_options|E2": "1",  "alignment_options|O": "12",  "alignment_options|O2": "32",  "alignment_options|s": "40",  "alignment_options|z": "400",  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "7e2ba6e9a9be6fa0",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "mapping_options|min_occ_floor": "1000",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 6, "time_seconds": 15.246415138244629, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #8)" name="7" time="29.53614592552185">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.023*0.93] collected minimizers[M::mm_idx_gen::0.041*1.36] sorted minimizers[M::main::0.041*1.36] loaded/built the index for 25 target sequence(s)[M::mm_mapopt_update::0.044*1.34] mid_occ = 3[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25[M::mm_idx_stat::0.046*1.32] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935[M::worker_pipeline::0.057*1.39] mapped 25 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/a/1/3/dataset_a1398c6a-9e5f-4581-9e4b-c2e25ad061f2.dat[M::main] Real time: 0.061 sec; CPU: 0.083 sec; Peak RSS: 0.009 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #9)" name="8" time="27.951019048690796">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.005*0.79] collected minimizers[M::mm_idx_gen::0.007*1.02] sorted minimizers[M::main::0.007*1.02] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.007*1.02] mid_occ = 9[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.007*1.02] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057[M::worker_pipeline::0.065*1.00] mapped 1 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/5/7/a/dataset_57abe535-3d06-4995-ba65-b795817b1b46.dat[M::main] Real time: 0.066 sec; CPU: 0.066 sec; Peak RSS: 0.010 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #1)" name="0" time="44.79241704940796">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/84/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/e/a/9/dataset_ea95119b-5910-43bb-ad4e-8c5fe2af477b.dat--pe1-2fastq:/galaxy/server/database/objects/3/a/a/dataset_3aa35375-5b3a-49d4-a569-9e614dcd1066.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/84/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/e/a/9/dataset_ea95119b-5910-43bb-ad4e-8c5fe2af477b.dat']      right reads: ['/galaxy/server/database/objects/3/a/a/dataset_3aa35375-5b3a-49d4-a569-9e614dcd1066.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/84/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/84/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/84/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/84/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/a/9/dataset_ea95119b-5910-43bb-ad4e-8c5fe2af477b.dat  0:00:00.514     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/a/a/dataset_3aa35375-5b3a-49d4-a569-9e614dcd1066.dat  0:00:01.016     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.020    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.304    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.304    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.440    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.487    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.508    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.512    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.515    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.525    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.525    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.525    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/a/9/dataset_ea95119b-5910-43bb-ad4e-8c5fe2af477b.dat  0:00:01.604    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/a/a/dataset_3aa35375-5b3a-49d4-a569-9e614dcd1066.dat  0:00:01.666    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.666    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.667    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.685    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.686    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.687    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.687    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.704    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.705    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.705    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.705    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/e/a/9/dataset_ea95119b-5910-43bb-ad4e-8c5fe2af477b.dat and /galaxy/server/database/objects/3/a/a/dataset_3aa35375-5b3a-49d4-a569-9e614dcd1066.dat  0:00:01.735    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.746    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.751    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.794    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.794    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.794    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/84/working/corrected/corrected.yaml  0:00:01.798    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/84/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/84/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/84/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.124    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.328   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.334     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.539   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.596     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.597     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.597     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.598     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.598     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.598     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.598     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.727     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.730    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.730    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.788    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.788    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.846    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.847    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.847    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.848    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.848    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.848    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.377     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.382    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.620    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.621    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.765    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.804    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.834    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.834    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.836    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.837    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:07.100    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.101    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.101    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.101    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.101    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.101    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.101    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.101    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.101    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.102    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.102    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.102    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.102    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.102    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.102    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.102    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.115    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.115    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.115    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.118    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.118    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.118    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/before_rr.fasta  0:00:07.123    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph.fastg  0:00:07.127    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/simplified_contigs.fasta  0:00:07.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/intermediate_contigs.fasta  0:00:07.138    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.138    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.138    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.138    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.138    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.138    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.204    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.318    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.097    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.097    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.104    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.232   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.235   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.240   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.241   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.241   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.242   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.255   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.262   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.280    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.280    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.280    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.280    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.280    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.281    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.281    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.281    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.281    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.281    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.281    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.281    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.281    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.281    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.281    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.281    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.282    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.282    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.283    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/before_rr.fasta  0:00:09.289    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph.fastg  0:00:09.293    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/84/working//K33/final_contigs.paths  0:00:09.301    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/84/working//K33/scaffolds.paths  0:00:09.315    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.317    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/84/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/84/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/84/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/84/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/84/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/84/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/84/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/84/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #2)" name="1" time="49.99011588096619">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/85/working--disable-gzip-output--only-assembler-t4-m8-k33--pe1-fr--pe1-1fasta:/galaxy/server/database/objects/c/1/b/dataset_c1b26e94-819f-4e93-9868-56e6152f9af6.dat--pe1-2fasta:/galaxy/server/database/objects/e/2/5/dataset_e2576835-38e4-42c2-a1c7-99414f37ecdd.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/85/workingMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/c/1/b/dataset_c1b26e94-819f-4e93-9868-56e6152f9af6.dat']      right reads: ['/galaxy/server/database/objects/e/2/5/dataset_e2576835-38e4-42c2-a1c7-99414f37ecdd.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/85/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/85/working/spades.log===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/85/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/85/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.116     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.304     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.486   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.541     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.541     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611  0:00:00.541     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.542     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.542     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.542     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.542     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.670     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.673    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.673    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:00.727    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.761    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.761    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.761    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.761    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.761    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.762    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.214     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.  0:00:01.219    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.431    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.  0:00:01.431    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.558    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.592    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.612    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).  0:00:01.612    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.613    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.614    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph  0:00:01.614    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths  0:00:01.615    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted  0:00:01.615    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops  0:00:01.616    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected  0:00:01.616    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.616    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.616    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.626    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).  0:00:01.626    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.639    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM  0:00:01.644    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding  0:00:01.644    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0  0:00:01.644    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356  0:00:01.644    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478  0:00:01.644    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.687    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:01.801    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.195    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:02.872    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.088    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.152    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849  0:00:06.154    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568  0:00:06.154    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251  0:00:06.154    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135  0:00:06.154    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738  0:00:06.154    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705  0:00:06.154    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135  0:00:06.154    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0  0:00:06.154    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer  0:00:06.154    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill  0:00:06.155    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:06.155    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:06.156    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:06.156    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:06.156    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:06.698     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.  0:00:06.702    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:06.934    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:06.934    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:07.071    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:07.113    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:07.139    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).  0:00:07.139    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.  0:00:07.146    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled  0:00:07.148    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps  0:00:07.148    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)  0:00:07.152    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads  0:00:07.153    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices  0:00:07.153    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:07.153    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.154    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification  0:00:07.154    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:07.154    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled  0:00:07.154    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:07.154    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times  0:00:07.154    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper  0:00:07.155    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times  0:00:07.155    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover  0:00:07.155    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times  0:00:07.155    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover  0:00:07.155    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times  0:00:07.155    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification  0:00:07.155    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started  0:00:07.155    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07....084    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:08.084    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:08.085    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:08.085    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:08.085    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:08.085    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:08.085    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:08.085    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:08.085    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:08.085    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:08.085    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865  0:00:08.085    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:08.085    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:08.085    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:08.098    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:08.098    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:08.098    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:08.100    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:08.100    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph_with_scaffolds.gfa  0:00:08.101    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/before_rr.fasta  0:00:08.105    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph.fastg  0:00:08.108    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/simplified_contigs.fasta  0:00:08.112    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/intermediate_contigs.fasta  0:00:08.119    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:08.119    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:08.119    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:08.119    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:08.119    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:08.119    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:08.182    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.296    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.089    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:10.089    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges  0:00:10.095    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100  0:00:10.218   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:10.220   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.225   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.227   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:10.227   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:10.227   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:10.239   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.246   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.261    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:10.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:10.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:10.261    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:10.261    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.261    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.261    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:10.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:10.261    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:10.261    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.261    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:10.262    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:10.262    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.262    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.262    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.262    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:10.262    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:10.262    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:10.262    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:10.262    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:10.262    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.262    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.262    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:10.262    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:10.262    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:10.262    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.263    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.263    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.263    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.263    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.263    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.263    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:10.263    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:10.263    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph_with_scaffolds.gfa  0:00:10.263    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/before_rr.fasta  0:00:10.269    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph.fastg  0:00:10.273    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/85/working//K33/final_contigs.paths  0:00:10.281    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/85/working//K33/scaffolds.paths  0:00:10.295    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:10.297    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds===== Assembling finished. Used k-mer sizes: 33  * Assembled contigs are in /galaxy/server/database/jobs_directory/000/85/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/85/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/85/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/85/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/85/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/85/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/85/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #3)" name="2" time="78.46193861961365">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/90/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/a/0/b/dataset_a0b4b10c-87a2-4d79-aebd-bdb6eb256c78.dat--pe1-2fastq.gz:/galaxy/server/database/objects/e/5/5/dataset_e559ba54-3fa4-49cb-b4e9-87c5499ec4e2.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/90/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/a/0/b/dataset_a0b4b10c-87a2-4d79-aebd-bdb6eb256c78.dat']      right reads: ['/galaxy/server/database/objects/e/5/5/dataset_e559ba54-3fa4-49cb-b4e9-87c5499ec4e2.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.004     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/0/b/dataset_a0b4b10c-87a2-4d79-aebd-bdb6eb256c78.dat  0:00:00.495     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/5/5/dataset_e559ba54-3fa4-49cb-b4e9-87c5499ec4e2.dat  0:00:00.983     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.987    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.203    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.204    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.336    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.371    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.392    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.394    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.396    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.399    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.407    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.407    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.407    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/0/b/dataset_a0b4b10c-87a2-4d79-aebd-bdb6eb256c78.dat  0:00:01.443    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/5/5/dataset_e559ba54-3fa4-49cb-b4e9-87c5499ec4e2.dat  0:00:01.478    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.478    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.484    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.484    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.506    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.506    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.506    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.506    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/a/0/b/dataset_a0b4b10c-87a2-4d79-aebd-bdb6eb256c78.dat and /galaxy/server/database/objects/e/5/5/dataset_e559ba54-3fa4-49cb-b4e9-87c5499ec4e2.dat  0:00:01.547    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.557    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.562    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.591    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.591    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.592    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml  0:00:01.596    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.300   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.480   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.538     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.538     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.538     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.538     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.539     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.539     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.539     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.669     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.671    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.671    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.757    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.758    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.758    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.758    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.759    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.759    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.204     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.209    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.438    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.569    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.608    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.629    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.629    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.631    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.631    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU..osing short gaps  0:00:07.015    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.016    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.016    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.016    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.016    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.016    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.016    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.016    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.016    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.016    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.016    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.016    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.016    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.029    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.029    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.029    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.031    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.031    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.032    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta  0:00:07.036    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg  0:00:07.040    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta  0:00:07.044    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta  0:00:07.051    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.051    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.051    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.051    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.051    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.051    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.123    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.248    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.050    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.050    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.056    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.186   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.190   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.195   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.197   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.197   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.197   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.211   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.219   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.238    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.238    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.238    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.238    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.238    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.238    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.238    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.238    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.238    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.238    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.240    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.240    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.240    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.240    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.240    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.240    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.240    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.240    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.240    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.240    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.240    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.241    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.241    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.241    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.241    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.241    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.241    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.241    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.241    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.241    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.241    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.241    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.241    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.241    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.242    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta  0:00:09.247    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg  0:00:09.251    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths  0:00:09.260    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths  0:00:09.277    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.279    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/90/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #4)" name="3" time="62.209391355514526">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/91/working--disable-gzip-output-t4-m8--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/5/4/5/dataset_5457b0fa-1b3b-4651-87a3-4f9163a2a385.dat--pe1-2fastq:/galaxy/server/database/objects/b/d/5/dataset_bd559e14-0754-4612-9990-a6cea3d23459.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/91/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/5/4/5/dataset_5457b0fa-1b3b-4651-87a3-4f9163a2a385.dat']      right reads: ['/galaxy/server/database/objects/b/d/5/dataset_bd559e14-0754-4612-9990-a6cea3d23459.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: automatic selection based on read length  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.003     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.003     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/4/5/dataset_5457b0fa-1b3b-4651-87a3-4f9163a2a385.dat  0:00:00.481     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/d/5/dataset_bd559e14-0754-4612-9990-a6cea3d23459.dat  0:00:00.954     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.959    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.167    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.167    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.302    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.382    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.384    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.388    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.391    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.400    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.400    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.400    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/4/5/dataset_5457b0fa-1b3b-4651-87a3-4f9163a2a385.dat  0:00:01.438    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/d/5/dataset_bd559e14-0754-4612-9990-a6cea3d23459.dat  0:00:01.477    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.477    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.477    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.481    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.482    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.482    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.497    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.497    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.497    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.497    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/4/5/dataset_5457b0fa-1b3b-4651-87a3-4f9163a2a385.dat and /galaxy/server/database/objects/b/d/5/dataset_bd559e14-0754-4612-9990-a6cea3d23459.dat  0:00:01.528    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.539    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.543    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.573    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.573    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.573    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml  0:00:01.577    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K21/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.118    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.123     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.303   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.310     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.546     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.546     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.546     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.546     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.547     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.547     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.547     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.669     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.670    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.670    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.722    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.  0:00:00.722    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.753    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.754    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.754    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.754    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.214     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.  0:00:01.219    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.443    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.  0:00:01.444    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.574    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.612    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.634    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).  0:00:01.635    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.637    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.638    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping  0:00:01.638    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl.. short gaps  0:00:03.346    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:03.348    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:03.348    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:03.348    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:03.348    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:03.348    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.348    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:03.348    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:03.348    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:03.348    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62  0:00:03.348    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:03.348    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.348    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.361    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:03.361    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:03.361    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:03.363    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:03.363    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa  0:00:03.363    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta  0:00:03.368    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg  0:00:03.372    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/simplified_contigs.fasta  0:00:03.376    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/intermediate_contigs.fasta  0:00:03.383    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:03.383    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.383    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.383    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945  0:00:03.383    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:03.383    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:03.447    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:03.558    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.335    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:05.335    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges  0:00:05.343    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100  0:00:05.474   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:05.476   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.479   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.481   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:05.481   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:05.481   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:05.493   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.500   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.517    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:05.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:05.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:05.517    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:05.517    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.517    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.517    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:05.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:05.517    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:05.518    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.518    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.518    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:05.518    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:05.518    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.518    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.518    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.518    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:05.518    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:05.518    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:05.518    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:05.519    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.519    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.519    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:05.519    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:05.519    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.519    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.519    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.519    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.519    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.519    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.519    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:05.519    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:05.519    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa  0:00:05.520    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta  0:00:05.524    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg  0:00:05.529    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/final_contigs.paths  0:00:05.536    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/scaffolds.paths  0:00:05.552    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:05.553    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds===== Assembling finished. Used k-mer sizes: 21, 33, 55  * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #5)" name="4" time="62.98412370681763">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/94/working--disable-gzip-output-t4-m8-k77--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/6/f/3/dataset_6f38db06-fd55-4d32-b132-89d74442a0a4.dat--pe1-2fastq:/galaxy/server/database/objects/2/c/5/dataset_2c5ef3b9-4d33-4d9d-a01a-bca8324fd318.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/94/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/6/f/3/dataset_6f38db06-fd55-4d32-b132-89d74442a0a4.dat']      right reads: ['/galaxy/server/database/objects/2/c/5/dataset_2c5ef3b9-4d33-4d9d-a01a-bca8324fd318.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [77]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/94/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/f/3/dataset_6f38db06-fd55-4d32-b132-89d74442a0a4.dat  0:00:00.550     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/c/5/dataset_2c5ef3b9-4d33-4d9d-a01a-bca8324fd318.dat  0:00:01.091     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.096    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.329    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.329    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.482    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.516    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.539    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.541    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.543    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.546    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.555    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.555    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.555    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/f/3/dataset_6f38db06-fd55-4d32-b132-89d74442a0a4.dat  0:00:01.593    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/c/5/dataset_2c5ef3b9-4d33-4d9d-a01a-bca8324fd318.dat  0:00:01.627    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.627    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.627    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.632    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.633    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.633    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.650    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.650    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.650    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.650    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/f/3/dataset_6f38db06-fd55-4d32-b132-89d74442a0a4.dat and /galaxy/server/database/objects/2/c/5/dataset_2c5ef3b9-4d33-4d9d-a01a-bca8324fd318.dat  0:00:01.685    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.696    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.699    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.729    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.729    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.729    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml  0:00:01.733    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/94/working/K77/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/94/working/dataset.info) with K=77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.120     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.307   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.313     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.552     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.552     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.552     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.553     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.553     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.553     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.553     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101  0:00:00.697     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.699    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.699    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.769    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.  0:00:00.769    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.807    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.808    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.808    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.808    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.808    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.808    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525  0:00:01.338     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.  0:00:01.344    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.600    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.  0:00:01.600    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.753    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.787    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.810    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).  0:00:01.810    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.811    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.812    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:04.180    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:04.181    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:04.181    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:04.181    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:04.181    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:04.181    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:04.181    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:04.181    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:04.181    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:04.181    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594  0:00:04.181    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:04.181    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:04.181    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:04.191    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:04.191    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:04.191    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:04.193    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:04.193    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa  0:00:04.194    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta  0:00:04.198    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg  0:00:04.202    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/simplified_contigs.fasta  0:00:04.205    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/intermediate_contigs.fasta  0:00:04.213    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:04.213    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:04.213    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:04.213    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899  0:00:04.213    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:04.213    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:04.281    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:04.413    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.225    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:06.225    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges  0:00:06.233    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100  0:00:06.362   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:06.365   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.368   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:06.370   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:06.383   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.389   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.409    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:06.409    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:06.409    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:06.409    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:06.410    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:06.410    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:06.410    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:06.410    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:06.410    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:06.410    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:06.412    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:06.412    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:06.412    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:06.412    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:06.412    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:06.412    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:06.412    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:06.412    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:06.412    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:06.412    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:06.412    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:06.413    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:06.413    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:06.413    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:06.413    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:06.413    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:06.413    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:06.413    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:06.413    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:06.413    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:06.413    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:06.413    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:06.413    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:06.413    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:06.413    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:06.414    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:06.414    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:06.414    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:06.414    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:06.414    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:06.414    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:06.414    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:06.414    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:06.414    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:06.414    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:06.414    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:06.414    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:06.414    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:06.414    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:06.414    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.414    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa  0:00:06.414    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta  0:00:06.419    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg  0:00:06.423    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/final_contigs.paths  0:00:06.431    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/scaffolds.paths  0:00:06.446    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:06.448    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds===== Assembling finished. Used k-mer sizes: 77  * Corrected reads are in /galaxy/server/database/jobs_directory/000/94/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #6)" name="5" time="81.34482932090759">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/97/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/5/8/6/dataset_586ca805-d481-42ad-ae89-ab6bf1fa2725.dat--pe1-2fastq:/galaxy/server/database/objects/f/c/7/dataset_fc77d72c-8281-4ef1-a714-347c7267f91a.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/97/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/5/8/6/dataset_586ca805-d481-42ad-ae89-ab6bf1fa2725.dat']      right reads: ['/galaxy/server/database/objects/f/c/7/dataset_fc77d72c-8281-4ef1-a714-347c7267f91a.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/8/6/dataset_586ca805-d481-42ad-ae89-ab6bf1fa2725.dat  0:00:00.484     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/c/7/dataset_fc77d72c-8281-4ef1-a714-347c7267f91a.dat  0:00:00.967     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.972    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.178    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.178    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.314    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.347    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.368    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.370    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.372    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.374    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.383    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.383    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.383    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/8/6/dataset_586ca805-d481-42ad-ae89-ab6bf1fa2725.dat  0:00:01.414    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/c/7/dataset_fc77d72c-8281-4ef1-a714-347c7267f91a.dat  0:00:01.451    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.451    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.451    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.456    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.457    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.457    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.471    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.471    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/8/6/dataset_586ca805-d481-42ad-ae89-ab6bf1fa2725.dat and /galaxy/server/database/objects/f/c/7/dataset_fc77d72c-8281-4ef1-a714-347c7267f91a.dat  0:00:01.502    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.510    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.513    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.544    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.544    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.544    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml  0:00:01.548    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.127    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.132     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.320   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.328     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.509   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.567     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.567     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.567     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.568     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.568     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.568     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.568     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.693     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.696    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.696    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.802    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.803    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.803    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.803    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.803    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.803    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.275     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.280    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.497    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.497    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.635    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.671    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.692    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.692    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.693    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.694    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..sing short gaps  0:00:07.267    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.273    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.273    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.273    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.273    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.273    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.273    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.273    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.273    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.273    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.273    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.273    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.273    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.286    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.286    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.286    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.288    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.288    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.289    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta  0:00:07.293    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg  0:00:07.297    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/simplified_contigs.fasta  0:00:07.300    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/intermediate_contigs.fasta  0:00:07.307    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.307    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.307    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.307    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.307    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.307    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.381    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.546    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.347    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.347    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.355    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.506   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.508   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.514   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.518   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.518   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.518   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.533   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.548   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.567    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.567    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.567    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.567    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.567    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.567    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.567    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.567    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.567    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.567    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.567    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.568    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.568    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.568    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.568    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.568    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.568    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.568    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.568    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.568    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.568    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.574    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.574    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.574    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.574    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.574    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.574    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.574    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.574    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.574    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.574    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.574    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.574    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.574    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.575    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta  0:00:09.636    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg  0:00:09.879    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/final_contigs.paths  0:00:10.317    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/scaffolds.paths  0:00:10.869    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:10.871    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/97/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #7)" name="6" time="41.587140798568726">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/100/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/2/a/5/dataset_2a507ab6-6a42-42c3-82af-bfbc1f77e6b4.dat--pe1-2fastq:/galaxy/server/database/objects/4/4/c/dataset_44c674fa-11db-49ac-b10b-3c763f3fa46c.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/100/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/2/a/5/dataset_2a507ab6-6a42-42c3-82af-bfbc1f77e6b4.dat']      right reads: ['/galaxy/server/database/objects/4/4/c/dataset_44c674fa-11db-49ac-b10b-3c763f3fa46c.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/a/5/dataset_2a507ab6-6a42-42c3-82af-bfbc1f77e6b4.dat  0:00:00.498     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/4/c/dataset_44c674fa-11db-49ac-b10b-3c763f3fa46c.dat  0:00:00.973     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.978    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.191    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.191    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.329    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.365    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.386    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.391    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.393    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.404    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.404    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.404    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/a/5/dataset_2a507ab6-6a42-42c3-82af-bfbc1f77e6b4.dat  0:00:01.452    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/4/c/dataset_44c674fa-11db-49ac-b10b-3c763f3fa46c.dat  0:00:01.498    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.498    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.498    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.501    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.502    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.502    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.517    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.518    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.518    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.518    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/2/a/5/dataset_2a507ab6-6a42-42c3-82af-bfbc1f77e6b4.dat and /galaxy/server/database/objects/4/4/c/dataset_44c674fa-11db-49ac-b10b-3c763f3fa46c.dat  0:00:01.548    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.559    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.563    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.592    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.592    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.592    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml  0:00:01.596    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.123     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.306   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.313     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.497   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.552     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.552     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.552     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.553     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.553     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.553     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.553     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.670     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.673    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.673    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.730    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.730    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.762    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.762    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.763    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.763    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.763    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.227     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.233    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.449    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.449    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.588    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.624    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.645    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.645    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.646    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.647    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:06.865    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:06.866    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:06.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:06.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:06.866    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.866    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.867    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:06.867    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:06.867    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:06.867    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:06.867    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:06.867    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.867    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.882    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:06.882    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:06.882    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:06.884    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.884    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa  0:00:06.884    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta  0:00:06.889    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg  0:00:06.893    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/simplified_contigs.fasta  0:00:06.896    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/intermediate_contigs.fasta  0:00:06.904    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:06.904    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.904    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.904    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:06.904    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:06.904    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:06.971    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.088    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.887    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:08.887    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:08.893    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.021   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.024   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.029   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.030   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.030   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.031   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.044   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.052   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.071    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.071    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.071    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.071    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.071    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.071    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.071    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.071    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.071    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.071    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.071    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.071    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.071    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.072    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.072    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.072    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.072    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.072    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.072    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.072    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.072    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.072    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.072    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.072    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.073    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.073    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.073    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.073    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.073    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.073    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.073    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.073    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.074    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta  0:00:09.079    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg  0:00:09.083    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/final_contigs.paths  0:00:09.090    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/scaffolds.paths  0:00:09.106    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.108    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/100/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #8)" name="7" time="60.91842198371887">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/103/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/e/9/a/dataset_e9aab4a2-91c8-461d-b457-a801ba294ec6.dat--pe1-2fastq.gz:/galaxy/server/database/objects/5/c/3/dataset_5c3c8333-d361-4017-b08f-3f62135b0da0.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/103/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/e/9/a/dataset_e9aab4a2-91c8-461d-b457-a801ba294ec6.dat']      right reads: ['/galaxy/server/database/objects/5/c/3/dataset_5c3c8333-d361-4017-b08f-3f62135b0da0.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/103/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/9/a/dataset_e9aab4a2-91c8-461d-b457-a801ba294ec6.dat  0:00:00.466     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/c/3/dataset_5c3c8333-d361-4017-b08f-3f62135b0da0.dat  0:00:00.929     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.933    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.136    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.136    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.261    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.293    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.313    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.314    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.316    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.319    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.328    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/9/a/dataset_e9aab4a2-91c8-461d-b457-a801ba294ec6.dat  0:00:01.366    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/c/3/dataset_5c3c8333-d361-4017-b08f-3f62135b0da0.dat  0:00:01.407    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.407    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.407    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.415    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.416    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.416    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.439    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.439    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.439    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.439    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/e/9/a/dataset_e9aab4a2-91c8-461d-b457-a801ba294ec6.dat and /galaxy/server/database/objects/5/c/3/dataset_5c3c8333-d361-4017-b08f-3f62135b0da0.dat  0:00:01.476    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.484    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.488    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.514    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.514    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.515    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml  0:00:01.519    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/103/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/103/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.309   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.315     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.505   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.568     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.568     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.568     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.568     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.569     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.569     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.569     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.704     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.706    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.706    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.793    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.793    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.793    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.794    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.794    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.794    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.306     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.311    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.591    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.591    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.735    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.780    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.806    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.806    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.810    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.814    16M / 3G    INFO    General                 (stage.cpp                 : 101)..0:00:07.935    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.936    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.936    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.936    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.936    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.936    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.936    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.936    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.936    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.936    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.936    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.936    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.936    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.950    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.950    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.950    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.958    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.958    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.958    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta  0:00:07.963    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg  0:00:07.967    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/simplified_contigs.fasta  0:00:07.970    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/intermediate_contigs.fasta  0:00:07.986    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.986    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.986    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.986    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.986    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.986    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:08.052    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.171    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.958    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.958    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.966    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:10.116   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:10.119   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.124   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.126   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:10.126   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:10.126   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:10.139   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.145   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.159    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:10.159    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:10.159    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:10.159    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:10.160    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.160    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.160    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.160    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:10.160    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:10.160    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:10.160    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.161    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.161    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:10.161    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:10.161    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.161    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.161    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.161    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:10.161    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:10.161    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:10.161    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:10.162    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:10.162    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:10.162    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:10.162    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:10.162    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:10.162    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:10.162    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.163    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.163    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.163    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.163    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.163    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.163    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.163    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.163    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:10.163    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.164    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.164    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.164    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.164    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.164    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.164    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.164    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.164    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.164    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.164    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.164    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.164    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:10.164    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:10.164    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa  0:00:10.165    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta  0:00:10.170    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg  0:00:10.174    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/final_contigs.paths  0:00:10.182    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/scaffolds.paths  0:00:10.196    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:10.198    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/103/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>
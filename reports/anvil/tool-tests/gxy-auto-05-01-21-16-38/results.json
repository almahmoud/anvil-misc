{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://34.74.59.85:8000/galaxy/", "results": {"total": 36, "errors": 2, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 49.43853735923767, "inputs": {"library|input_1": {"src": "hda", "id": "a469a7d96700beeb"}, "library|input_2": {"src": "hda", "id": "80eefd0ba940f1c2"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "61fd88080159f8bc"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "fdd4e6144409e090", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:31:38.511325", "create_time": "2021-05-01T21:31:07.356141", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-m8k9h", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/a/5/dataset_4a564179-4af3-4809-b5c3-8c8cd013f66a.dat' genome && ln -s -f '/galaxy/server/database/objects/4/a/5/dataset_4a564179-4af3-4809-b5c3-8c8cd013f66a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/6/8/6/dataset_6865db2d-f204-41d5-abc0-f50e74544030.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/b/d/e/dataset_bde75a4b-2a68-4c00-a561-0903ded4acf2.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/7/e/f/dataset_7ef60373-abe2-4278-a8d5-89871ea4b024.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 30, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 28, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 29, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "61fd88080159f8bc", "src": "hda", "uuid": "4a564179-4af3-4809-b5c3-8c8cd013f66a"}, "input_1": {"id": "a469a7d96700beeb", "src": "hda", "uuid": "6865db2d-f204-41d5-abc0-f50e74544030"}, "input_2": {"id": "80eefd0ba940f1c2", "src": "hda", "uuid": "bde75a4b-2a68-4c00-a561-0903ded4acf2"}}, "outputs": {"output": {"id": "fdd4e6144409e090", "src": "hda", "uuid": "7ef60373-abe2-4278-a8d5-89871ea4b024"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/a/5/dataset_4a564179-4af3-4809-b5c3-8c8cd013f66a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/a/5/dataset_4a564179-4af3-4809-b5c3-8c8cd013f66a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:31:36", "plugin": "core", "name": "end_epoch", "raw_value": "1619904696.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:31:35", "plugin": "core", "name": "start_epoch", "raw_value": "1619904695.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 63.31881046295166, "inputs": {"library|input_1": {"src": "hdca", "id": "2c2e3548ba1487ec"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "7413a0e74bbec53f"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "81f39a520cc02469", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:31:46.747002", "create_time": "2021-05-01T21:31:18.278174", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-kwtln", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat' genome && ln -s -f '/galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/1/d/9/dataset_1d9df543-6267-4496-b587-67ce15b5cca8.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/3/5/6/dataset_35677c02-fc6b-487f-a13f-9b0172e08b26.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/e/1/8/dataset_e1845762-b3a4-4ac2-9c15-ba77b19fb593.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/a/7/dataset_0a735f28-af0d-452a-8601-c15860a72572.dat'  && mv '/galaxy/server/database/objects/e/1/8/dataset_e1845762-b3a4-4ac2-9c15-ba77b19fb593.1.dat' '/galaxy/server/database/objects/e/1/8/dataset_e1845762-b3a4-4ac2-9c15-ba77b19fb593.dat' && mv '/galaxy/server/database/objects/e/1/8/dataset_e1845762-b3a4-4ac2-9c15-ba77b19fb593.2.dat' '/galaxy/server/database/objects/0/0/1/dataset_00186da0-83bb-4e10-b023-2f70e89e0838.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"own_file": {"id": "7413a0e74bbec53f", "src": "hda", "uuid": "d798a87a-e38f-4296-9540-a6bc214663fc"}, "input_11": {"id": "976c4d210c0cb70a", "src": "hda", "uuid": "1d9df543-6267-4496-b587-67ce15b5cca8"}, "input_12": {"id": "7b19ef4b67e324bd", "src": "hda", "uuid": "35677c02-fc6b-487f-a13f-9b0172e08b26"}}, "outputs": {"output_unaligned_reads_l": {"id": "81f39a520cc02469", "src": "hda", "uuid": "e1845762-b3a4-4ac2-9c15-ba77b19fb593"}, "output_unaligned_reads_r": {"id": "de03ff321359d53a", "src": "hda", "uuid": "00186da0-83bb-4e10-b023-2f70e89e0838"}, "output": {"id": "92768837f803241d", "src": "hda", "uuid": "0a735f28-af0d-452a-8601-c15860a72572"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 80%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  bucket 4: 100%\n  (Using difference cover)\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 80%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  bucket 4: 100%\n  (Using difference cover)\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:31:44", "plugin": "core", "name": "end_epoch", "raw_value": "1619904704.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:31:43", "plugin": "core", "name": "start_epoch", "raw_value": "1619904703.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 61.97866415977478, "inputs": {"library|input_1": {"src": "hda", "id": "976c4d210c0cb70a"}, "library|input_2": {"src": "hda", "id": "7b19ef4b67e324bd"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "7413a0e74bbec53f"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "de03ff321359d53a", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:31:50.582746", "create_time": "2021-05-01T21:31:36.386747", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-4khb7", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat' genome && ln -s -f '/galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/1/d/9/dataset_1d9df543-6267-4496-b587-67ce15b5cca8.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/3/5/6/dataset_35677c02-fc6b-487f-a13f-9b0172e08b26.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/1/0/9/dataset_1099ef82-99e5-44aa-aa4a-e0eb9822ef9f.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": \"\", \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": \"\", \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "7413a0e74bbec53f", "src": "hda", "uuid": "d798a87a-e38f-4296-9540-a6bc214663fc"}, "input_1": {"id": "976c4d210c0cb70a", "src": "hda", "uuid": "1d9df543-6267-4496-b587-67ce15b5cca8"}, "input_2": {"id": "7b19ef4b67e324bd", "src": "hda", "uuid": "35677c02-fc6b-487f-a13f-9b0172e08b26"}}, "outputs": {"output": {"id": "fb681559c3787155", "src": "hda", "uuid": "1099ef82-99e5-44aa-aa4a-e0eb9822ef9f"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 8 of 15\nGetting block 7 of 15\n  Reserving size (1554) for bucket 8\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 8 of 15\nGetting block 7 of 15\n  Reserving size (1554) for bucket 8\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:31:47", "plugin": "core", "name": "start_epoch", "raw_value": "1619904707.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:31:47", "plugin": "core", "name": "end_epoch", "raw_value": "1619904707.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 58.73195958137512, "inputs": {"library|input_1": {"src": "hda", "id": "976c4d210c0cb70a"}, "library|input_2": {"src": "hda", "id": "7b19ef4b67e324bd"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "7413a0e74bbec53f"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "92768837f803241d", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:31:53.545632", "create_time": "2021-05-01T21:31:36.682938", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-c7htg", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat' genome && ln -s -f '/galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/1/d/9/dataset_1d9df543-6267-4496-b587-67ce15b5cca8.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/3/5/6/dataset_35677c02-fc6b-487f-a13f-9b0172e08b26.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/8/8/a/dataset_88ae9271-9752-4555-900d-f73b4eacc6ca.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/d/5/dataset_9d595d6c-1d15-4671-ac4a-35643a9d9ef6.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "7413a0e74bbec53f", "src": "hda", "uuid": "d798a87a-e38f-4296-9540-a6bc214663fc"}, "input_1": {"id": "976c4d210c0cb70a", "src": "hda", "uuid": "1d9df543-6267-4496-b587-67ce15b5cca8"}, "input_2": {"id": "7b19ef4b67e324bd", "src": "hda", "uuid": "35677c02-fc6b-487f-a13f-9b0172e08b26"}}, "outputs": {"output": {"id": "260b4b11669b592f", "src": "hda", "uuid": "9d595d6c-1d15-4671-ac4a-35643a9d9ef6"}, "mapping_stats": {"id": "933f0920897bd6c0", "src": "hda", "uuid": "88ae9271-9752-4555-900d-f73b4eacc6ca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/7/9/dataset_d798a87a-e38f-4296-9540-a6bc214663fc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:31:51", "plugin": "core", "name": "start_epoch", "raw_value": "1619904711.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:31:52", "plugin": "core", "name": "end_epoch", "raw_value": "1619904712.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 53.0146689414978, "inputs": {"library|input_1": {"src": "hda", "id": "f23806ae15731aba"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "5a7ab69bcaf696c0"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "933f0920897bd6c0", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:32:16.380711", "create_time": "2021-05-01T21:32:06.860437", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-bg6fc", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/b/4/b/dataset_b4b418af-454e-4947-b86a-6963e7eb269e.dat' genome && ln -s -f '/galaxy/server/database/objects/b/4/b/dataset_b4b418af-454e-4947-b86a-6963e7eb269e.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/5/5/a/dataset_55a7e883-6692-4ac8-a105-c8c31fab8b75.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/a/2/dataset_ca26cd37-cf51-4c96-a068-0c06738e69a3.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": \"\", \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": \"\", \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 45, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 44, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "5a7ab69bcaf696c0", "src": "hda", "uuid": "b4b418af-454e-4947-b86a-6963e7eb269e"}, "input_1": {"id": "f23806ae15731aba", "src": "hda", "uuid": "55a7e883-6692-4ac8-a105-c8c31fab8b75"}}, "outputs": {"output": {"id": "ac5bc5e62f0f73f2", "src": "hda", "uuid": "ca26cd37-cf51-4c96-a068-0c06738e69a3"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/b/4/b/dataset_b4b418af-454e-4947-b86a-6963e7eb269e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/b/4/b/dataset_b4b418af-454e-4947-b86a-6963e7eb269e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Entering block accumulator loop for bucket 9:\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:32:14", "plugin": "core", "name": "start_epoch", "raw_value": "1619904734.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:32:15", "plugin": "core", "name": "end_epoch", "raw_value": "1619904735.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 65.06886529922485, "inputs": {"library|input_1": {"src": "hda", "id": "56791975e046cf53"}, "library|input_2": {"src": "hda", "id": "67e98f5f37cf3d90"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "3105b15beed04d69"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "8fa5e23e8e5c5c95", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:32:51.633948", "create_time": "2021-05-01T21:32:37.382960", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-hdgl7", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat' genome && ln -s -f '/galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/3/d/0/dataset_3d0b537a-74de-4b23-98db-895864ba0160.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/d/f/d/dataset_dfd6eeec-5bc2-4d4a-98d9-ccc8984b9448.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/b/5/a/dataset_b5ab9f31-4352-4ac3-bf7d-31ef85d9378b.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 47, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "56791975e046cf53", "src": "hda", "uuid": "3d0b537a-74de-4b23-98db-895864ba0160"}, "input_2": {"id": "67e98f5f37cf3d90", "src": "hda", "uuid": "dfd6eeec-5bc2-4d4a-98d9-ccc8984b9448"}, "own_file": {"id": "3105b15beed04d69", "src": "hda", "uuid": "c9473f53-9415-4c4c-9fba-9c8527d4068a"}}, "outputs": {"output": {"id": "d23fedc6b9e993ba", "src": "hda", "uuid": "b5ab9f31-4352-4ac3-bf7d-31ef85d9378b"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  bucket 13: 10%\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  bucket 13: 10%\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:32:47", "plugin": "core", "name": "start_epoch", "raw_value": "1619904767.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:32:48", "plugin": "core", "name": "end_epoch", "raw_value": "1619904768.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 60.75837779045105, "inputs": {"library|input_1": {"src": "hda", "id": "21b3774cdb8e7770"}, "library|input_2": {"src": "hda", "id": "8fa5e23e8e5c5c95"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "3105b15beed04d69"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "dce049134496fc1d", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:32:53.691158", "create_time": "2021-05-01T21:32:37.572091", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-94ljt", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat' genome && ln -s -f '/galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/e/a/dataset_4eae51ba-9ae0-46c2-89b3-66bc8328b664.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/4/1/b/dataset_41b6877b-af17-4927-a3ed-34d09a22ce83.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/b/3/dataset_2b3749b1-ff01-4ca3-aeac-ae81b3c2a22d.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 53, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "21b3774cdb8e7770", "src": "hda", "uuid": "4eae51ba-9ae0-46c2-89b3-66bc8328b664"}, "input_2": {"id": "8fa5e23e8e5c5c95", "src": "hda", "uuid": "41b6877b-af17-4927-a3ed-34d09a22ce83"}, "own_file": {"id": "3105b15beed04d69", "src": "hda", "uuid": "c9473f53-9415-4c4c-9fba-9c8527d4068a"}}, "outputs": {"output": {"id": "b95e0fb5e2b63829", "src": "hda", "uuid": "2b3749b1-ff01-4ca3-aeac-ae81b3c2a22d"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  bucket 9: 40%\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  bucket 9: 40%\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:32:50", "plugin": "core", "name": "start_epoch", "raw_value": "1619904770.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:32:51", "plugin": "core", "name": "end_epoch", "raw_value": "1619904771.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 60.74934387207031, "inputs": {"library|input_1": {"src": "hda", "id": "5dd514252ea23815"}, "library|input_2": {"src": "hda", "id": "7ac96ddfe8a42d81"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "3105b15beed04d69"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "3105b15beed04d69", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:32:58.749721", "create_time": "2021-05-01T21:32:37.574048", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-9pvbg", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat' genome && ln -s -f '/galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/5/c/e/dataset_5ce0e3d2-d1a9-45a1-801d-8a30e622c215.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/a/1/4/dataset_a14591ef-4735-4626-ab24-109afda22415.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/7/e/b/dataset_7ebc1b1a-e47f-4ac0-802d-300a8bc20f63.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 52, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "5dd514252ea23815", "src": "hda", "uuid": "5ce0e3d2-d1a9-45a1-801d-8a30e622c215"}, "input_2": {"id": "7ac96ddfe8a42d81", "src": "hda", "uuid": "a14591ef-4735-4626-ab24-109afda22415"}, "own_file": {"id": "3105b15beed04d69", "src": "hda", "uuid": "c9473f53-9415-4c4c-9fba-9c8527d4068a"}}, "outputs": {"output": {"id": "b330d0d0df4a7fe7", "src": "hda", "uuid": "7ebc1b1a-e47f-4ac0-802d-300a8bc20f63"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  bucket 5: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/4/dataset_c9473f53-9415-4c4c-9fba-9c8527d4068a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  bucket 5: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:32:56", "plugin": "core", "name": "start_epoch", "raw_value": "1619904776.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:32:57", "plugin": "core", "name": "end_epoch", "raw_value": "1619904777.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 61.79815173149109, "inputs": {"library|input_1": {"src": "hda", "id": "80964a6bdef3a811"}, "library|input_2": {"src": "hda", "id": "18a0ee9ba162ad14"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "a855035c519c260b"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "80964a6bdef3a811", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:33:18.350915", "create_time": "2021-05-01T21:33:07.980738", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-nlp5j", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/6/d/b/dataset_6db71a5a-e152-471e-a723-ef6965d02ee4.dat' genome && ln -s -f '/galaxy/server/database/objects/6/d/b/dataset_6db71a5a-e152-471e-a723-ef6965d02ee4.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/8/0/a/dataset_80a04f65-8f00-41ef-acf3-c5d3287443e9.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/a/8/a/dataset_a8aab359-5455-4b99-a745-7b24ceaf0a5f.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/0/8/e/dataset_08eaa948-e854-4ed3-ba3d-eb7806e3f957.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 61, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 59, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "80964a6bdef3a811", "src": "hda", "uuid": "80a04f65-8f00-41ef-acf3-c5d3287443e9"}, "input_2": {"id": "18a0ee9ba162ad14", "src": "hda", "uuid": "a8aab359-5455-4b99-a745-7b24ceaf0a5f"}, "own_file": {"id": "a855035c519c260b", "src": "hda", "uuid": "6db71a5a-e152-471e-a723-ef6965d02ee4"}}, "outputs": {"output": {"id": "19fb25917bc1a149", "src": "hda", "uuid": "08eaa948-e854-4ed3-ba3d-eb7806e3f957"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/6/d/b/dataset_6db71a5a-e152-471e-a723-ef6965d02ee4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  bucket 13: 10%\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\nGetting block 7 of 15\n  bucket 6: 20%\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 6: 70%\n  bucket 7: 40%\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\nGetting block 9 of 15\n  Calculating Z arrays for bucket 8\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 8: 10%\n  bucket 9: 20%\n  bucket 8: 20%\n  bucket 9: 30%\n  bucket 8: 30%\n  bucket 9: 40%\n  bucket 8: 40%\n  bucket 9: 50%\n  bucket 8: 50%\n  bucket 9: 60%\n  bucket 8: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 8: 70%\n  bucket 9: 90%\n  bucket 8: 80%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 15\n  Entering block accumulator loop for bucket 10:\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 15\n  Entering block accumulator loop for bucket 12:\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\nGetting block 15 of 15\n  Calculating Z arrays for bucket 14\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 10%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 14: 20%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 14: 30%\n  bucket 15: 80%\n  bucket 14: 40%\n  bucket 15: 90%\n  bucket 14: 50%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\nReturning block of 1261 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/6/d/b/dataset_6db71a5a-e152-471e-a723-ef6965d02ee4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 15\n  bucket 13: 10%\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\nGetting block 7 of 15\n  bucket 6: 20%\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 6: 70%\n  bucket 7: 40%\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\nGetting block 9 of 15\n  Calculating Z arrays for bucket 8\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 8: 10%\n  bucket 9: 20%\n  bucket 8: 20%\n  bucket 9: 30%\n  bucket 8: 30%\n  bucket 9: 40%\n  bucket 8: 40%\n  bucket 9: 50%\n  bucket 8: 50%\n  bucket 9: 60%\n  bucket 8: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 8: 70%\n  bucket 9: 90%\n  bucket 8: 80%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 15\n  Entering block accumulator loop for bucket 10:\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 15\n  Entering block accumulator loop for bucket 12:\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\nGetting block 15 of 15\n  Calculating Z arrays for bucket 14\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 14: 10%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 14: 20%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 14: 30%\n  bucket 15: 80%\n  bucket 14: 40%\n  bucket 15: 90%\n  bucket 14: 50%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\nReturning block of 1261 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:33:15", "plugin": "core", "name": "start_epoch", "raw_value": "1619904795.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:33:16", "plugin": "core", "name": "end_epoch", "raw_value": "1619904796.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 41.37441539764404, "inputs": {"library|input_1": {"src": "hda", "id": "4e2df848dfc4824f"}, "library|input_2": {"src": "hda", "id": "4c780de4721d0278"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "1bd24a3ba4e853ef"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "557bb306ca173385", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:33:48.294212", "create_time": "2021-05-01T21:33:38.897632", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "a18d3232a1404368", "external_id": "gxy-j9jwz", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/a/9/2/dataset_a922fa38-97b3-4560-b4fa-52f686a218d6.dat' genome && ln -s -f '/galaxy/server/database/objects/a/9/2/dataset_a922fa38-97b3-4560-b4fa-52f686a218d6.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/e/9/dataset_ce94e62c-5155-472f-903d-7c7d12bec848.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/f/d/1/dataset_fd1015eb-3285-46cc-b6cd-33ebd37fed80.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/1/f/0/dataset_1f0d56ae-f821-4b86-a3c6-93cafeea1c67.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 67, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 63, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 64, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "4e2df848dfc4824f", "src": "hda", "uuid": "ce94e62c-5155-472f-903d-7c7d12bec848"}, "input_2": {"id": "4c780de4721d0278", "src": "hda", "uuid": "fd1015eb-3285-46cc-b6cd-33ebd37fed80"}, "own_file": {"id": "1bd24a3ba4e853ef", "src": "hda", "uuid": "a922fa38-97b3-4560-b4fa-52f686a218d6"}}, "outputs": {"output": {"id": "4df999ffe7fab583", "src": "hda", "uuid": "1f0d56ae-f821-4b86-a3c6-93cafeea1c67"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/2/dataset_a922fa38-97b3-4560-b4fa-52f686a218d6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 40%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 11: 50%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 50%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/2/dataset_a922fa38-97b3-4560-b4fa-52f686a218d6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 40%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 11: 50%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 50%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:33:47", "plugin": "core", "name": "end_epoch", "raw_value": "1619904827.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:33:46", "plugin": "core", "name": "start_epoch", "raw_value": "1619904826.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 25.04846978187561, "inputs": {"source|target": {"src": "hda", "id": "8e9f1d77bacec7c7"}, "source|ref_source": "history", "query": {"src": "hda", "id": "2e4b3a6f0356dfd9"}}, "job": {"model_class": "Job", "id": "8e9f1d77bacec7c7", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:34:03.957005", "create_time": "2021-05-01T21:33:48.615313", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "a18d3232a1404368", "external_id": "gxy-splm5", "command_line": "lastz_D  '/galaxy/server/database/objects/0/d/3/dataset_0d308760-6c65-407d-a09a-2b6b2581fa8e.dat'    '/galaxy/server/database/objects/4/f/9/dataset_4f91157a-bc4c-4b09-8ad2-95530c18c218.dat'   --inferonly '--infscores=/galaxy/server/database/objects/b/9/5/dataset_b958cb36-5a96-4984-b748-35e8f43a6da2.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "score_file": "null", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 75, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "8e9f1d77bacec7c7", "src": "hda", "uuid": "0d308760-6c65-407d-a09a-2b6b2581fa8e"}, "query": {"id": "2e4b3a6f0356dfd9", "src": "hda", "uuid": "4f91157a-bc4c-4b09-8ad2-95530c18c218"}}, "outputs": {"output": {"id": "9f6c2d19f6e2e809", "src": "hda", "uuid": "b958cb36-5a96-4984-b748-35e8f43a6da2"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:34:01", "plugin": "core", "name": "end_epoch", "raw_value": "1619904841.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:34:01", "plugin": "core", "name": "start_epoch", "raw_value": "1619904841.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 24.725054502487183, "inputs": {"source|target": {"src": "hda", "id": "aaee4661627622b9"}, "source|ref_source": "history", "query": {"src": "hda", "id": "ae5c8fc164e9abef"}, "score_file": {"src": "hda", "id": "0ddae8cd25988225"}}, "job": {"model_class": "Job", "id": "0ddae8cd25988225", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:34:18.756585", "create_time": "2021-05-01T21:34:08.666523", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "a18d3232a1404368", "external_id": "gxy-4v4qp", "command_line": "lastz_D  '/galaxy/server/database/objects/7/b/7/dataset_7b7ef1f3-f10f-4c89-8343-5f4ebab55ade.dat'    '/galaxy/server/database/objects/4/c/a/dataset_4ca1eecf-3947-48a1-91ee-ff9c2d701f20.dat'   '--inferonly=/galaxy/server/database/objects/0/e/d/dataset_0ed4aa4e-9b5a-4631-a7b5-118db7262b7f.dat' '--infscores=/galaxy/server/database/objects/f/4/d/dataset_f4d95283-4156-482d-a366-f2182e59b0da.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 79, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "aaee4661627622b9", "src": "hda", "uuid": "7b7ef1f3-f10f-4c89-8343-5f4ebab55ade"}, "query": {"id": "ae5c8fc164e9abef", "src": "hda", "uuid": "4ca1eecf-3947-48a1-91ee-ff9c2d701f20"}, "score_file": {"id": "0ddae8cd25988225", "src": "hda", "uuid": "0ed4aa4e-9b5a-4631-a7b5-118db7262b7f"}}, "outputs": {"output": {"id": "e35dbd99a5f2f771", "src": "hda", "uuid": "f4d95283-4156-482d-a366-f2182e59b0da"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:34:17", "plugin": "core", "name": "end_epoch", "raw_value": "1619904857.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:34:17", "plugin": "core", "name": "start_epoch", "raw_value": "1619904857.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "tool_version": "0.2.2", "test_index": 0, "time_seconds": 55.91638708114624, "inputs": {"referenceSource|reference": {"src": "hda", "id": "994fbae8f2786141"}, "single_or_paired|input_mate1": {"src": "hda", "id": "557bb306ca173385"}, "single_or_paired|input_mate2": {"src": "hda", "id": "0bdab69d779ec88a"}, "single_or_paired|single_or_paired_opts": "paired"}, "job": {"model_class": "Job", "id": "0bdab69d779ec88a", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:34:03.242911", "create_time": "2021-05-01T21:33:39.010809", "galaxy_version": "20.09", "command_version": "bwa-meth.py 0.2.2\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "a18d3232a1404368", "external_id": "gxy-knfxk", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/b/5/2/dataset_b52f702d-7c28-4f01-941a-8cd70b956cc3.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -f -s '/galaxy/server/database/objects/2/e/f/dataset_2ef17a61-c180-4a8e-ba8a-050bb89d3650.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/d/0/7/dataset_d0709aac-4461-4ce2-85ab-62a73e3d0ba8.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 69, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 71, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "a4484add15cd2fce", "src": "hda", "uuid": "b52f702d-7c28-4f01-941a-8cd70b956cc3"}, "input_mate1": {"id": "557bb306ca173385", "src": "hda", "uuid": "2ef17a61-c180-4a8e-ba8a-050bb89d3650"}, "input_mate2": {"id": "0bdab69d779ec88a", "src": "hda", "uuid": "d0709aac-4461-4ce2-85ab-62a73e3d0ba8"}}, "outputs": {"output": {"id": "2cd1345fdfe1eaf2", "src": "hda", "uuid": "7c46977c-2760-404e-9ef4-d2b6c3a3e5d2"}}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.97 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.355 sec; CPU: 1.251 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.036 CPU sec, 0.019 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.128 sec; CPU: 0.044 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.97 seconds elapse.\n[bwa_index] Update BWT... 0.02 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.23 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.355 sec; CPU: 1.251 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.036 CPU sec, 0.019 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.128 sec; CPU: 0.044 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:34:00", "plugin": "core", "name": "end_epoch", "raw_value": "1619904840.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:33:58", "plugin": "core", "name": "start_epoch", "raw_value": "1619904838.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "tool_version": "0.2.2", "test_index": 1, "time_seconds": 55.92997193336487, "inputs": {"referenceSource|reference": {"src": "hda", "id": "994fbae8f2786141"}, "single_or_paired|input_mate1": {"src": "hdca", "id": "3f2db7c7b13277ec"}, "single_or_paired|single_or_paired_opts": "paired_collection"}, "job": {"model_class": "Job", "id": "2cd1345fdfe1eaf2", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:34:03.179642", "create_time": "2021-05-01T21:33:43.199009", "galaxy_version": "20.09", "command_version": "bwa-meth.py 0.2.2\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "a18d3232a1404368", "external_id": "gxy-m5pg5", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/b/5/2/dataset_b52f702d-7c28-4f01-941a-8cd70b956cc3.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -s '/galaxy/server/database/objects/2/e/f/dataset_2ef17a61-c180-4a8e-ba8a-050bb89d3650.dat' input_f.fastq.gz &&  ln -s '/galaxy/server/database/objects/d/0/7/dataset_d0709aac-4461-4ce2-85ab-62a73e3d0ba8.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "a4484add15cd2fce", "src": "hda", "uuid": "b52f702d-7c28-4f01-941a-8cd70b956cc3"}, "input_mate11": {"id": "0bdab69d779ec88a", "src": "hda", "uuid": "d0709aac-4461-4ce2-85ab-62a73e3d0ba8"}, "input_mate12": {"id": "557bb306ca173385", "src": "hda", "uuid": "2ef17a61-c180-4a8e-ba8a-050bb89d3650"}}, "outputs": {"output": {"id": "13e986b97f89bb67", "src": "hda", "uuid": "bb21fd2e-a88c-4dc2-aacb-67578667ab2b"}}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 1.00 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.25 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.408 sec; CPU: 1.320 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.041 CPU sec, 0.023 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.139 sec; CPU: 0.049 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 1.00 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.25 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.408 sec; CPU: 1.320 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.041 CPU sec, 0.023 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.139 sec; CPU: 0.049 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:34:00", "plugin": "core", "name": "end_epoch", "raw_value": "1619904840.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:33:58", "plugin": "core", "name": "start_epoch", "raw_value": "1619904838.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 0, "time_seconds": 28.77794313430786, "inputs": {"reads": {"src": "hda", "id": "949957c484e514be"}, "reference_source|ref": {"src": "hda", "id": "01b7828cf2757415"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "16fb942eef5f0910", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:22.024154", "create_time": "2021-05-01T21:36:01.724101", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-zfqb7", "command_line": "ln -s '/galaxy/server/database/objects/e/4/2/dataset_e423ade5-74de-49ef-8aec-a36a27ad8fb1.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/3/6/7/dataset_3671da2f-150b-4398-bfec-bac9d7b3fca7.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/c/7/f/metadata_c7fa3c27-bf73-419b-a65e-45d01d1254d6.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 142, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "949957c484e514be", "src": "hda", "uuid": "3671da2f-150b-4398-bfec-bac9d7b3fca7"}, "ref": {"id": "01b7828cf2757415", "src": "hda", "uuid": "e423ade5-74de-49ef-8aec-a36a27ad8fb1"}}, "outputs": {"variants": {"id": "ba2192f0c071b95e", "src": "hda", "uuid": "46fe2bfe-9325-414a-aa26-f0cc41edc9d5"}}, "tool_stdout": "INFO [2021-05-01 21:36:16,495]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-05-01 21:36:16,511]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:19,806]: Executing lofreq filter -i /tmp/lofreq2_call_paralleljt15v1rn/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-05-01 21:36:16,495]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-05-01 21:36:16,511]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:19,806]: Executing lofreq filter -i /tmp/lofreq2_call_paralleljt15v1rn/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:19", "plugin": "core", "name": "end_epoch", "raw_value": "1619904979.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:16", "plugin": "core", "name": "start_epoch", "raw_value": "1619904976.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 1, "time_seconds": 30.082071781158447, "inputs": {"reads": {"src": "hda", "id": "991634898c2b9e46"}, "reference_source|ref": {"src": "hda", "id": "82b88495dd7116e4"}, "reference_source|ref_selector": "history", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "3fdad6d9f2ae0fc9", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:34.750514", "create_time": "2021-05-01T21:36:18.333105", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-scjff", "command_line": "ln -s '/galaxy/server/database/objects/b/3/2/dataset_b32aeae8-e07d-4e73-8607-e902bdcd94ad.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/3/9/c/dataset_39c41d2e-b9e4-4c36-9841-68712d835890.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/4/7/8/metadata_478276a2-f594-49b9-b4da-63409e0504e5.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 0, \"src_qual\": \"\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 145, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "991634898c2b9e46", "src": "hda", "uuid": "39c41d2e-b9e4-4c36-9841-68712d835890"}, "ref": {"id": "82b88495dd7116e4", "src": "hda", "uuid": "b32aeae8-e07d-4e73-8607-e902bdcd94ad"}}, "outputs": {"variants": {"id": "a063317e3c89a77f", "src": "hda", "uuid": "86e99ea4-5431-44ac-88e1-b7dfa47c2217"}}, "tool_stdout": "INFO [2021-05-01 21:36:28,716]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-05-01 21:36:28,731]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:32,564]: Executing lofreq filter -i /tmp/lofreq2_call_parallelidxifpbr/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-05-01 21:36:28,716]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-05-01 21:36:28,731]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:32,564]: Executing lofreq filter -i /tmp/lofreq2_call_parallelidxifpbr/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:32", "plugin": "core", "name": "end_epoch", "raw_value": "1619904992.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:28", "plugin": "core", "name": "start_epoch", "raw_value": "1619904988.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 2, "time_seconds": 31.550947427749634, "inputs": {"reads": {"src": "hda", "id": "5674e33fe0eb18de"}, "reference_source|ref": {"src": "hda", "id": "098422b266fa05c9"}, "reference_source|ref_selector": "history", "call_control|source_qual|use_src_qual|def_nm_q": "40", "call_control|source_qual|use_src_qual|ign_vcf": {"src": "hda", "id": "33f9b07452e7b25b"}, "call_control|source_qual|use_src_qual|src_qual": "--src-qual", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "4dec357f40ad2b4f", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:53.705108", "create_time": "2021-05-01T21:36:40.260638", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-jrjgk", "command_line": "ln -s '/galaxy/server/database/objects/2/f/a/dataset_2fa340fe-8615-4ef7-a8bb-d01daabc8234.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/5/0/e/dataset_50e315fc-244b-49db-bb43-5e13edf8773a.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/9/7/c/metadata_97cf40ec-8b85-4ea4-984a-4795a815e222.dat' reads.bam.bai && ln -s '/galaxy/server/database/objects/2/c/5/dataset_2c5e11fc-374d-4407-b9f0-058b01686eff.dat' ign0.vcf &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --src-qual --ign-vcf 'ign0.vcf' --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 1, \"def_nm_q\": \"40\", \"ign_vcf\": {\"values\": [{\"id\": 149, \"src\": \"hda\"}]}, \"src_qual\": \"--src-qual\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "5674e33fe0eb18de", "src": "hda", "uuid": "50e315fc-244b-49db-bb43-5e13edf8773a"}, "ref": {"id": "098422b266fa05c9", "src": "hda", "uuid": "2fa340fe-8615-4ef7-a8bb-d01daabc8234"}, "call_control|source_qual|ign_vcf": {"id": "33f9b07452e7b25b", "src": "hda", "uuid": "2c5e11fc-374d-4407-b9f0-058b01686eff"}}, "outputs": {"variants": {"id": "9ff82e43c3552f16", "src": "hda", "uuid": "82f7c255-d1cb-44f2-abf2-50fcfd1c039a"}}, "tool_stdout": "INFO [2021-05-01 21:36:48,304]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-05-01 21:36:48,319]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:52,070]: Executing lofreq filter -i /tmp/lofreq2_call_paralleljkfzlfcz/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-05-01 21:36:48,304]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-05-01 21:36:48,319]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:52,070]: Executing lofreq filter -i /tmp/lofreq2_call_paralleljkfzlfcz/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:52", "plugin": "core", "name": "end_epoch", "raw_value": "1619905012.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:48", "plugin": "core", "name": "start_epoch", "raw_value": "1619905008.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 3, "time_seconds": 34.70800447463989, "inputs": {"reads": {"src": "hda", "id": "5674e33fe0eb18de"}, "reference_source|ref": {"src": "hda", "id": "098422b266fa05c9"}, "reference_source|ref_selector": "history", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "d7f531ce9beef52f", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:57.810121", "create_time": "2021-05-01T21:36:41.983394", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-cbrbg", "command_line": "ln -s '/galaxy/server/database/objects/2/f/a/dataset_2fa340fe-8615-4ef7-a8bb-d01daabc8234.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/5/0/e/dataset_50e315fc-244b-49db-bb43-5e13edf8773a.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/9/7/c/metadata_97cf40ec-8b85-4ea4-984a-4795a815e222.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "5674e33fe0eb18de", "src": "hda", "uuid": "50e315fc-244b-49db-bb43-5e13edf8773a"}, "ref": {"id": "098422b266fa05c9", "src": "hda", "uuid": "2fa340fe-8615-4ef7-a8bb-d01daabc8234"}}, "outputs": {"variants": {"id": "415d12e85858fede", "src": "hda", "uuid": "f2d0d36a-9505-4173-aa6d-3aae8489a933"}}, "tool_stdout": "INFO [2021-05-01 21:36:52,256]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-05-01 21:36:52,270]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:55,372]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-05-01 21:36:52,256]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-05-01 21:36:52,270]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-05-01 21:36:55,372]: Copying concatenated vcf file to final destination\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:55", "plugin": "core", "name": "end_epoch", "raw_value": "1619905015.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:52", "plugin": "core", "name": "start_epoch", "raw_value": "1619905012.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 4, "time_seconds": 25.282691717147827, "inputs": {"reads": {"src": "hda", "id": "85ba9c952e492a74"}, "reference_source|ref": {"src": "hda", "id": "19d70f4188d46388"}, "reference_source|ref_selector": "history", "variant_types": "--call-indels --only-indels", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "0c7bd8d54d548a6e", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:37:04.894876", "create_time": "2021-05-01T21:36:48.611402", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-vwg5h", "command_line": "ln -s '/galaxy/server/database/objects/1/6/d/dataset_16dc9c0b-7a1b-47cf-8640-864ff8b0d799.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/d/d/7/dataset_dd7c8c43-cca0-4f77-87f6-c8090c55c79a.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/f/0/8/metadata_f08087ea-fa70-4e23-8879-416ede1dc303.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf --call-indels --only-indels    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"--call-indels --only-indels\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "85ba9c952e492a74", "src": "hda", "uuid": "dd7c8c43-cca0-4f77-87f6-c8090c55c79a"}, "ref": {"id": "19d70f4188d46388", "src": "hda", "uuid": "16dc9c0b-7a1b-47cf-8640-864ff8b0d799"}}, "outputs": {"variants": {"id": "bb261f36d87199b4", "src": "hda", "uuid": "346e3004-269c-47ac-9dc4-90b0b48335f6"}}, "tool_stdout": "INFO [2021-05-01 21:36:59,108]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-05-01 21:36:59,122]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2021-05-01 21:37:03,990]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-05-01 21:36:59,108]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-05-01 21:36:59,122]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2021-05-01 21:37:03,990]: Copying concatenated vcf file to final destination\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "6 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "6.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:37:04", "plugin": "core", "name": "end_epoch", "raw_value": "1619905024.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:58", "plugin": "core", "name": "start_epoch", "raw_value": "1619905018.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 45.342763900756836, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "98fda0172a0819be"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "0f3eb0d319656f5d"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "16b3524b1c60d9c8", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:30:26.761503", "create_time": "2021-05-01T21:30:13.191488", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-8zr8s", "command_line": "ln -f -s '/galaxy/server/database/objects/e/8/3/dataset_e8350f7a-bfb0-46fe-99d4-0563430415c2.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/8/3/4/dataset_8344cb6b-d8bb-4095-9e5d-adc799713593.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/c/1/3/dataset_c137b59f-1c16-4784-88ad-1d8923b92871.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input1": {"id": "0f3eb0d319656f5d", "src": "hda", "uuid": "8344cb6b-d8bb-4095-9e5d-adc799713593"}, "ref_file": {"id": "98fda0172a0819be", "src": "hda", "uuid": "e8350f7a-bfb0-46fe-99d4-0563430415c2"}}, "outputs": {"alignment_output": {"id": "16b3524b1c60d9c8", "src": "hda", "uuid": "c137b59f-1c16-4784-88ad-1d8923b92871"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*1.00] collected minimizers\n[M::mm_idx_gen::0.005*1.21] sorted minimizers\n[M::main::0.005*1.21] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.21] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.20] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.32] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/3/4/dataset_8344cb6b-d8bb-4095-9e5d-adc799713593.dat\n[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*1.00] collected minimizers\n[M::mm_idx_gen::0.005*1.21] sorted minimizers\n[M::main::0.005*1.21] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.21] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.20] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.32] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/3/4/dataset_8344cb6b-d8bb-4095-9e5d-adc799713593.dat\n[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:30:25", "plugin": "core", "name": "end_epoch", "raw_value": "1619904625.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:30:25", "plugin": "core", "name": "start_epoch", "raw_value": "1619904625.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 45.343849897384644, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "98fda0172a0819be"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "0f3eb0d319656f5d"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "CRAM"}, "job": {"model_class": "Job", "id": "81e90763f4237532", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:30:26.755248", "create_time": "2021-05-01T21:30:12.826616", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-qrxw8", "command_line": "ln -f -s '/galaxy/server/database/objects/e/8/3/dataset_e8350f7a-bfb0-46fe-99d4-0563430415c2.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/8/3/4/dataset_8344cb6b-d8bb-4095-9e5d-adc799713593.dat' -a | samtools sort -T \"${TMPDIR:-.}\" -@${GALAXY_SLOTS:-2} -O CRAM  --reference reference.fa --output-fmt-option no_ref -o '/galaxy/server/database/objects/5/2/f/dataset_52f73b17-837f-486c-beac-b9d51291a414.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"CRAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input1": {"id": "0f3eb0d319656f5d", "src": "hda", "uuid": "8344cb6b-d8bb-4095-9e5d-adc799713593"}, "ref_file": {"id": "98fda0172a0819be", "src": "hda", "uuid": "e8350f7a-bfb0-46fe-99d4-0563430415c2"}}, "outputs": {"alignment_output": {"id": "81e90763f4237532", "src": "hda", "uuid": "52f73b17-837f-486c-beac-b9d51291a414"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.71] collected minimizers\n[M::mm_idx_gen::0.006*0.96] sorted minimizers\n[M::main::0.006*0.96] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*0.96] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.010*1.15] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/3/4/dataset_8344cb6b-d8bb-4095-9e5d-adc799713593.dat\n[M::main] Real time: 0.012 sec; CPU: 0.013 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.71] collected minimizers\n[M::mm_idx_gen::0.006*0.96] sorted minimizers\n[M::main::0.006*0.96] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*0.96] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*0.97] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.010*1.15] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/8/3/4/dataset_8344cb6b-d8bb-4095-9e5d-adc799713593.dat\n[M::main] Real time: 0.012 sec; CPU: 0.013 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:30:25", "plugin": "core", "name": "end_epoch", "raw_value": "1619904625.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:30:25", "plugin": "core", "name": "start_epoch", "raw_value": "1619904625.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 53.78054928779602, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "98fda0172a0819be"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "543705867bdd6231"}, "fastq_input|fastq_input2": {"src": "hda", "id": "c3b68bdcb1dd71b4"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "8415f3746a653365", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:30:35.354274", "create_time": "2021-05-01T21:30:18.283103", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-x9l2x", "command_line": "ln -f -s '/galaxy/server/database/objects/e/8/3/dataset_e8350f7a-bfb0-46fe-99d4-0563430415c2.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/c/3/4/dataset_c34fa8c6-9e50-41b6-834f-8162a113e26c.dat' '/galaxy/server/database/objects/4/b/3/dataset_4b3e0acd-053a-4cfe-bb48-5c649abdfce4.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/0/0/0/dataset_0007b835-64b5-426f-8792-ecff37a3ef69.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 6, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 9, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input2": {"id": "c3b68bdcb1dd71b4", "src": "hda", "uuid": "4b3e0acd-053a-4cfe-bb48-5c649abdfce4"}, "fastq_input1": {"id": "543705867bdd6231", "src": "hda", "uuid": "c34fa8c6-9e50-41b6-834f-8162a113e26c"}, "ref_file": {"id": "98fda0172a0819be", "src": "hda", "uuid": "e8350f7a-bfb0-46fe-99d4-0563430415c2"}}, "outputs": {"alignment_output": {"id": "8415f3746a653365", "src": "hda", "uuid": "0007b835-64b5-426f-8792-ecff37a3ef69"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.98] collected minimizers\n[M::mm_idx_gen::0.005*1.09] sorted minimizers\n[M::main::0.005*1.09] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.09] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.09] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.015*1.41] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/c/3/4/dataset_c34fa8c6-9e50-41b6-834f-8162a113e26c.dat /galaxy/server/database/objects/4/b/3/dataset_4b3e0acd-053a-4cfe-bb48-5c649abdfce4.dat\n[M::main] Real time: 0.017 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*0.98] collected minimizers\n[M::mm_idx_gen::0.005*1.09] sorted minimizers\n[M::main::0.005*1.09] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.09] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.09] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.015*1.41] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/c/3/4/dataset_c34fa8c6-9e50-41b6-834f-8162a113e26c.dat /galaxy/server/database/objects/4/b/3/dataset_4b3e0acd-053a-4cfe-bb48-5c649abdfce4.dat\n[M::main] Real time: 0.017 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:30:33", "plugin": "core", "name": "end_epoch", "raw_value": "1619904633.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:30:33", "plugin": "core", "name": "start_epoch", "raw_value": "1619904633.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 49.33499050140381, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "98fda0172a0819be"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "f1af474b84e756e1"}, "fastq_input|fastq_input2": {"src": "hda", "id": "c3b68bdcb1dd71b4"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "3d5bfcda16da71c1", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:30:30.897127", "create_time": "2021-05-01T21:30:17.906898", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-8wc75", "command_line": "ln -f -s '/galaxy/server/database/objects/e/8/3/dataset_e8350f7a-bfb0-46fe-99d4-0563430415c2.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/d/9/8/dataset_d98b446f-0cc9-467f-b2fa-6e277ae4bc0a.dat' '/galaxy/server/database/objects/4/b/3/dataset_4b3e0acd-053a-4cfe-bb48-5c649abdfce4.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/0/8/0/dataset_0804f30d-8b62-4ad5-801c-1cb4c2a612aa.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 9, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fastq_input2": {"id": "c3b68bdcb1dd71b4", "src": "hda", "uuid": "4b3e0acd-053a-4cfe-bb48-5c649abdfce4"}, "fastq_input1": {"id": "f1af474b84e756e1", "src": "hda", "uuid": "d98b446f-0cc9-467f-b2fa-6e277ae4bc0a"}, "ref_file": {"id": "98fda0172a0819be", "src": "hda", "uuid": "e8350f7a-bfb0-46fe-99d4-0563430415c2"}}, "outputs": {"alignment_output": {"id": "3d5bfcda16da71c1", "src": "hda", "uuid": "0804f30d-8b62-4ad5-801c-1cb4c2a612aa"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.92] collected minimizers\n[M::mm_idx_gen::0.006*1.16] sorted minimizers\n[M::main::0.006*1.15] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.15] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.15] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.019*1.34] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/d/9/8/dataset_d98b446f-0cc9-467f-b2fa-6e277ae4bc0a.dat /galaxy/server/database/objects/4/b/3/dataset_4b3e0acd-053a-4cfe-bb48-5c649abdfce4.dat\n[M::main] Real time: 0.021 sec; CPU: 0.027 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.92] collected minimizers\n[M::mm_idx_gen::0.006*1.16] sorted minimizers\n[M::main::0.006*1.15] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.15] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.15] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.019*1.34] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/d/9/8/dataset_d98b446f-0cc9-467f-b2fa-6e277ae4bc0a.dat /galaxy/server/database/objects/4/b/3/dataset_4b3e0acd-053a-4cfe-bb48-5c649abdfce4.dat\n[M::main] Real time: 0.021 sec; CPU: 0.027 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:30:28", "plugin": "core", "name": "end_epoch", "raw_value": "1619904628.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:30:28", "plugin": "core", "name": "start_epoch", "raw_value": "1619904628.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 31.783863306045532, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "45882928a81c3077"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hdca", "id": "a18d3232a1404368"}, "fastq_input|fastq_input_selector": "paired_collection"}, "job": {"model_class": "Job", "id": "eabfa15aa2b5fb72", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:30:58.560915", "create_time": "2021-05-01T21:30:48.271660", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-hcs6l", "command_line": "ln -f -s '/galaxy/server/database/objects/7/f/3/dataset_7f36dd4b-3850-463d-8d47-d4e9b6568e12.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/5/4/4/dataset_5443731b-ec0c-4a8c-aaac-4cb6a184d6cd.dat' '/galaxy/server/database/objects/d/c/d/dataset_dcd7af3c-ff6a-4d5d-957c-dc8ce49d41fa.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/5/7/e/dataset_57e92f53-f304-484c-8f52-c3323c200bf7.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 16, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"fastq_input12": {"id": "b9fd86d67da6acbb", "src": "hda", "uuid": "dcd7af3c-ff6a-4d5d-957c-dc8ce49d41fa"}, "fastq_input11": {"id": "70a6620391237c80", "src": "hda", "uuid": "5443731b-ec0c-4a8c-aaac-4cb6a184d6cd"}, "ref_file": {"id": "45882928a81c3077", "src": "hda", "uuid": "7f36dd4b-3850-463d-8d47-d4e9b6568e12"}}, "outputs": {"alignment_output": {"id": "eabfa15aa2b5fb72", "src": "hda", "uuid": "57e92f53-f304-484c-8f52-c3323c200bf7"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.95] collected minimizers\n[M::mm_idx_gen::0.006*1.14] sorted minimizers\n[M::main::0.006*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.14] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.13] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.019*1.40] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/5/4/4/dataset_5443731b-ec0c-4a8c-aaac-4cb6a184d6cd.dat /galaxy/server/database/objects/d/c/d/dataset_dcd7af3c-ff6a-4d5d-957c-dc8ce49d41fa.dat\n[M::main] Real time: 0.020 sec; CPU: 0.027 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.95] collected minimizers\n[M::mm_idx_gen::0.006*1.14] sorted minimizers\n[M::main::0.006*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.14] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.13] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.019*1.40] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/5/4/4/dataset_5443731b-ec0c-4a8c-aaac-4cb6a184d6cd.dat /galaxy/server/database/objects/d/c/d/dataset_dcd7af3c-ff6a-4d5d-957c-dc8ce49d41fa.dat\n[M::main] Real time: 0.020 sec; CPU: 0.027 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-05-01 21:30:56", "plugin": "core", "name": "end_epoch", "raw_value": "1619904656.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:30:56", "plugin": "core", "name": "start_epoch", "raw_value": "1619904656.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 5, "time_seconds": 13.49477505683899, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "aa00ca60af33d613"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: vicPac2,hg19female,oryCun2,triCas2,sacCer1,hg18canon,equCab2,panTro1,mm8canon,mm9female,tetNig2,musFur1,dipOrd1,tetNig2canon,eschColi_K12,Sscrofa9.58,canFam2,eschColi_CFT073,nomLeu2,saiBol1,susScr2,panTro2,eriEur1,apiMel4,oryLat2,mm7,rn4,Tcacao_1.0,eschColi_O157H7_EDL933,dm3,oryLat1,ce8,sarHar1,aplCal1,droMoj1,vicPac1,pseuAeru_PA7,tetNig1canon,ailMel1,droEre2,hg17,xenTro3,oryCun1,Schizosaccharomyces_pombe_1.1,caeJap3,caeJap2,rheMac3,caePb1,monDom1,Hydra_JCVI,ci2full,calJac3,anoCar2,canFam1,dp4,panTro4,sacCer3,hg38,caeRem1,equCab1,susScr1,danRer5,anoCar1,mm9,rn3,bosTau7,hg19chrX,turTru2,hg18chr21,gadMor1,rn5,droGri2,oviAri1,droPer1,caeRem3,droSim1,monDom5,nomLeu1,ponAbe2,Bombyx_mori_p50T_2.0,felCat3,panTro3full,ce10,allMis1,AaegL1,hg18nohaps,mm9canon,dm6,monDom4,strPur3,panTro1canon,eschColi_O157H7_TW14359,hg_g1k_v37,Zea_mays_B73_RefGen_v2,panPan1,felCat4,danRer3,apiMel1,danRer7,droSec1,sacCer2,Arabidopsis_thaliana_TAIR9,mm8,apiMel3,eschColi_O157H7_EC4115,Xanthomonas_oryzae_KACC10331,panTro2canon,danRer6,pUC18,tetNig1,nomLeu3,oryLat2canon,apiMel2,droAna1,galGal2,Spur_v2.6,otoGar1,caePb3,sorAra1,dasNov3,papHam1,baciSubt,caeJap4,droMoj2,hg19,echTel1,Xanthomonas_oryzae_MAFF_311018,taeGut1,gasAcu1,galGal3,Ptrichocarpa_156,droAna3,melUnd1,Amel_4.5,cb3canon,hg19canon,caeRem2,criGri1,latCha1,IscaW1,petMar1,lMaj5,geoFor1,27835,choHof1,ce6,felCat4canon,bosTau5,taeGut1canon,burkPseu_K96243,dm2,speTri2,galGal3canon,eschColi_O157H7,droVir3,hg19chrM,Araly1,calJac3canon,micMur1,galGal2canon,hg19_rCRS_pUC18_phiX174,oryza_sativa_japonica_nipponbare_IRGSP4.0,dasNov1,ente638,tupBel1,myoLuc2,pseuAeru_UCBPP_PA14,melGal1,xenTro2,anoGam1,canFam3,eschColi_K12_DH10B,mm7canon,hg17canon,bosTau2,AgamP3,taeGut2,droVir2,PhumU1,droAna2,bosTau3,mm10,Arabidopsis_thaliana_TAIR10,caePb2,bosTauMd3,droWil1,equCab2chrM,Homo_sapiens_AK1,rn3canon,danRer4,loxAfr1,tarSyr1,ce4,bordBron,borEut13,hg38female,priPac1,ci2canon,ce2,danRer2,eschColi_K12_W3110,burkPseu_1106A,aptMan1,ce7,fr2,gorGor3,bosTau4,galGal4,droGri1,pseuAeru_PAO1,hg18,loxAfr3,venter1,chrPic1,CpipJ1,fr1,Xanthomonas_oryzae_PXO99A,hetGla1,ce9,rheMac2,rn6,susScr3,droYak2,eschColi_APEC_O1,caeRem4,strPur2,ce3,felCat8,Tcas_3.0,droMoj3,ce5,phiX,otoGar3,cerSim1,panTro3canon,cavPor3,danRer10,xenTro1,dp3,caeJap1,burkPseu_668,droEre1,braFlo1,strePneu_R6,rn4canon,felCat5,papAnu2,Homo_sapiens_nuHg19_mtrCRS,cb3full,bosTau8,hg38canon,calJac1,droVir1,ornAna1,droYak1,burkPseu_1710B,bosTau6)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 6, "time_seconds": 18.032839059829712, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "aa00ca60af33d613"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "mapping_options|min_occ_floor": "1000", "alignment_options|A": "2", "alignment_options|B": "8", "alignment_options|O": "12", "alignment_options|O2": "32", "alignment_options|E": "2", "alignment_options|E2": "1", "alignment_options|z": "400", "alignment_options|s": "40"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: vicPac2,hg19female,oryCun2,triCas2,sacCer1,hg18canon,equCab2,panTro1,mm8canon,mm9female,tetNig2,musFur1,dipOrd1,tetNig2canon,eschColi_K12,Sscrofa9.58,canFam2,eschColi_CFT073,nomLeu2,saiBol1,susScr2,panTro2,eriEur1,apiMel4,oryLat2,mm7,rn4,Tcacao_1.0,eschColi_O157H7_EDL933,dm3,oryLat1,ce8,sarHar1,aplCal1,droMoj1,vicPac1,pseuAeru_PA7,tetNig1canon,ailMel1,droEre2,hg17,xenTro3,oryCun1,Schizosaccharomyces_pombe_1.1,caeJap3,caeJap2,rheMac3,caePb1,monDom1,Hydra_JCVI,ci2full,calJac3,anoCar2,canFam1,dp4,panTro4,sacCer3,hg38,caeRem1,equCab1,susScr1,danRer5,anoCar1,mm9,rn3,bosTau7,hg19chrX,turTru2,hg18chr21,gadMor1,rn5,droGri2,oviAri1,droPer1,caeRem3,droSim1,monDom5,nomLeu1,ponAbe2,Bombyx_mori_p50T_2.0,felCat3,panTro3full,ce10,allMis1,AaegL1,hg18nohaps,mm9canon,dm6,monDom4,strPur3,panTro1canon,eschColi_O157H7_TW14359,hg_g1k_v37,Zea_mays_B73_RefGen_v2,panPan1,felCat4,danRer3,apiMel1,danRer7,droSec1,sacCer2,Arabidopsis_thaliana_TAIR9,mm8,apiMel3,eschColi_O157H7_EC4115,Xanthomonas_oryzae_KACC10331,panTro2canon,danRer6,pUC18,tetNig1,nomLeu3,oryLat2canon,apiMel2,droAna1,galGal2,Spur_v2.6,otoGar1,caePb3,sorAra1,dasNov3,papHam1,baciSubt,caeJap4,droMoj2,hg19,echTel1,Xanthomonas_oryzae_MAFF_311018,taeGut1,gasAcu1,galGal3,Ptrichocarpa_156,droAna3,melUnd1,Amel_4.5,cb3canon,hg19canon,caeRem2,criGri1,latCha1,IscaW1,petMar1,lMaj5,geoFor1,27835,choHof1,ce6,felCat4canon,bosTau5,taeGut1canon,burkPseu_K96243,dm2,speTri2,galGal3canon,eschColi_O157H7,droVir3,hg19chrM,Araly1,calJac3canon,micMur1,galGal2canon,hg19_rCRS_pUC18_phiX174,oryza_sativa_japonica_nipponbare_IRGSP4.0,dasNov1,ente638,tupBel1,myoLuc2,pseuAeru_UCBPP_PA14,melGal1,xenTro2,anoGam1,canFam3,eschColi_K12_DH10B,mm7canon,hg17canon,bosTau2,AgamP3,taeGut2,droVir2,PhumU1,droAna2,bosTau3,mm10,Arabidopsis_thaliana_TAIR10,caePb2,bosTauMd3,droWil1,equCab2chrM,Homo_sapiens_AK1,rn3canon,danRer4,loxAfr1,tarSyr1,ce4,bordBron,borEut13,hg38female,priPac1,ci2canon,ce2,danRer2,eschColi_K12_W3110,burkPseu_1106A,aptMan1,ce7,fr2,gorGor3,bosTau4,galGal4,droGri1,pseuAeru_PAO1,hg18,loxAfr3,venter1,chrPic1,CpipJ1,fr1,Xanthomonas_oryzae_PXO99A,hetGla1,ce9,rheMac2,rn6,susScr3,droYak2,eschColi_APEC_O1,caeRem4,strPur2,ce3,felCat8,Tcas_3.0,droMoj3,ce5,phiX,otoGar3,cerSim1,panTro3canon,cavPor3,danRer10,xenTro1,dp3,caeJap1,burkPseu_668,droEre1,braFlo1,strePneu_R6,rn4canon,felCat5,papAnu2,Homo_sapiens_nuHg19_mtrCRS,cb3full,bosTau8,hg38canon,calJac1,droVir1,ornAna1,droYak1,burkPseu_1710B,bosTau6)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 29.01881217956543, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "edc605ffc1787905"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "edc605ffc1787905"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "78d181719983e2ce", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:31:04.571326", "create_time": "2021-05-01T21:30:55.053403", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-lzx44", "command_line": "ln -f -s '/galaxy/server/database/objects/d/2/5/dataset_d25f7f97-fdf3-480f-9ffd-0b2c23970396.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/d/2/5/dataset_d25f7f97-fdf3-480f-9ffd-0b2c23970396.dat' > '/galaxy/server/database/objects/1/9/3/dataset_193525f8-c0e8-4f3d-99e3-0774b71d89b3.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"paf\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref_file": {"id": "edc605ffc1787905", "src": "hda", "uuid": "d25f7f97-fdf3-480f-9ffd-0b2c23970396"}, "fastq_input1": {"id": "edc605ffc1787905", "src": "hda", "uuid": "d25f7f97-fdf3-480f-9ffd-0b2c23970396"}}, "outputs": {"alignment_output": {"id": "78d181719983e2ce", "src": "hda", "uuid": "193525f8-c0e8-4f3d-99e3-0774b71d89b3"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.020*0.89] collected minimizers\n[M::mm_idx_gen::0.035*1.34] sorted minimizers\n[M::main::0.035*1.34] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.038*1.32] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.040*1.31] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.051*1.37] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/d/2/5/dataset_d25f7f97-fdf3-480f-9ffd-0b2c23970396.dat\n[M::main] Real time: 0.058 sec; CPU: 0.077 sec; Peak RSS: 0.009 GB\n", "stderr": "\n[M::mm_idx_gen::0.020*0.89] collected minimizers\n[M::mm_idx_gen::0.035*1.34] sorted minimizers\n[M::main::0.035*1.34] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.038*1.32] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.040*1.31] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.051*1.37] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/d/2/5/dataset_d25f7f97-fdf3-480f-9ffd-0b2c23970396.dat\n[M::main] Real time: 0.058 sec; CPU: 0.077 sec; Peak RSS: 0.009 GB\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:31:02", "plugin": "core", "name": "start_epoch", "raw_value": "1619904662.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:31:02", "plugin": "core", "name": "end_epoch", "raw_value": "1619904662.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 27.092745304107666, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "b2c11a10fb1cbc65"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "b2c11a10fb1cbc65"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "8dabcb42677853a3", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:31:07.951238", "create_time": "2021-05-01T21:30:56.222351", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "a18d3232a1404368", "external_id": "gxy-r2v64", "command_line": "ln -f -s '/galaxy/server/database/objects/5/b/3/dataset_5b3f826c-a819-4643-8c49-6eda6432ada2.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/5/b/3/dataset_5b3f826c-a819-4643-8c49-6eda6432ada2.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/f/4/5/dataset_f4549acc-feee-439c-b774-91559edd381a.dat'", "params": {"reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref_file": {"id": "b2c11a10fb1cbc65", "src": "hda", "uuid": "5b3f826c-a819-4643-8c49-6eda6432ada2"}, "fastq_input1": {"id": "b2c11a10fb1cbc65", "src": "hda", "uuid": "5b3f826c-a819-4643-8c49-6eda6432ada2"}}, "outputs": {"alignment_output": {"id": "0a707dfa99811008", "src": "hda", "uuid": "f4549acc-feee-439c-b774-91559edd381a"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.89] collected minimizers\n[M::mm_idx_gen::0.006*1.08] sorted minimizers\n[M::main::0.006*1.08] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.08] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.07] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.049*0.99] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/5/b/3/dataset_5b3f826c-a819-4643-8c49-6eda6432ada2.dat\n[M::main] Real time: 0.051 sec; CPU: 0.050 sec; Peak RSS: 0.010 GB\n", "stderr": "\n[M::mm_idx_gen::0.004*0.89] collected minimizers\n[M::mm_idx_gen::0.006*1.08] sorted minimizers\n[M::main::0.006*1.08] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.08] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.07] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.049*0.99] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/5/b/3/dataset_5b3f826c-a819-4643-8c49-6eda6432ada2.dat\n[M::main] Real time: 0.051 sec; CPU: 0.050 sec; Peak RSS: 0.010 GB\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:31:06", "plugin": "core", "name": "start_epoch", "raw_value": "1619904666.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:31:06", "plugin": "core", "name": "end_epoch", "raw_value": "1619904666.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 0, "time_seconds": 46.46356558799744, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "664bcba58e4c936a"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "1c7c9231b66368a0"}}, "job": {"model_class": "Job", "id": "04924aee26039452", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:34:44.938463", "create_time": "2021-05-01T21:34:16.426655", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-sqzbk", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat --pe1-2 fastq:/galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat && python '/galaxy/server/database/jobs_directory/000/86/configs/tmpu84d2hxz' < contigs.fasta > '/galaxy/server/database/objects/2/f/5/dataset_2f5b408b-546c-44c3-aac3-2b05f8ede942.dat' && python '/galaxy/server/database/jobs_directory/000/86/configs/tmpu84d2hxz' < scaffolds.fasta > '/galaxy/server/database/objects/3/9/e/dataset_39eba7d8-bb84-40e8-bf70-cae16ad907a0.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 82, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 83, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "664bcba58e4c936a", "src": "hda", "uuid": "16727aa7-41a7-4bf9-beb0-f7a9d1c6a602"}, "libraries_0|files_0|rev_reads": {"id": "1c7c9231b66368a0", "src": "hda", "uuid": "abbc61b2-073f-40ba-a0f1-b76006c6ef1e"}}, "outputs": {"out_contig_stats": {"id": "3c9d2734ef06cf7f", "src": "hda", "uuid": "2f5b408b-546c-44c3-aac3-2b05f8ede942"}, "out_scaffold_stats": {"id": "37f8792654fb3806", "src": "hda", "uuid": "39eba7d8-bb84-40e8-bf70-cae16ad907a0"}, "out_contigs": {"id": "66da433057f8e413", "src": "hda", "uuid": "0da9e990-6c2c-4062-9de8-e668a7beb958"}, "out_scaffolds": {"id": "ab5e20a5521c7a99", "src": "hda", "uuid": "f08881bb-3766-4e8a-8a67-2b2929b03e13"}, "out_log": {"id": "0f262064c6d645cb", "src": "hda", "uuid": "e6a6e738-371d-4c5c-b9d4-6233bdee2e48"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/86/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/86/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat']\n      right reads: ['/galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/86/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/86/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/86/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/86/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat\n  0:00:00.499     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\n  0:00:00.989     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.994    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.345    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.380    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.402    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.404    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.406    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.409    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.418    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.418    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.418    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat\n  0:00:01.466    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\n  0:00:01.510    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.510    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.510    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.515    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.515    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.531    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.531    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat and /galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\n  0:00:01.564    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.575    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.578    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.606    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.606    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.606    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/86/working/corrected/corrected.yaml\n  0:00:01.611    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/86/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/86/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/86/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.299   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.492   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.555     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.680     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.738    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.738    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.773    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.774    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.774    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.775    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.775    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.775    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.261     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.266    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.610    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.649    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.683    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.683    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.684    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.685    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:06.729    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.730    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.730    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.730    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.730    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.730    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.730    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.730    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.743    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.743    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.743    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.752    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.752    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.753    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/before_rr.fasta\n  0:00:06.758    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph.fastg\n  0:00:06.762    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/simplified_contigs.fasta\n  0:00:06.766    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/intermediate_contigs.fasta\n  0:00:06.774    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.774    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.774    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.774    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.774    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.774    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.844    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.963    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.737    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.737    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.745    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.870   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:08.873   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.878   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.879   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:08.879   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:08.879   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:08.892   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.900   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.917    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:08.917    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.917    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.917    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:08.917    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.917    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:08.917    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:08.918    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.918    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.918    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.918    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:08.918    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:08.918    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:08.918    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:08.919    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.919    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.920    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/before_rr.fasta\n  0:00:08.924    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph.fastg\n  0:00:08.929    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/86/working//K33/final_contigs.paths\n  0:00:08.937    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/86/working//K33/scaffolds.paths\n  0:00:08.951    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:08.953    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 8 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/86/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/86/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/86/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/86/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/86/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/86/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/86/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/86/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/86/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/86/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat']\n      right reads: ['/galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/86/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/86/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/86/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/86/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat\n  0:00:00.499     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\n  0:00:00.989     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.994    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.205    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.345    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.380    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.402    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.404    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.406    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.409    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.418    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.418    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.418    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat\n  0:00:01.466    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\n  0:00:01.510    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.510    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.510    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.515    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.515    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.515    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.531    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.531    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.531    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/1/6/7/dataset_16727aa7-41a7-4bf9-beb0-f7a9d1c6a602.dat and /galaxy/server/database/objects/a/b/b/dataset_abbc61b2-073f-40ba-a0f1-b76006c6ef1e.dat\n  0:00:01.564    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.575    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.578    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.606    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.606    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.606    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/86/working/corrected/corrected.yaml\n  0:00:01.611    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/86/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/86/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/86/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.299   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.492   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.555     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.680     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.738    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.738    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.773    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.774    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.774    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.775    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.775    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.775    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.261     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.266    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.610    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.649    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.683    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.683    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.684    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.685    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:06.729    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.730    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.730    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.730    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.730    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.730    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.730    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.730    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.730    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.730    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.743    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.743    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.743    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.752    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.752    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.753    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/before_rr.fasta\n  0:00:06.758    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph.fastg\n  0:00:06.762    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/simplified_contigs.fasta\n  0:00:06.766    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/intermediate_contigs.fasta\n  0:00:06.774    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.774    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.774    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.774    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.774    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.774    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.844    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.963    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.737    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.737    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.745    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.870   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:08.873   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.878   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.879   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:08.879   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:08.879   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:08.892   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.900   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.917    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:08.917    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.917    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.917    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:08.917    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.917    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.917    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:08.917    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:08.918    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.918    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.918    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.918    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:08.918    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:08.918    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:08.918    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:08.919    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.919    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.919    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.919    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:08.919    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.919    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.920    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/86/working//K33/before_rr.fasta\n  0:00:08.924    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/86/working//K33/assembly_graph.fastg\n  0:00:08.929    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/86/working//K33/final_contigs.paths\n  0:00:08.937    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/86/working//K33/scaffolds.paths\n  0:00:08.951    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:08.953    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 8 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/86/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/86/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/86/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/86/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/86/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/86/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/86/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/86/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:34:44", "plugin": "core", "name": "end_epoch", "raw_value": "1619904884.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:34:32", "plugin": "core", "name": "start_epoch", "raw_value": "1619904872.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 1, "time_seconds": 56.22885847091675, "inputs": {"sc": false, "onlyassembler": true, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "b0154cb8a978de78"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "9a2da9bd5a077838"}}, "job": {"model_class": "Job", "id": "3c9d2734ef06cf7f", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:34:59.592037", "create_time": "2021-05-01T21:34:27.846905", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-bhz7x", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/c/0/e/dataset_c0e19ff9-da84-40c3-87a9-976fa11fb3af.dat --pe1-2 fasta:/galaxy/server/database/objects/9/5/3/dataset_953305a6-2680-425c-8ef5-97d5391d173a.dat && python '/galaxy/server/database/jobs_directory/000/89/configs/tmpzg5f8jjd' < contigs.fasta > '/galaxy/server/database/objects/3/1/5/dataset_31523d5f-96ed-4468-b381-d84c89645288.dat' && python '/galaxy/server/database/jobs_directory/000/89/configs/tmpzg5f8jjd' < scaffolds.fasta > '/galaxy/server/database/objects/c/9/b/dataset_c9bab4b1-b74e-42a0-b1bd-6b2506d973df.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 85, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 87, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"true\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "b0154cb8a978de78", "src": "hda", "uuid": "c0e19ff9-da84-40c3-87a9-976fa11fb3af"}, "libraries_0|files_0|rev_reads": {"id": "9a2da9bd5a077838", "src": "hda", "uuid": "953305a6-2680-425c-8ef5-97d5391d173a"}}, "outputs": {"out_contig_stats": {"id": "af66c7de969ed14b", "src": "hda", "uuid": "31523d5f-96ed-4468-b381-d84c89645288"}, "out_scaffold_stats": {"id": "853ccbfcc986186c", "src": "hda", "uuid": "c9bab4b1-b74e-42a0-b1bd-6b2506d973df"}, "out_contigs": {"id": "b44841f89993cc95", "src": "hda", "uuid": "b06edf6c-ff43-4c5d-8afe-5054857632b2"}, "out_scaffolds": {"id": "1d3d51eed54936f2", "src": "hda", "uuid": "cf0f2c1f-a497-40c0-bf82-f4b675a51fe7"}, "out_log": {"id": "791d6e4f8e10b9ec", "src": "hda", "uuid": "6a75f15c-6f8c-4cb5-817f-19942056c1b5"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/89/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/c/0/e/dataset_c0e19ff9-da84-40c3-87a9-976fa11fb3af.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/9/5/3/dataset_953305a6-2680-425c-8ef5-97d5391d173a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/89/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/0/e/dataset_c0e19ff9-da84-40c3-87a9-976fa11fb3af.dat']\n      right reads: ['/galaxy/server/database/objects/9/5/3/dataset_953305a6-2680-425c-8ef5-97d5391d173a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/89/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/89/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/89/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/89/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.127     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.491   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.554     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.693     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.695    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.695    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.755    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.755    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.793    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.794    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.794    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.294     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.300    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.511    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.511    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.643    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.678    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.703    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.703    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.708    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.709    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.710    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.710    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.711    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.712    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.712    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.712    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.712    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.723    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.723    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.735    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.741    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.783    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.891    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.278    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.942    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.196    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.267    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.269    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.269    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.269    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.269    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.269    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.270    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.271    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.271    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:06.271    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.777     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.781    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:07.003    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:07.003    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:07.140    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.178    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.199    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.199    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.200    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.202    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.202    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.206    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.206    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.206    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.206    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.208    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.208    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.208    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.208    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.208    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.208    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.\n..\n.167    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:08.167    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.168    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.168    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.168    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.168    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.168    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.168    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.168    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.168    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.169    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.169    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.169    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:08.169    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.169    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.169    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.182    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.182    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.182    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.185    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.186    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/before_rr.fasta\n  0:00:08.190    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph.fastg\n  0:00:08.194    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/simplified_contigs.fasta\n  0:00:08.198    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/intermediate_contigs.fasta\n  0:00:08.205    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.205    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.205    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.205    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.205    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.205    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.274    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.396    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.191    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.192    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:10.199    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.347   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.350   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.356   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.358   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.358   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.358   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.374   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.387   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.404    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.404    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.404    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.404    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.410    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.411    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.411    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.411    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.411    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.411    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.411    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.411    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.411    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.411    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.411    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.418    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.418    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.420    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/before_rr.fasta\n  0:00:10.425    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph.fastg\n  0:00:10.430    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/89/working//K33/final_contigs.paths\n  0:00:10.437    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/89/working//K33/scaffolds.paths\n  0:00:10.450    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.452    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/89/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/89/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/89/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/89/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/89/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/89/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/89/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/89/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/c/0/e/dataset_c0e19ff9-da84-40c3-87a9-976fa11fb3af.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/9/5/3/dataset_953305a6-2680-425c-8ef5-97d5391d173a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/89/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/0/e/dataset_c0e19ff9-da84-40c3-87a9-976fa11fb3af.dat']\n      right reads: ['/galaxy/server/database/objects/9/5/3/dataset_953305a6-2680-425c-8ef5-97d5391d173a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/89/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/89/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/89/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/89/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.127     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.491   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.554     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.554     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.693     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.695    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.695    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.755    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.755    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.793    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.794    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.794    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.794    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.294     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.300    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.511    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.511    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.643    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.678    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.703    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.703    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.708    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.709    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.710    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.710    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.711    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.712    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.712    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.712    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.712    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.723    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.723    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.735    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.741    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.741    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.783    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.891    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.278    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.942    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.196    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.267    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.269    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.269    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.269    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.269    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.269    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.269    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.270    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.271    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.271    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:06.271    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.777     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.781    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:07.003    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:07.003    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:07.140    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.178    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.199    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.199    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.200    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.202    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.202    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.206    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.206    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.206    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.206    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.208    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.208    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.208    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.208    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.208    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.208    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.208    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.\n..\n.167    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:08.167    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.168    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.168    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.168    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.168    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.168    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.168    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.168    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.168    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.169    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.169    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.169    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.169    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:08.169    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.169    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.169    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.182    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.182    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.182    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.185    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.186    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/before_rr.fasta\n  0:00:08.190    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph.fastg\n  0:00:08.194    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/simplified_contigs.fasta\n  0:00:08.198    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/intermediate_contigs.fasta\n  0:00:08.205    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.205    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.205    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.205    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.205    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.205    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.274    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.396    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.191    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.192    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:10.199    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.347   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.350   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.356   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.358   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.358   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.358   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.374   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.387   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.404    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.404    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.404    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.404    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.404    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.410    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.411    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.411    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.411    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.411    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.411    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.411    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.411    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.411    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.411    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.411    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.418    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.418    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.418    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.418    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.418    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.418    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.420    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/before_rr.fasta\n  0:00:10.425    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph.fastg\n  0:00:10.430    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/89/working//K33/final_contigs.paths\n  0:00:10.437    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/89/working//K33/scaffolds.paths\n  0:00:10.450    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.452    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/89/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/89/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/89/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/89/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/89/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/89/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/89/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:34:58", "plugin": "core", "name": "end_epoch", "raw_value": "1619904898.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:34:47", "plugin": "core", "name": "start_epoch", "raw_value": "1619904887.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 2, "time_seconds": 104.20483875274658, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "04924aee26039452"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "9d5d10d0a4ce3974"}}, "job": {"model_class": "Job", "id": "37f8792654fb3806", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:35:47.678702", "create_time": "2021-05-01T21:34:28.616234", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-fz964", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat && python '/galaxy/server/database/jobs_directory/000/90/configs/tmprb127l4l' < contigs.fasta > '/galaxy/server/database/objects/f/f/9/dataset_ff9c638d-cd86-4d94-a1ef-d039b36e895d.dat' && python '/galaxy/server/database/jobs_directory/000/90/configs/tmprb127l4l' < scaffolds.fasta > '/galaxy/server/database/objects/6/2/4/dataset_6247abfd-3264-4fa9-a023-0426e102bd94.dat'", "params": {"__input_ext": "\"fastq.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 88, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "04924aee26039452", "src": "hda", "uuid": "d903332b-32ae-4a64-b1cb-d63e90602c60"}, "libraries_0|files_0|rev_reads": {"id": "9d5d10d0a4ce3974", "src": "hda", "uuid": "1f306a47-4273-4ab1-b73a-cb9b756f61d1"}}, "outputs": {"out_contig_stats": {"id": "f210e3a133785a2b", "src": "hda", "uuid": "ff9c638d-cd86-4d94-a1ef-d039b36e895d"}, "out_scaffold_stats": {"id": "80e9033d21f55989", "src": "hda", "uuid": "6247abfd-3264-4fa9-a023-0426e102bd94"}, "out_contigs": {"id": "538e500b00ed5d44", "src": "hda", "uuid": "356860e2-c8d5-43c4-96fe-73cdc3d2a9b2"}, "out_scaffolds": {"id": "f889e58830a4de56", "src": "hda", "uuid": "20efb802-4e42-43b7-a4ca-fc535a5a8637"}, "out_log": {"id": "c070a973333522e0", "src": "hda", "uuid": "bfe3d993-04b0-4538-a68c-70d210463c09"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/90/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/90/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat']\n      right reads: ['/galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat\n  0:00:00.477     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\n  0:00:00.940     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.945    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.139    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.139    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.263    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.304    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.326    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.330    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.332    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.341    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.341    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.341    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat\n  0:00:01.390    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.436    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.469    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.469    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.469    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.469    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat and /galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\n  0:00:01.507    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.518    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.522    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.549    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.550    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.550    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n  0:00:01.554    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.303   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.310     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.493   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.551     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.551     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.679     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.681    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.681    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.734    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.734    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.763    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.763    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.763    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.764    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.220     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.225    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.436    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.436    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.566    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.603    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.622    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.622    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.626    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.626    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU\n..\nosing short gaps\n  0:00:06.914    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.915    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.915    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.915    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.915    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.915    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.915    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.915    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.929    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.929    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.929    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.931    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.931    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.932    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:06.950    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:06.954    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta\n  0:00:06.957    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta\n  0:00:06.965    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.965    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.965    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.965    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.965    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.965    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.037    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.152    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.947    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.948    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.953    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.079   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.082   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.087   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.088   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.103   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.111   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.126    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.126    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.127    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.127    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.127    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.129    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.129    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.129    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.129    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.129    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.129    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.129    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.129    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.129    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.129    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.130    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.130    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:09.136    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:09.141    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths\n  0:00:09.150    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths\n  0:00:09.167    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.170    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/90/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/90/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/90/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat']\n      right reads: ['/galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat\n  0:00:00.477     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\n  0:00:00.940     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.945    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.139    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.139    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.263    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.304    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.326    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.328    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.330    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.332    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.341    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.341    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.341    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat\n  0:00:01.390    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.436    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.436    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.445    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.469    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.469    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.469    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.469    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/9/0/dataset_d903332b-32ae-4a64-b1cb-d63e90602c60.dat and /galaxy/server/database/objects/1/f/3/dataset_1f306a47-4273-4ab1-b73a-cb9b756f61d1.dat\n  0:00:01.507    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.518    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.522    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.549    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.550    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.550    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n  0:00:01.554    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.303   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.310     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.493   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.551     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.551     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.679     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.681    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.681    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.734    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.734    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.763    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.763    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.763    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.764    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.220     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.225    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.436    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.436    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.566    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.603    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.622    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.622    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.626    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.626    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU\n..\nosing short gaps\n  0:00:06.914    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.915    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.915    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.915    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.915    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.915    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.915    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.915    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.915    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.915    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.929    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.929    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.929    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.931    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.931    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.932    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:06.950    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:06.954    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta\n  0:00:06.957    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta\n  0:00:06.965    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.965    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.965    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.965    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.965    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.965    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.037    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.152    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.947    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.948    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.953    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.079   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.082   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.087   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.088   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.103   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.111   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.126    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.126    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.126    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.127    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.127    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.127    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.127    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.129    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.129    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.129    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.129    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.129    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.129    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.129    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.129    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.129    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.129    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.130    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.130    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.130    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.130    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.130    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.130    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.131    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:09.136    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:09.141    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths\n  0:00:09.150    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths\n  0:00:09.167    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.170    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/90/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:35:46", "plugin": "core", "name": "end_epoch", "raw_value": "1619904946.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:35:34", "plugin": "core", "name": "start_epoch", "raw_value": "1619904934.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 3, "time_seconds": 67.66425251960754, "inputs": {"sc": false, "careful": false, "kmer_choice|auto_kmer_choice": true, "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "4a728648dda2ca95"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "b0db9e93427b9ae9"}}, "job": {"model_class": "Job", "id": "66da433057f8e413", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:35:21.428920", "create_time": "2021-05-01T21:34:33.464200", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-64jwx", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat --pe1-2 fastq:/galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat && python '/galaxy/server/database/jobs_directory/000/91/configs/tmpd8e9i_6p' < contigs.fasta > '/galaxy/server/database/objects/8/1/d/dataset_81d7a5b3-0ad1-4863-a41f-a70ff6cd3d11.dat' && python '/galaxy/server/database/jobs_directory/000/91/configs/tmpd8e9i_6p' < scaffolds.fasta > '/galaxy/server/database/objects/2/6/8/dataset_26892ece-2e4e-463e-b1f9-96768b1110ff.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 94, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 95, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "4a728648dda2ca95", "src": "hda", "uuid": "8337ca45-3933-4d84-9a86-af1aa0a6cdeb"}, "libraries_0|files_0|rev_reads": {"id": "b0db9e93427b9ae9", "src": "hda", "uuid": "dfaf6b96-88aa-4687-ad40-e1b593ed9814"}}, "outputs": {"out_contig_stats": {"id": "16fb942eef5f0910", "src": "hda", "uuid": "81d7a5b3-0ad1-4863-a41f-a70ff6cd3d11"}, "out_scaffold_stats": {"id": "efe225a7a99d1ee2", "src": "hda", "uuid": "26892ece-2e4e-463e-b1f9-96768b1110ff"}, "out_contigs": {"id": "8d0ded097e16c7e1", "src": "hda", "uuid": "175eb962-109d-48bf-b24b-7278ec493ffa"}, "out_scaffolds": {"id": "3fdad6d9f2ae0fc9", "src": "hda", "uuid": "65a8cd4f-ffc9-473d-97a1-9335d02f9fe8"}, "out_log": {"id": "7c6524c75fbee018", "src": "hda", "uuid": "63e90ea2-8343-4518-8a23-0ddd7db6ff43"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/91/working\t--disable-gzip-output\t-t\t4\t-m\t8\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/91/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat']\n      right reads: ['/galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.008     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat\n  0:00:00.511     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\n  0:00:00.979     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.984    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.189    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.189    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.328    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.365    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.386    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.390    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.393    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.401    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.401    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.401    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat\n  0:00:01.440    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\n  0:00:01.483    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.483    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat and /galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\n  0:00:01.534    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.544    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.549    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.576    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.576    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.576    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n  0:00:01.581    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.295   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.300     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.479   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.541     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.541     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.541     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.542     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.543     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.543     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.543     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.684     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.685    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.685    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.745    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.745    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.777    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.778    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.778    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.264     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.485    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.485    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.622    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.658    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.677    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.678    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.679    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.679    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl\n..\n short gaps\n  0:00:03.709    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.710    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.710    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.710    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.710    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.710    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.710    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.710    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.722    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.722    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.722    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.725    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.725    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.725    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:03.731    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:03.736    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/simplified_contigs.fasta\n  0:00:03.740    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/intermediate_contigs.fasta\n  0:00:03.749    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.749    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.749    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.749    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.749    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.749    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.817    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.928    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.706    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.706    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.712    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.838   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.841   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.845   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.847   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.847   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.847   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.861   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.868   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.886    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.886    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.886    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.886    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.887    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.887    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.887    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.887    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.887    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.887    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.889    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.889    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.890    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:05.895    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:05.899    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/final_contigs.paths\n  0:00:05.908    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/scaffolds.paths\n  0:00:05.925    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:05.928    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/91/working\t--disable-gzip-output\t-t\t4\t-m\t8\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/91/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat']\n      right reads: ['/galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.008     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.008     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.008     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat\n  0:00:00.511     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\n  0:00:00.979     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.984    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.189    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.189    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.328    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.365    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.386    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.390    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.393    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.401    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.401    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.401    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat\n  0:00:01.440    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\n  0:00:01.483    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.483    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.483    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.487    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.503    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.503    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/8/3/3/dataset_8337ca45-3933-4d84-9a86-af1aa0a6cdeb.dat and /galaxy/server/database/objects/d/f/a/dataset_dfaf6b96-88aa-4687-ad40-e1b593ed9814.dat\n  0:00:01.534    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.544    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.549    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.576    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.576    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.576    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n  0:00:01.581    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.295   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.300     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.479   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.541     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.541     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.541     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.542     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.543     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.543     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.543     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.684     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.685    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.685    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.745    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.745    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.777    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.778    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.778    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.264     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.485    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.485    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.622    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.658    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.677    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.678    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.679    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.679    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl\n..\n short gaps\n  0:00:03.709    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.710    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.710    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.710    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.710    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.710    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.710    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.710    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.710    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.710    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.722    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.722    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.722    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.725    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.725    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.725    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:03.731    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:03.736    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/simplified_contigs.fasta\n  0:00:03.740    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/intermediate_contigs.fasta\n  0:00:03.749    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.749    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.749    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.749    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.749    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.749    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.817    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.928    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.706    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.706    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.712    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.838   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.841   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.845   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.847   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.847   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.847   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.861   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.868   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.886    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.886    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.886    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.886    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.887    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.887    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.887    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.887    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.887    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.887    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.887    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.887    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.888    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.888    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.888    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.888    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.889    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.889    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.890    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:05.895    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:05.899    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/final_contigs.paths\n  0:00:05.908    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/scaffolds.paths\n  0:00:05.925    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:05.928    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:35:20", "plugin": "core", "name": "end_epoch", "raw_value": "1619904920.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:35:01", "plugin": "core", "name": "start_epoch", "raw_value": "1619904901.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 4, "time_seconds": 47.99004006385803, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "77", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "fe3ce3d100161e26"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "d4eaebb0ccb874cb"}}, "job": {"model_class": "Job", "id": "4a728648dda2ca95", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:35:33.389950", "create_time": "2021-05-01T21:34:59.730194", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-6dc2w", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat --pe1-2 fastq:/galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat && python '/galaxy/server/database/jobs_directory/000/94/configs/tmpl8ftjpo0' < contigs.fasta > '/galaxy/server/database/objects/0/3/e/dataset_03e1292c-db41-4f24-91cd-e8896457d839.dat' && python '/galaxy/server/database/jobs_directory/000/94/configs/tmpl8ftjpo0' < scaffolds.fasta > '/galaxy/server/database/objects/6/5/e/dataset_65ea0dec-5fdd-493b-a2c2-a26da56bdbeb.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 111, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 112, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "fe3ce3d100161e26", "src": "hda", "uuid": "8a0d2cdd-ee89-460f-94ea-e585e6b3af2d"}, "libraries_0|files_0|rev_reads": {"id": "d4eaebb0ccb874cb", "src": "hda", "uuid": "a9b148c3-0afb-45a0-b457-fe39f9d8e377"}}, "outputs": {"out_contig_stats": {"id": "df028e72c5b8f487", "src": "hda", "uuid": "03e1292c-db41-4f24-91cd-e8896457d839"}, "out_scaffold_stats": {"id": "a42934a62e7fe90a", "src": "hda", "uuid": "65ea0dec-5fdd-493b-a2c2-a26da56bdbeb"}, "out_contigs": {"id": "4dec357f40ad2b4f", "src": "hda", "uuid": "98e39b36-bbc1-451f-92fb-77eb60e7770f"}, "out_scaffolds": {"id": "43955a81ad602840", "src": "hda", "uuid": "d4930ddf-5d0b-4e6a-9bc4-d3b4de4cea1a"}, "out_log": {"id": "1d722c88ba518242", "src": "hda", "uuid": "30d31780-1314-4d96-a332-f09ffab1f933"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/94/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/94/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat']\n      right reads: ['/galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/94/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat\n  0:00:00.533     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\n  0:00:01.044     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.048    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.400    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.432    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.451    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.453    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.455    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.458    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.467    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat\n  0:00:01.510    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\n  0:00:01.553    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.553    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.553    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.558    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.558    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.572    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.572    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.572    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.572    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat and /galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\n  0:00:01.603    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.610    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.613    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.640    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.640    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.641    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n  0:00:01.645    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/94/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/94/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.295   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.301     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.481   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.540     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.540     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.541     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.663     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.665    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.665    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.720    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.720    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.753    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.753    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.753    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.754    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.245     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.250    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.470    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.470    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.611    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.644    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.662    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.662    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.663    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.664    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:03.808    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.809    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.809    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.809    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.809    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:03.809    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.809    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.810    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.819    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.819    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.819    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.821    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.821    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:03.822    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:03.826    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:03.830    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/simplified_contigs.fasta\n  0:00:03.834    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/intermediate_contigs.fasta\n  0:00:03.841    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.841    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.841    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.841    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:03.841    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.841    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.907    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.051    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.846    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.846    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:05.852    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.976   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.979   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.983   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.985   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.985   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.985   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.998   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.003   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.020    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.020    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.020    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.020    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.021    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.021    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.028    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.031    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.031    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.031    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.032    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.032    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.032    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.032    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.032    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.032    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.032    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.034    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.034    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.034    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.035    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.035    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.036    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.036    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.036    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.036    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.036    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.036    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.036    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:06.037    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:06.042    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:06.046    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/final_contigs.paths\n  0:00:06.053    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/scaffolds.paths\n  0:00:06.068    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.071    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/94/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/94/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/94/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat']\n      right reads: ['/galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/94/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat\n  0:00:00.533     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\n  0:00:01.044     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.048    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.400    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.432    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.451    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.453    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.455    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.458    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.467    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat\n  0:00:01.510    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\n  0:00:01.553    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.553    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.553    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.558    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.558    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.558    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.572    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.572    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.572    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.572    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/8/a/0/dataset_8a0d2cdd-ee89-460f-94ea-e585e6b3af2d.dat and /galaxy/server/database/objects/a/9/b/dataset_a9b148c3-0afb-45a0-b457-fe39f9d8e377.dat\n  0:00:01.603    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.610    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.613    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.640    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.640    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.641    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n  0:00:01.645    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/94/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/94/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.295   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.301     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.481   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.540     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.540     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.540     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.541     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.541     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.663     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.665    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.665    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.720    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.720    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.753    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.753    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.753    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.754    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.754    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.245     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.250    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.470    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.470    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.611    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.644    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.662    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.662    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.663    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.664    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:03.808    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.809    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.809    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.809    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.809    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.809    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.809    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:03.809    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.809    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.810    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.819    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.819    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.819    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.821    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.821    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:03.822    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:03.826    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:03.830    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/simplified_contigs.fasta\n  0:00:03.834    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/intermediate_contigs.fasta\n  0:00:03.841    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.841    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.841    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.841    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:03.841    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.841    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.907    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.051    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.846    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.846    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:05.852    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.976   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.979   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.983   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.985   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.985   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.985   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.998   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.003   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.020    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.020    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.020    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.020    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.021    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.021    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.021    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.028    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.031    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.031    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.031    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.032    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.032    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.032    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.032    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.032    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.032    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.032    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.034    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.034    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.034    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.034    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.035    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.035    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.035    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.035    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.036    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.036    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.036    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.036    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.036    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.036    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.036    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.036    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:06.037    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:06.042    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:06.046    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/final_contigs.paths\n  0:00:06.053    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/scaffolds.paths\n  0:00:06.068    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.071    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/94/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:35:31", "plugin": "core", "name": "end_epoch", "raw_value": "1619904931.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:35:23", "plugin": "core", "name": "start_epoch", "raw_value": "1619904923.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 5, "time_seconds": 64.27670812606812, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "d7f531ce9beef52f"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "0c7bd8d54d548a6e"}, "contig_graph_out": true, "scaffold_graph_out": true}, "job": {"model_class": "Job", "id": "853ccbfcc986186c", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:02.325309", "create_time": "2021-05-01T21:35:13.953873", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-5zwpt", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat --pe1-2 fastq:/galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat && python '/galaxy/server/database/jobs_directory/000/97/configs/tmp0rysytlq' < contigs.fasta > '/galaxy/server/database/objects/8/0/a/dataset_80aecbf5-9ff4-4673-8d75-d1d5297960ac.dat' && python '/galaxy/server/database/jobs_directory/000/97/configs/tmp0rysytlq' < scaffolds.fasta > '/galaxy/server/database/objects/1/b/e/dataset_1be8c1f6-498f-4e19-862d-d27983b11bf8.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"true\"", "contig_graph_out": "\"true\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 118, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 119, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|rev_reads": {"id": "0c7bd8d54d548a6e", "src": "hda", "uuid": "70c3c444-cbd1-4e94-8426-035edd1ff80f"}, "libraries_0|files_0|fwd_reads": {"id": "d7f531ce9beef52f", "src": "hda", "uuid": "b355099a-8e26-4f68-811f-e1b114b55f0e"}}, "outputs": {"scaffold_graph": {"id": "a7c019c58392dff7", "src": "hda", "uuid": "bb9024ad-63c5-4e77-ba87-6e2c90ae2913"}, "out_log": {"id": "bb74039fee6c906d", "src": "hda", "uuid": "e3635429-7aa5-4b97-bdcf-396cf7d08c01"}, "out_contig_stats": {"id": "d2a9800e91f7f7ca", "src": "hda", "uuid": "80aecbf5-9ff4-4673-8d75-d1d5297960ac"}, "out_scaffold_stats": {"id": "ff6d1759372affc8", "src": "hda", "uuid": "1be8c1f6-498f-4e19-862d-d27983b11bf8"}, "out_contigs": {"id": "fa1e0eab0b72d216", "src": "hda", "uuid": "620cd308-c1ea-425a-91c7-bfbb2e4a353f"}, "out_scaffolds": {"id": "3a1cd9aca066855a", "src": "hda", "uuid": "072f9940-7991-4c7e-bd4f-22eb6787654b"}, "contig_graph": {"id": "8a65669151519db0", "src": "hda", "uuid": "198ff26b-ba37-4b69-88b8-c34ae7f69a4d"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/97/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/97/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat']\n      right reads: ['/galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat\n  0:00:00.515     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\n  0:00:00.989     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.993    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.320    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.371    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.373    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.375    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.387    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.387    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.387    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat\n  0:00:01.421    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\n  0:00:01.459    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.459    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.464    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.464    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.481    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.481    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.481    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.481    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat and /galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\n  0:00:01.520    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.531    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.535    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.564    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.564    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n  0:00:01.568    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.120     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.306   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.491   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.544     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.545     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.675     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.736    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.736    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.768    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.769    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.769    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.769    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.769    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.769    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.214     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.219    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.428    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.428    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.548    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.580    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.601    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.601    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.603    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.603    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:06.785    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.786    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.786    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.786    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.786    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.786    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.786    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.786    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.800    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.800    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.800    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.803    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.803    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.803    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:06.808    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:06.812    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/simplified_contigs.fasta\n  0:00:06.816    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/intermediate_contigs.fasta\n  0:00:06.822    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.822    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.822    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.823    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.823    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.823    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.889    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.006    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.802    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.803    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.809    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.950   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:08.953   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.958   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.960   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:08.960   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:08.960   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:08.973   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.981   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.996    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:08.997    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:08.997    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.997    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:08.997    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:08.997    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:08.997    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:08.997    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:08.998    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.998    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.999    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:09.003    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:09.007    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/final_contigs.paths\n  0:00:09.015    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/scaffolds.paths\n  0:00:09.029    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.031    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/97/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/97/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/97/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat']\n      right reads: ['/galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat\n  0:00:00.515     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\n  0:00:00.989     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.993    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.320    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.371    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.373    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.375    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.387    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.387    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.387    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat\n  0:00:01.421    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\n  0:00:01.459    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.459    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.464    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.464    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.464    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.481    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.481    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.481    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.481    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/3/5/dataset_b355099a-8e26-4f68-811f-e1b114b55f0e.dat and /galaxy/server/database/objects/7/0/c/dataset_70c3c444-cbd1-4e94-8426-035edd1ff80f.dat\n  0:00:01.520    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.531    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.535    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.564    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.564    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n  0:00:01.568    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.120     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.306   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.491   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.544     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.544     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.545     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.545     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.675     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.677    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.736    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.736    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.768    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.769    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.769    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.769    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.769    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.769    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.214     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.219    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.428    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.428    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.548    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.580    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.601    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.601    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.603    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.603    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:06.785    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:06.786    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:06.786    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:06.786    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:06.786    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:06.786    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:06.786    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:06.786    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:06.786    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.786    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.800    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:06.800    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:06.800    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:06.803    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.803    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:06.803    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:06.808    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:06.812    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/simplified_contigs.fasta\n  0:00:06.816    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/intermediate_contigs.fasta\n  0:00:06.822    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:06.822    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:06.822    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:06.823    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:06.823    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:06.823    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:06.889    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.006    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.802    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:08.803    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:08.809    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:08.950   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:08.953   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.958   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.960   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:08.960   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:08.960   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:08.973   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.981   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:08.996    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:08.997    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:08.997    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.997    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:08.997    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:08.997    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:08.997    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:08.997    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:08.997    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:08.997    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:08.998    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:08.998    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:08.998    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:08.998    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:08.998    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.998    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.999    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:09.003    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:09.007    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/final_contigs.paths\n  0:00:09.015    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/scaffolds.paths\n  0:00:09.029    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.031    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/97/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:00", "plugin": "core", "name": "end_epoch", "raw_value": "1619904960.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:35:49", "plugin": "core", "name": "start_epoch", "raw_value": "1619904949.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 6, "time_seconds": 56.39328145980835, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "168b2dc3d42ae02a"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "124a6ea7fa794d00"}}, "job": {"model_class": "Job", "id": "791d6e4f8e10b9ec", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:17.949532", "create_time": "2021-05-01T21:35:35.823244", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-9n4mm", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat --pe1-2 fastq:/galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat && python '/galaxy/server/database/jobs_directory/000/100/configs/tmp9ysnceqw' < contigs.fasta > '/galaxy/server/database/objects/9/6/f/dataset_96f4443d-859d-46d3-b3a0-e85a071bb680.dat' && python '/galaxy/server/database/jobs_directory/000/100/configs/tmp9ysnceqw' < scaffolds.fasta > '/galaxy/server/database/objects/3/9/2/dataset_392fedc2-c762-49f7-9085-440e2bcd215c.dat'", "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 127, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 128, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "168b2dc3d42ae02a", "src": "hda", "uuid": "08066864-40af-4e29-8775-a8fcc12d05cc"}, "libraries_0|files_0|rev_reads": {"id": "124a6ea7fa794d00", "src": "hda", "uuid": "65ca57fd-6a65-4520-b684-aa10048280b6"}}, "outputs": {"out_contig_stats": {"id": "980a125fa283f6ad", "src": "hda", "uuid": "96f4443d-859d-46d3-b3a0-e85a071bb680"}, "out_scaffold_stats": {"id": "dcd47585a0557756", "src": "hda", "uuid": "392fedc2-c762-49f7-9085-440e2bcd215c"}, "out_contigs": {"id": "c4db0b91ddf95151", "src": "hda", "uuid": "5b1868a7-4e3e-4265-993d-f9c111c24625"}, "out_scaffolds": {"id": "94791c3847c2b442", "src": "hda", "uuid": "a6719f58-75c3-43d5-b9ce-28b7140c3d27"}, "out_log": {"id": "e5633c4b9ba4719f", "src": "hda", "uuid": "91ae18be-f02d-4ab4-afef-8cb5eeeccce3"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/100/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/100/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat']\n      right reads: ['/galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat\n  0:00:00.557     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\n  0:00:01.084     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.089    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.301    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.301    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.442    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.498    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.500    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.502    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.505    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.515    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.515    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat\n  0:00:01.558    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\n  0:00:01.603    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.603    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.603    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.608    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.608    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat and /galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\n  0:00:01.656    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.667    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.670    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.699    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.699    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.699    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n  0:00:01.703    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.116     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.302   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.485   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.543     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.543     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.543     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.544     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.544     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.544     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.544     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.682     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.684    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.684    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.780    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.780    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.780    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.781    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.253     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.258    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.604    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.640    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.661    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.661    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.663    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.663    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:07.184    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.185    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.185    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.185    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.202    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.202    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.202    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.203    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.203    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.204    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:07.210    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:07.214    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/simplified_contigs.fasta\n  0:00:07.220    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/intermediate_contigs.fasta\n  0:00:07.228    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.228    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.228    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.228    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.228    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.228    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.316    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.478    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.276    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.276    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.281    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.408   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.411   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.416   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.418   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.418   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.418   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.432   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.440   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.456    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.456    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.456    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.457    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.457    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.457    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.457    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.458    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.458    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.458    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.458    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.458    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.458    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.458    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.458    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.458    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.458    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.461    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.461    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.462    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.462    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.462    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.462    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.462    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:09.718    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:09.851    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/final_contigs.paths\n  0:00:10.120    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/scaffolds.paths\n  0:00:10.150    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.152    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/100/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/100/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/100/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat']\n      right reads: ['/galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat\n  0:00:00.557     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\n  0:00:01.084     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.089    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.301    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.301    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.442    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.498    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.500    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.502    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.505    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.515    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.515    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat\n  0:00:01.558    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\n  0:00:01.603    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.603    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.603    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.607    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.608    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.608    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/8/0/dataset_08066864-40af-4e29-8775-a8fcc12d05cc.dat and /galaxy/server/database/objects/6/5/c/dataset_65ca57fd-6a65-4520-b684-aa10048280b6.dat\n  0:00:01.656    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.667    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.670    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.699    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.699    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.699    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n  0:00:01.703    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.116     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.302   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.485   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.543     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.543     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.543     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.544     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.544     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.544     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.544     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.682     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.684    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.684    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.780    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.780    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.780    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.781    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.253     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.258    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.476    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.604    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.640    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.661    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.661    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.663    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.663    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:07.184    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.185    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.185    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.185    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.185    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.185    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.202    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.202    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.202    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.203    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.203    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.204    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:07.210    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:07.214    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/simplified_contigs.fasta\n  0:00:07.220    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/intermediate_contigs.fasta\n  0:00:07.228    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.228    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.228    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.228    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.228    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.228    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.316    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.478    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.276    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.276    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.281    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.408   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.411   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.416   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.418   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.418   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.418   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.432   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.440   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.456    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.456    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.456    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.457    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.457    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.457    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.457    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.457    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.458    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.458    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.458    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.458    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.458    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.458    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.458    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.458    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.458    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.458    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.461    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.461    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.461    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.461    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.461    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.462    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.462    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.462    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.462    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.462    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.462    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.462    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:09.718    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:09.851    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/final_contigs.paths\n  0:00:10.120    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/scaffolds.paths\n  0:00:10.150    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.152    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/100/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "13 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "13.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:16", "plugin": "core", "name": "end_epoch", "raw_value": "1619904976.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:03", "plugin": "core", "name": "start_epoch", "raw_value": "1619904963.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 7, "time_seconds": 66.27756905555725, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "3844e8a7799a2a64"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "ffad1c88b9bea217"}}, "job": {"model_class": "Job", "id": "538e500b00ed5d44", "state": "ok", "exit_code": 0, "update_time": "2021-05-01T21:36:36.080446", "create_time": "2021-05-01T21:35:47.314946", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "a18d3232a1404368", "external_id": "gxy-jct5k", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat && python '/galaxy/server/database/jobs_directory/000/103/configs/tmpym6gmvl6' < contigs.fasta > '/galaxy/server/database/objects/b/9/5/dataset_b955330f-b532-476f-84b0-5dee8606fe8f.dat' && python '/galaxy/server/database/jobs_directory/000/103/configs/tmpym6gmvl6' < scaffolds.fasta > '/galaxy/server/database/objects/2/2/3/dataset_223d8fa3-a8eb-4ffa-8ba9-6a2c424d5bc1.dat'", "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 135, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "3844e8a7799a2a64", "src": "hda", "uuid": "5622a4f4-abb1-4375-bca7-2a8f188da9fc"}, "libraries_0|files_0|rev_reads": {"id": "ffad1c88b9bea217", "src": "hda", "uuid": "5a5a4438-5536-495e-8428-72e56d840f8d"}}, "outputs": {"out_contig_stats": {"id": "d36824b4fdf5a636", "src": "hda", "uuid": "b955330f-b532-476f-84b0-5dee8606fe8f"}, "out_scaffold_stats": {"id": "0cbdf9afdf654479", "src": "hda", "uuid": "223d8fa3-a8eb-4ffa-8ba9-6a2c424d5bc1"}, "out_contigs": {"id": "9d92e8608e0f2110", "src": "hda", "uuid": "3381b489-b316-40d2-9526-63dfb769b505"}, "out_scaffolds": {"id": "eff5dcbb863444c1", "src": "hda", "uuid": "5d720d88-e5ce-43d0-a28b-d04cbb2b34e5"}, "out_log": {"id": "8c062d1e5cf382fd", "src": "hda", "uuid": "85d191a9-73d9-4a46-ad09-a34afce3c5c3"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/103/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/103/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat']\n      right reads: ['/galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/103/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat\n  0:00:00.508     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\n  0:00:00.973     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.977    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.180    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.180    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.306    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.337    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.357    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.359    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.361    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.364    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.371    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.372    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.372    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat\n  0:00:01.404    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\n  0:00:01.435    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.435    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.441    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.459    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.459    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat and /galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\n  0:00:01.495    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.506    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.510    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.535    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.535    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.535    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n  0:00:01.538    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/103/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/103/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.122    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.129     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.325   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.333     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.529   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.588     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.589     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.589     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.589     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.590     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.590     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.590     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.779     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.782    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.846    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.846    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.882    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.882    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.882    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.883    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.883    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.883    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.393     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.398    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.637    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.637    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.777    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.820    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.840    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.841    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.842    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:07.718    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.719    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.719    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.719    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.719    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.719    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.719    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.719    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.732    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.732    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.732    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.734    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.734    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.734    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:07.738    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:07.741    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/simplified_contigs.fasta\n  0:00:07.745    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/intermediate_contigs.fasta\n  0:00:07.751    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.751    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.751    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.751    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.751    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.751    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.824    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.988    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.771    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.771    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.784    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.928   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.931   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.936   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.938   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.938   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.939   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.955   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.962   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.977    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.977    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.977    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.977    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.989    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.994    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.994    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.994    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.994    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.994    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.994    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.994    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.994    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.994    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.994    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.995    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.995    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.996    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:10.001    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:10.005    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/final_contigs.paths\n  0:00:10.013    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/scaffolds.paths\n  0:00:10.029    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.031    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/103/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/103/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/103/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat']\n      right reads: ['/galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/103/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat\n  0:00:00.508     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\n  0:00:00.973     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.977    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.180    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.180    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.306    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.337    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.357    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.359    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.361    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.364    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.371    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.372    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.372    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat\n  0:00:01.404    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\n  0:00:01.435    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.435    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.440    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.440    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.441    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.459    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.459    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/6/2/dataset_5622a4f4-abb1-4375-bca7-2a8f188da9fc.dat and /galaxy/server/database/objects/5/a/5/dataset_5a5a4438-5536-495e-8428-72e56d840f8d.dat\n  0:00:01.495    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.506    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.510    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.535    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.535    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.535    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n  0:00:01.538    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/103/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/103/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.122    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.129     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.325   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.333     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.529   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.588     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.589     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.589     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.589     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.590     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.590     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.590     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.779     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.781    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.782    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.846    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.846    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.882    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.882    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.882    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.883    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.883    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.883    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.393     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.398    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.637    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.637    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.777    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.820    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.840    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.841    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.842    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:07.718    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.719    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.719    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.719    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.719    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.719    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.719    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.719    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.719    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.719    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.732    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.732    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.732    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.734    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.734    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.734    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:07.738    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:07.741    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/simplified_contigs.fasta\n  0:00:07.745    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/intermediate_contigs.fasta\n  0:00:07.751    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.751    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.751    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.751    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.751    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.751    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.824    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.988    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.771    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.771    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.784    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.928   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.931   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.936   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.938   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.938   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.939   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.955   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.962   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.977    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.977    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.977    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.977    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.978    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.978    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.989    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.994    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.994    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.994    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.994    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.994    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.994    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.994    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.994    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.994    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.994    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.995    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.995    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.995    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.995    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.995    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.995    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.996    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:10.001    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:10.005    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/final_contigs.paths\n  0:00:10.013    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/scaffolds.paths\n  0:00:10.029    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.031    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/103/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-05-01 21:36:33", "plugin": "core", "name": "end_epoch", "raw_value": "1619904993.0000000"}, {"title": "Job Start Time", "value": "2021-05-01 21:36:21", "plugin": "core", "name": "start_epoch", "raw_value": "1619904981.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}]}
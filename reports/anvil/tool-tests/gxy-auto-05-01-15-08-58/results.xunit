<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Test Results (powered by Planemo)"
           tests="36"
           errors="2"
           failures="0"
           skip="0">
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #1)" name="0" time="49.588801860809326">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/9/e/e/dataset_9ee4236d-65c0-4f40-ae34-e125b9882cf6.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 10: 50%  bucket 9: 40%  bucket 10: 60%  bucket 10: 70%  bucket 9: 50%  bucket 10: 80%  bucket 9: 60%  bucket 10: 90%  bucket 10: 100%  bucket 9: 70%  Sorting block of length 681 for bucket 10  (Using difference cover)  bucket 9: 80%  bucket 9: 90%  Sorting block time: 00:00:00Returning block of 682 for bucket 10  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 12: 60%  bucket 11: 40%  bucket 12: 70%  bucket 11: 50%  bucket 12: 80%  bucket 12: 90%  bucket 11: 60%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 14: 80%  bucket 13: 60%  bucket 14: 90%  bucket 14: 100%  bucket 13: 70%  Sorting block of length 1255 for bucket 14  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 15  Entering block accumulator loop for bucket 1:  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 2:  bucket 1: 30%  bucket 1: 40%  bucket 2: 10%  bucket 1: 50%  bucket 1: 60%  bucket 2: 20%  bucket 1: 70%  bucket 1: 80%  bucket 2: 30%  bucket 1: 90%  bucket 2: 40%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 50%  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  bucket 6: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Entering block accumulator loop for bucket 11:  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 11: 50%  bucket 12: 30%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  bucket 13: 10%  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #2)" name="1" time="49.39828133583069">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/e/a/1/dataset_ea1ae90f-afde-41b0-b893-ab98eda373d0.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 1: 100%  bucket 2: 70%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%Getting block 4 of 15  bucket 3: 40%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 50%  Entering block accumulator loop for bucket 4:  bucket 3: 60%  bucket 4: 10%  bucket 3: 70%  bucket 4: 20%  bucket 3: 80%  bucket 4: 30%  bucket 3: 90%  bucket 4: 40%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 15  bucket 7: 20%  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 30%  Entering block accumulator loop for bucket 8:  bucket 7: 40%  bucket 8: 10%  bucket 7: 50%  bucket 7: 60%  bucket 8: 20%  bucket 7: 70%  bucket 8: 30%  bucket 7: 80%  bucket 8: 40%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 15  bucket 11: 20%  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Returning block of 1489 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 6: 80%  bucket 5: 70%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 10%  bucket 10: 20%  bucket 9: 20%  bucket 9: 30%  bucket 10: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 11: 100%  bucket 12: 80%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #3)" name="2" time="44.55107498168945">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/e/a/1/dataset_ea1ae90f-afde-41b0-b893-ab98eda373d0.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 1: 50%  bucket 2: 20%  bucket 1: 60%  bucket 1: 70%  bucket 2: 30%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8Getting block 9 of 15  Calculating Z arrays for bucket 8  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 8:  bucket 9: 10%  bucket 8: 10%  bucket 9: 20%  bucket 8: 20%  bucket 9: 30%  bucket 9: 40%  bucket 8: 30%  bucket 9: 50%  bucket 8: 40%  bucket 9: 60%  bucket 8: 50%  bucket 9: 70%  bucket 8: 60%  bucket 9: 80%  bucket 8: 70%  bucket 9: 90%  bucket 8: 80%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 10%  Entering block accumulator loop for bucket 11:  bucket 10: 20%  bucket 11: 10%  bucket 10: 30%  bucket 11: 20%  bucket 10: 40%  bucket 11: 30%  bucket 10: 50%  bucket 11: 40%  bucket 11: 50%  bucket 10: 60%  bucket 11: 60%  bucket 10: 70%  bucket 11: 70%  bucket 10: 80%  bucket 11: 80%  bucket 10: 90%  bucket 11: 90%  bucket 11: 100%  bucket 10: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  bucket 8: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 80%  Entering block accumulator loop for bucket 12:  bucket 11: 90%  bucket 12: 10%  bucket 12: 20%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  Sorting block time: 00:00:00  bucket 12: 80%Returning block of 1106 for bucket 11  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #4)" name="3" time="47.16332697868347">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/e/a/1/dataset_ea1ae90f-afde-41b0-b893-ab98eda373d0.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 4 of 15Getting block 3 of 15  Reserving size (1554) for bucket 4  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 3: 50%  bucket 4: 60%  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  bucket 6: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 15  Entering block accumulator loop for bucket 9:  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 11: 80%  bucket 12: 60%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 1: 50%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15Getting block 4 of 15  Reserving size (1554) for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  bucket 6: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 7: 100%  bucket 8: 90%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 12: 90%  bucket 11: 70%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #5)" name="4" time="41.03316879272461">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/5/7/dataset_257c5c89-aadf-48be-983e-71d4a18c0d22.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 3: 70%  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 4: 20%  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 2: 80%  bucket 1: 100%  bucket 2: 90%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 3: 50%  bucket 4: 40%  bucket 3: 60%  bucket 3: 70%  bucket 4: 50%  bucket 3: 80%  bucket 3: 90%  bucket 4: 60%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block time: 00:00:00  Sorting block of length 1201 for bucket 4  (Using difference cover)Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 15  bucket 7: 10%  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 9: 50%  bucket 10: 10%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 10: 30%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block time: 00:00:00  Sorting block of length 938 for bucket 10  (Using difference cover)Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index3 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #6)" name="5" time="62.10741853713989">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/e/f/dataset_2ef0ffff-fecb-48a7-a850-91eefdcdffb4.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 2: 50%  bucket 1: 60%  bucket 2: 60%  bucket 1: 70%  bucket 2: 70%  bucket 1: 80%  bucket 2: 80%  bucket 1: 90%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%Getting block 4 of 15  bucket 3: 30%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 40%  bucket 3: 50%  bucket 4: 10%  bucket 3: 60%  bucket 4: 20%  bucket 3: 70%  bucket 4: 30%  bucket 3: 80%  bucket 4: 40%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Getting block 8 of 15Returning block of 1387 for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #7)" name="6" time="52.0397675037384">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/2/e/f/dataset_2ef0ffff-fecb-48a7-a850-91eefdcdffb4.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1408 for bucket 1  Sorting block time: 00:00:00Returning block of 850 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 3: 70%  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 4: 20%  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 2: 60%  bucket 1: 80%  bucket 2: 70%  bucket 1: 90%  bucket 2: 80%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%Getting block 4 of 15  bucket 3: 30%  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  bucket 3: 40%  Entering block accumulator loop for bucket 4:  bucket 3: 50%  bucket 4: 10%  bucket 3: 60%  bucket 3: 70%  bucket 4: 20%  bucket 3: 80%  bucket 4: 30%  bucket 3: 90%  bucket 4: 40%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #8)" name="7" time="54.40693640708923">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/a/d/dataset_1ad117bc-137b-47e3-acba-a682eb2c3fc7.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5Getting block 6 of 15  Calculating Z arrays for bucket 5  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 5: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 7: 10%  bucket 8: 20%  bucket 7: 20%  bucket 8: 30%  bucket 7: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 8: 60%  bucket 7: 60%  bucket 8: 70%  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9Getting block 10 of 15  Calculating Z arrays for bucket 9  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 10: 60%  bucket 9: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 15  Reserving size (1554) for bucket 12  bucket 11: 10%  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 13 of 15  Reserving size (1554) for bucket 13Getting block 14 of 15  Calculating Z arrays for bucket 13  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 1: 70%  bucket 2: 40%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 3: 60%  bucket 4: 50%  bucket 3: 70%  bucket 4: 60%  bucket 3: 80%  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 5:  bucket 6: 10%  bucket 5: 10%  bucket 6: 20%  bucket 6: 30%  bucket 5: 20%  bucket 6: 40%  bucket 5: 30%  bucket 6: 50%  bucket 5: 40%  bucket 6: 60%  bucket 5: 50%  bucket 6: 70%  bucket 5: 60%  bucket 6: 80%  bucket 5: 70%  bucket 6: 90%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7Getting block 8 of 15  Calculating Z arrays for bucket 7  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11Getting block 12 of 15  Calculating Z arrays for bucket 11  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 40%  bucket 14: 10%  bucket 13: 50%  bucket 14: 20%  bucket 13: 60%  bucket 13: 70%  bucket 14: 30%  bucket 13: 80%  bucket 14: 40%  bucket 13: 90%  bucket 13: 100%  bucket 14: 50%  Sorting block of length 1169 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #9)" name="8" time="63.91234064102173">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/a/d/dataset_1ad117bc-137b-47e3-acba-a682eb2c3fc7.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 2: 50%  bucket 1: 70%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 15  Entering block accumulator loop for bucket 3:  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 3: 20%  bucket 4: 10%  bucket 3: 30%  bucket 4: 20%  bucket 3: 40%  bucket 4: 30%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1053 for bucket 3  Sorting block time: 00:00:00Returning block of 1479 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 5: 40%  bucket 6: 50%  bucket 5: 50%  bucket 6: 60%  bucket 5: 60%  bucket 6: 70%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Entering block accumulator loop for bucket 7:  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1302 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 1: 30%  bucket 2: 10%  bucket 1: 40%  bucket 1: 50%  bucket 2: 20%  bucket 1: 60%  bucket 1: 70%  bucket 2: 30%  bucket 1: 80%  bucket 2: 40%  bucket 1: 90%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 2: 70%  bucket 2: 80%  bucket 2: 90%  Sorting block time: 00:00:00Returning block of 390 for bucket 1  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 4: 10%  bucket 3: 20%  bucket 4: 20%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 6: 20%  bucket 5: 20%  bucket 6: 30%  bucket 5: 30%  bucket 6: 40%  bucket 6: 50%  bucket 5: 40%  bucket 6: 60%  bucket 5: 50%  bucket 6: 70%  bucket 6: 80%  bucket 5: 60%  bucket 6: 90%  bucket 5: 70%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  Sorting block time: 00:00:00Returning block of 482 for bucket 6  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1496 for bucket 7Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 967 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0 (Test #10)" name="9" time="39.46260046958923">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 8  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/f/4/f/dataset_f4ffe4ac-4541-4c43-848e-84a56dba3ce2.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  bucket 2: 40%  bucket 2: 50%  bucket 1: 50%  bucket 2: 60%  bucket 1: 60%  bucket 2: 70%  bucket 2: 80%  bucket 1: 70%  bucket 2: 90%  bucket 1: 80%  bucket 2: 100%  Sorting block of length 849 for bucket 2  (Using difference cover)  bucket 1: 90%  bucket 1: 100%  Sorting block of length 1407 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 850 for bucket 2  Sorting block time: 00:00:00Returning block of 1408 for bucket 1Getting block 3 of 15  Reserving size (1554) for bucket 3Getting block 4 of 15  Calculating Z arrays for bucket 3  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 3: 10%  bucket 4: 20%  bucket 3: 20%  bucket 4: 30%  bucket 3: 30%  bucket 4: 40%  bucket 4: 50%  bucket 3: 40%  bucket 4: 60%  bucket 3: 50%  bucket 4: 70%  bucket 3: 60%  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1478 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1052 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1479 for bucket 4  Sorting block time: 00:00:00Returning block of 1053 for bucket 3Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 15  Entering block accumulator loop for bucket 5:  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 546 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 1246 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 5  Sorting block time: 00:00:00Returning block of 1247 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 15  Entering block accumulator loop for bucket 7:  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 1386 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 543 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 8  Sorting block time: 00:00:00Returning block of 1387 for bucket 7Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 10: 10%  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 10: 40%  bucket 9: 80%  bucket 10: 50%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  bucket 10: 70%  Sorting block of length 1302 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 681 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 682 for bucket 10  Sorting block time: 00:00:00Returning block of 1303 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 1077 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1078 for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 716 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 717 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 1488 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1489 for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 1255 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1256 for bucket 14Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1528 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1529 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 2071Using parameters --bmax 1554 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 22 sample suffixesGenerating random suffixesQSorting 22 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 22 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 2, merged 10; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 1103.6 (target: 1553)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 15  Reserving size (1554) for bucket 1Getting block 2 of 15  Calculating Z arrays for bucket 1  Reserving size (1554) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  bucket 1: 50%  bucket 2: 40%  bucket 1: 60%  bucket 1: 70%  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 389 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 2: 90%  bucket 2: 100%  Sorting block of length 1283 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 390 for bucket 1  Sorting block time: 00:00:00Returning block of 1284 for bucket 2Getting block 3 of 15  Reserving size (1554) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 3:  bucket 3: 10%  bucket 3: 20%  bucket 3: 30%  bucket 3: 40%  bucket 3: 50%  bucket 3: 60%  bucket 3: 70%  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 1229 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1230 for bucket 3Getting block 4 of 15  Reserving size (1554) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 4:  bucket 4: 10%  bucket 4: 20%  bucket 4: 30%  bucket 4: 40%  bucket 4: 50%  bucket 4: 60%  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 1201 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1202 for bucket 4Getting block 5 of 15  Reserving size (1554) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 1530 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1531 for bucket 5Getting block 6 of 15  Reserving size (1554) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 481 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 482 for bucket 6Getting block 7 of 15  Reserving size (1554) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 1495 for bucket 7  (Using difference cover)Getting block 8 of 15  Reserving size (1554) for bucket 8  Calculating Z arrays for bucket 8  Sorting block time: 00:00:00Returning block of 1496 for bucket 7  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 1179 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1180 for bucket 8Getting block 9 of 15  Reserving size (1554) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 15  Reserving size (1554) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 1339 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 938 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 939 for bucket 10  Sorting block time: 00:00:00Returning block of 1340 for bucket 9Getting block 11 of 15  Reserving size (1554) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 15  Reserving size (1554) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 1105 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 990 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1106 for bucket 11  Sorting block time: 00:00:00Returning block of 991 for bucket 12Getting block 13 of 15  Reserving size (1554) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 15  Reserving size (1554) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 14: 30%  bucket 13: 20%  bucket 14: 40%  bucket 14: 50%  bucket 13: 30%  bucket 14: 60%  bucket 13: 40%  bucket 14: 70%  bucket 14: 80%  bucket 13: 50%  bucket 14: 90%  bucket 13: 60%  bucket 14: 100%  Sorting block of length 966 for bucket 14  (Using difference cover)  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  Sorting block time: 00:00:00Returning block of 967 for bucket 14  bucket 13: 100%  Sorting block of length 1169 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1170 for bucket 13Getting block 15 of 15  Reserving size (1554) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 1260 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 1261 for bucket 15Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2 (Test #1)" name="0" time="30.944470405578613">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2 (Test #2)" name="1" time="32.117878913879395">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2 (Test #1)" name="0" time="59.21501874923706">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.84 seconds elapse.[bwa_index] Update BWT... 0.02 sec[bwa_index] Pack forward-only FASTA... 0.01 sec[bwa_index] Construct SA from BWT and Occ... 0.19 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.154 sec; CPU: 1.068 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.029 CPU sec, 0.016 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.146 sec; CPU: 0.038 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2 (Test #2)" name="1" time="59.18160915374756">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bwa_index] Pack FASTA... 0.02 sec[bwa_index] Construct BWT for the packed sequence...[BWTIncCreate] textLength=3600000, availableWord=4573648[bwt_gen] Finished constructing BWT in 5 iterations.[bwa_index] 0.84 seconds elapse.[bwa_index] Update BWT... 0.02 sec[bwa_index] Pack forward-only FASTA... 0.02 sec[bwa_index] Construct SA from BWT and Occ... 0.18 sec[main] Version: 0.7.17-r1188[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t[main] Real time: 1.154 sec; CPU: 1.079 secconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2tindexing: index_dir/genome.fa.bwameth.c2t[M::bwa_idx_load_from_disk] read 0 ALT contigsconverting reads in input_f.fastq.gz,input_r.fastq.gz[M::process] read 200 sequences (20200 bp)...[M::process] 0 single-end sequences; 200 paired-end sequences[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)[M::mem_pestat] skip orientation FF as there are not enough pairs[M::mem_pestat] analyzing insert size distribution for orientation FR...[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)[M::mem_pestat] mean and std.dev: (138.16, 39.31)[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)[M::mem_pestat] skip orientation RF as there are not enough pairs[M::mem_pestat] skip orientation RR as there are not enough pairs[M::mem_process_seqs] Processed 200 reads in 0.033 CPU sec, 0.017 real sec[main] Version: 0.7.17-r1188[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\tID:input_\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -[main] Real time: 0.123 sec; CPU: 0.043 secrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\tID:input_\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #1)" name="0" time="30.32196855545044">
        
            
            <system-out><![CDATA[
            INFO [2021-05-01 15:27:57,313]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bamINFO [2021-05-01 15:27:57,332]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-05-01 15:28:00,701]: Executing lofreq filter -i /tmp/lofreq2_call_parallelxljhj_rh/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #2)" name="1" time="25.678037405014038">
        
            
            <system-out><![CDATA[
            INFO [2021-05-01 15:28:07,881]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-05-01 15:28:07,897]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-05-01 15:28:11,607]: Executing lofreq filter -i /tmp/lofreq2_call_parallel4juquhew/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #3)" name="2" time="39.742475748062134">
        
            
            <system-out><![CDATA[
            INFO [2021-05-01 15:28:36,301]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bamINFO [2021-05-01 15:28:36,316]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-05-01 15:28:40,028]: Executing lofreq filter -i /tmp/lofreq2_call_paralleltk0mcrzb/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #4)" name="3" time="42.16300058364868">
        
            
            <system-out><![CDATA[
            INFO [2021-05-01 15:28:39,315]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-05-01 15:28:39,329]: Adding 3 commands to mp-poolNumber of substitution tests performed: 66Number of indel tests performed: 0INFO [2021-05-01 15:28:42,643]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1 (Test #5)" name="4" time="35.63296437263489">
        
            
            <system-out><![CDATA[
            INFO [2021-05-01 15:28:42,635]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bamINFO [2021-05-01 15:28:42,654]: Adding 3 commands to mp-poolNumber of substitution tests performed: 0Number of indel tests performed: 9INFO [2021-05-01 15:28:47,723]: Copying concatenated vcf file to final destination
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #1)" name="0" time="47.12112998962402">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*0.92] collected minimizers[M::mm_idx_gen::0.005*1.15] sorted minimizers[M::main::0.005*1.15] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.15] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*1.14] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.010*1.30] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/1/5/dataset_1157e0db-c7f2-49f5-8892-805ab5396783.dat[M::main] Real time: 0.011 sec; CPU: 0.013 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #2)" name="1" time="47.16304278373718">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.005*0.83] collected minimizers[M::mm_idx_gen::0.006*0.99] sorted minimizers[M::main::0.006*0.99] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*0.99] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.007*0.99] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.010*1.13] mapped 100 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/1/1/5/dataset_1157e0db-c7f2-49f5-8892-805ab5396783.dat[M::main] Real time: 0.012 sec; CPU: 0.013 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #3)" name="2" time="54.092320919036865">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.02] collected minimizers[M::mm_idx_gen::0.005*1.24] sorted minimizers[M::main::0.005*1.24] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.24] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.23] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.017*1.38] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/0/f/c/dataset_0fcdeea9-e93b-451f-8a0c-34f4cc295baa.dat /galaxy/server/database/objects/2/d/6/dataset_2d67f755-6dce-4c27-b484-a0b3bf6bef92.dat[M::main] Real time: 0.018 sec; CPU: 0.024 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #4)" name="3" time="52.519893407821655">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.02] collected minimizers[M::mm_idx_gen::0.004*1.25] sorted minimizers[M::main::0.004*1.25] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*1.25] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.24] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.017*1.42] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/9/5/a/dataset_95a8b4d3-fad5-45ac-aae8-6c3175ba3c97.dat /galaxy/server/database/objects/2/d/6/dataset_2d67f755-6dce-4c27-b484-a0b3bf6bef92.dat[M::main] Real time: 0.018 sec; CPU: 0.024 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #5)" name="4" time="32.93373942375183">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.005*0.79] collected minimizers[M::mm_idx_gen::0.006*1.03] sorted minimizers[M::main::0.006*1.03] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*1.03] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*1.03] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967[M::worker_pipeline::0.023*1.45] mapped 200 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/b/2/e/dataset_b2ea7468-d3ad-4e8e-a474-243a2e4f197a.dat /galaxy/server/database/objects/8/b/4/dataset_8b44ec35-0c98-4b35-8261-d236b633d6a7.dat[M::main] Real time: 0.025 sec; CPU: 0.035 sec; Peak RSS: 0.004 GB[bam_sort_core] merging from 0 files and 2 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #6)" name="5" time="11.986424446105957">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: eriEur1,susScr2,anoGam1,micMur1,eschColi_K12_W3110,eschColi_CFT073,Arabidopsis_thaliana_TAIR9,otoGar1,27835,taeGut1canon,mm9,ailMel1,ce5,equCab1,vicPac1,otoGar3,Xanthomonas_oryzae_PXO99A,mm8canon,priPac1,cerSim1,pUC18,caeJap4,strPur3,panTro1,galGal4,borEut13,caeRem4,canFam1,ce9,PhumU1,sacCer2,panTro3canon,papHam1,aptMan1,eschColi_K12,hg19canon,hetGla1,oryLat2,melUnd1,ce2,ce10,latCha1,dp3,AgamP3,droAna2,apiMel4,droAna3,ce6,Araly1,bosTau6,oviAri1,papAnu2,fr1,rn3,xenTro2,criGri1,ce3,hg19chrM,ornAna1,hg19_rCRS_pUC18_phiX174,susScr1,bosTauMd3,caeRem2,tetNig1canon,apiMel3,galGal2,vicPac2,canFam2,anoCar1,CpipJ1,burkPseu_K96243,hg18nohaps,mm7canon,caeJap3,calJac3canon,ce8,caePb3,oryLat1,Spur_v2.6,rn5,taeGut2,bosTau3,burkPseu_1106A,loxAfr1,AaegL1,caeRem1,danRer3,nomLeu1,Arabidopsis_thaliana_TAIR10,hg38female,fr2,equCab2,rn4,taeGut1,panTro3full,lMaj5,hg19female,mm7,gadMor1,panPan1,bosTau2,tetNig2,IscaW1,pseuAeru_PAO1,droGri2,aplCal1,phiX,braFlo1,hg18,panTro2,caeJap2,eschColi_O157H7_EDL933,felCat8,droWil1,caeJap1,mm9canon,Zea_mays_B73_RefGen_v2,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir2,dasNov3,droGri1,Amel_4.5,galGal2canon,droVir1,speTri2,hg18chr21,loxAfr3,ci2canon,cavPor3,panTro1canon,bosTau4,mm10,ente638,tarSyr1,rn3canon,strePneu_R6,mm8,felCat4canon,bosTau5,eschColi_O157H7,rheMac3,calJac1,nomLeu2,droEre1,calJac3,bordBron,danRer4,dasNov1,susScr3,sorAra1,felCat3,hg19chrX,caePb2,monDom5,burkPseu_668,ponAbe2,droPer1,apiMel2,cb3full,monDom1,allMis1,caePb1,sacCer1,chrPic1,choHof1,saiBol1,felCat5,Xanthomonas_oryzae_MAFF_311018,bosTau8,hg17canon,baciSubt,musFur1,Bombyx_mori_p50T_2.0,hg38canon,tetNig2canon,Tcas_3.0,strPur2,cb3canon,droYak2,pseuAeru_PA7,ci2full,sarHar1,myoLuc2,oryCun1,droVir3,Schizosaccharomyces_pombe_1.1,danRer5,Hydra_JCVI,nomLeu3,petMar1,panTro4,oryCun2,hg17,rn4canon,hg18canon,tetNig1,turTru2,danRer7,venter1,danRer10,dm6,hg19,gasAcu1,bosTau7,triCas2,Xanthomonas_oryzae_KACC10331,Ptrichocarpa_156,oryLat2canon,gorGor3,ce7,xenTro3,Sscrofa9.58,droEre2,melGal1,canFam3,echTel1,droAna1,anoCar2,geoFor1,rn6,danRer2,dm3,eschColi_APEC_O1,caeRem3,droMoj1,droSec1,Tcacao_1.0,felCat4,tupBel1,eschColi_K12_DH10B,droSim1,pseuAeru_UCBPP_PA14,ce4,droMoj3,hg_g1k_v37,eschColi_O157H7_EC4115,galGal3,droYak1,galGal3canon,droMoj2,dm2,dp4,Homo_sapiens_nuHg19_mtrCRS,rheMac2,hg38,danRer6,panTro2canon,equCab2chrM,eschColi_O157H7_TW14359,sacCer3,burkPseu_1710B,xenTro1,dipOrd1,monDom4,Homo_sapiens_AK1,mm9female,apiMel1)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: eriEur1,susScr2,anoGam1,micMur1,eschColi_K12_W3110,eschColi_CFT073,Arabidopsis_thaliana_TAIR9,otoGar1,27835,taeGut1canon,mm9,ailMel1,ce5,equCab1,vicPac1,otoGar3,Xanthomonas_oryzae_PXO99A,mm8canon,priPac1,cerSim1,pUC18,caeJap4,strPur3,panTro1,galGal4,borEut13,caeRem4,canFam1,ce9,PhumU1,sacCer2,panTro3canon,papHam1,aptMan1,eschColi_K12,hg19canon,hetGla1,oryLat2,melUnd1,ce2,ce10,latCha1,dp3,AgamP3,droAna2,apiMel4,droAna3,ce6,Araly1,bosTau6,oviAri1,papAnu2,fr1,rn3,xenTro2,criGri1,ce3,hg19chrM,ornAna1,hg19_rCRS_pUC18_phiX174,susScr1,bosTauMd3,caeRem2,tetNig1canon,apiMel3,galGal2,vicPac2,canFam2,anoCar1,CpipJ1,burkPseu_K96243,hg18nohaps,mm7canon,caeJap3,calJac3canon,ce8,caePb3,oryLat1,Spur_v2.6,rn5,taeGut2,bosTau3,burkPseu_1106A,loxAfr1,AaegL1,caeRem1,danRer3,nomLeu1,Arabidopsis_thaliana_TAIR10,hg38female,fr2,equCab2,rn4,taeGut1,panTro3full,lMaj5,hg19female,mm7,gadMor1,panPan1,bosTau2,tetNig2,IscaW1,pseuAeru_PAO1,droGri2,aplCal1,phiX,braFlo1,hg18,panTro2,caeJap2,eschColi_O157H7_EDL933,felCat8,droWil1,caeJap1,mm9canon,Zea_mays_B73_RefGen_v2,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir2,dasNov3,droGri1,Amel_4.5,galGal2canon,droVir1,speTri2,hg18chr21,loxAfr3,ci2canon,cavPor3,panTro1canon,bosTau4,mm10,ente638,tarSyr1,rn3canon,strePneu_R6,mm8,felCat4canon,bosTau5,eschColi_O157H7,rheMac3,calJac1,nomLeu2,droEre1,calJac3,bordBron,danRer4,dasNov1,susScr3,sorAra1,felCat3,hg19chrX,caePb2,monDom5,burkPseu_668,ponAbe2,droPer1,apiMel2,cb3full,monDom1,allMis1,caePb1,sacCer1,chrPic1,choHof1,saiBol1,felCat5,Xanthomonas_oryzae_MAFF_311018,bosTau8,hg17canon,baciSubt,musFur1,Bombyx_mori_p50T_2.0,hg38canon,tetNig2canon,Tcas_3.0,strPur2,cb3canon,droYak2,pseuAeru_PA7,ci2full,sarHar1,myoLuc2,oryCun1,droVir3,Schizosaccharomyces_pombe_1.1,danRer5,Hydra_JCVI,nomLeu3,petMar1,panTro4,oryCun2,hg17,rn4canon,hg18canon,tetNig1,turTru2,danRer7,venter1,danRer10,dm6,hg19,gasAcu1,bosTau7,triCas2,Xanthomonas_oryzae_KACC10331,Ptrichocarpa_156,oryLat2canon,gorGor3,ce7,xenTro3,Sscrofa9.58,droEre2,melGal1,canFam3,echTel1,droAna1,anoCar2,geoFor1,rn6,danRer2,dm3,eschColi_APEC_O1,caeRem3,droMoj1,droSec1,Tcacao_1.0,felCat4,tupBel1,eschColi_K12_DH10B,droSim1,pseuAeru_UCBPP_PA14,ce4,droMoj3,hg_g1k_v37,eschColi_O157H7_EC4115,galGal3,droYak1,galGal3canon,droMoj2,dm2,dp4,Homo_sapiens_nuHg19_mtrCRS,rheMac2,hg38,danRer6,panTro2canon,equCab2chrM,eschColi_O157H7_TW14359,sacCer3,burkPseu_1710B,xenTro1,dipOrd1,monDom4,Homo_sapiens_AK1,mm9female,apiMel1)", "inputs": {  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "5ed24859f29b5df9",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 5, "time_seconds": 11.986424446105957, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #7)" name="6" time="16.442594051361084">
        
            <error type="error" message="parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: eriEur1,susScr2,anoGam1,micMur1,eschColi_K12_W3110,eschColi_CFT073,Arabidopsis_thaliana_TAIR9,otoGar1,27835,taeGut1canon,mm9,ailMel1,ce5,equCab1,vicPac1,otoGar3,Xanthomonas_oryzae_PXO99A,mm8canon,priPac1,cerSim1,pUC18,caeJap4,strPur3,panTro1,galGal4,borEut13,caeRem4,canFam1,ce9,PhumU1,sacCer2,panTro3canon,papHam1,aptMan1,eschColi_K12,hg19canon,hetGla1,oryLat2,melUnd1,ce2,ce10,latCha1,dp3,AgamP3,droAna2,apiMel4,droAna3,ce6,Araly1,bosTau6,oviAri1,papAnu2,fr1,rn3,xenTro2,criGri1,ce3,hg19chrM,ornAna1,hg19_rCRS_pUC18_phiX174,susScr1,bosTauMd3,caeRem2,tetNig1canon,apiMel3,galGal2,vicPac2,canFam2,anoCar1,CpipJ1,burkPseu_K96243,hg18nohaps,mm7canon,caeJap3,calJac3canon,ce8,caePb3,oryLat1,Spur_v2.6,rn5,taeGut2,bosTau3,burkPseu_1106A,loxAfr1,AaegL1,caeRem1,danRer3,nomLeu1,Arabidopsis_thaliana_TAIR10,hg38female,fr2,equCab2,rn4,taeGut1,panTro3full,lMaj5,hg19female,mm7,gadMor1,panPan1,bosTau2,tetNig2,IscaW1,pseuAeru_PAO1,droGri2,aplCal1,phiX,braFlo1,hg18,panTro2,caeJap2,eschColi_O157H7_EDL933,felCat8,droWil1,caeJap1,mm9canon,Zea_mays_B73_RefGen_v2,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir2,dasNov3,droGri1,Amel_4.5,galGal2canon,droVir1,speTri2,hg18chr21,loxAfr3,ci2canon,cavPor3,panTro1canon,bosTau4,mm10,ente638,tarSyr1,rn3canon,strePneu_R6,mm8,felCat4canon,bosTau5,eschColi_O157H7,rheMac3,calJac1,nomLeu2,droEre1,calJac3,bordBron,danRer4,dasNov1,susScr3,sorAra1,felCat3,hg19chrX,caePb2,monDom5,burkPseu_668,ponAbe2,droPer1,apiMel2,cb3full,monDom1,allMis1,caePb1,sacCer1,chrPic1,choHof1,saiBol1,felCat5,Xanthomonas_oryzae_MAFF_311018,bosTau8,hg17canon,baciSubt,musFur1,Bombyx_mori_p50T_2.0,hg38canon,tetNig2canon,Tcas_3.0,strPur2,cb3canon,droYak2,pseuAeru_PA7,ci2full,sarHar1,myoLuc2,oryCun1,droVir3,Schizosaccharomyces_pombe_1.1,danRer5,Hydra_JCVI,nomLeu3,petMar1,panTro4,oryCun2,hg17,rn4canon,hg18canon,tetNig1,turTru2,danRer7,venter1,danRer10,dm6,hg19,gasAcu1,bosTau7,triCas2,Xanthomonas_oryzae_KACC10331,Ptrichocarpa_156,oryLat2canon,gorGor3,ce7,xenTro3,Sscrofa9.58,droEre2,melGal1,canFam3,echTel1,droAna1,anoCar2,geoFor1,rn6,danRer2,dm3,eschColi_APEC_O1,caeRem3,droMoj1,droSec1,Tcacao_1.0,felCat4,tupBel1,eschColi_K12_DH10B,droSim1,pseuAeru_UCBPP_PA14,ce4,droMoj3,hg_g1k_v37,eschColi_O157H7_EC4115,galGal3,droYak1,galGal3canon,droMoj2,dm2,dp4,Homo_sapiens_nuHg19_mtrCRS,rheMac2,hg38,danRer6,panTro2canon,equCab2chrM,eschColi_O157H7_TW14359,sacCer3,burkPseu_1710B,xenTro1,dipOrd1,monDom4,Homo_sapiens_AK1,mm9female,apiMel1)"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_file\u0027: an invalid option (\u0027bwa-mem-mt-genome\u0027) was selected (valid options: eriEur1,susScr2,anoGam1,micMur1,eschColi_K12_W3110,eschColi_CFT073,Arabidopsis_thaliana_TAIR9,otoGar1,27835,taeGut1canon,mm9,ailMel1,ce5,equCab1,vicPac1,otoGar3,Xanthomonas_oryzae_PXO99A,mm8canon,priPac1,cerSim1,pUC18,caeJap4,strPur3,panTro1,galGal4,borEut13,caeRem4,canFam1,ce9,PhumU1,sacCer2,panTro3canon,papHam1,aptMan1,eschColi_K12,hg19canon,hetGla1,oryLat2,melUnd1,ce2,ce10,latCha1,dp3,AgamP3,droAna2,apiMel4,droAna3,ce6,Araly1,bosTau6,oviAri1,papAnu2,fr1,rn3,xenTro2,criGri1,ce3,hg19chrM,ornAna1,hg19_rCRS_pUC18_phiX174,susScr1,bosTauMd3,caeRem2,tetNig1canon,apiMel3,galGal2,vicPac2,canFam2,anoCar1,CpipJ1,burkPseu_K96243,hg18nohaps,mm7canon,caeJap3,calJac3canon,ce8,caePb3,oryLat1,Spur_v2.6,rn5,taeGut2,bosTau3,burkPseu_1106A,loxAfr1,AaegL1,caeRem1,danRer3,nomLeu1,Arabidopsis_thaliana_TAIR10,hg38female,fr2,equCab2,rn4,taeGut1,panTro3full,lMaj5,hg19female,mm7,gadMor1,panPan1,bosTau2,tetNig2,IscaW1,pseuAeru_PAO1,droGri2,aplCal1,phiX,braFlo1,hg18,panTro2,caeJap2,eschColi_O157H7_EDL933,felCat8,droWil1,caeJap1,mm9canon,Zea_mays_B73_RefGen_v2,oryza_sativa_japonica_nipponbare_IRGSP4.0,droVir2,dasNov3,droGri1,Amel_4.5,galGal2canon,droVir1,speTri2,hg18chr21,loxAfr3,ci2canon,cavPor3,panTro1canon,bosTau4,mm10,ente638,tarSyr1,rn3canon,strePneu_R6,mm8,felCat4canon,bosTau5,eschColi_O157H7,rheMac3,calJac1,nomLeu2,droEre1,calJac3,bordBron,danRer4,dasNov1,susScr3,sorAra1,felCat3,hg19chrX,caePb2,monDom5,burkPseu_668,ponAbe2,droPer1,apiMel2,cb3full,monDom1,allMis1,caePb1,sacCer1,chrPic1,choHof1,saiBol1,felCat5,Xanthomonas_oryzae_MAFF_311018,bosTau8,hg17canon,baciSubt,musFur1,Bombyx_mori_p50T_2.0,hg38canon,tetNig2canon,Tcas_3.0,strPur2,cb3canon,droYak2,pseuAeru_PA7,ci2full,sarHar1,myoLuc2,oryCun1,droVir3,Schizosaccharomyces_pombe_1.1,danRer5,Hydra_JCVI,nomLeu3,petMar1,panTro4,oryCun2,hg17,rn4canon,hg18canon,tetNig1,turTru2,danRer7,venter1,danRer10,dm6,hg19,gasAcu1,bosTau7,triCas2,Xanthomonas_oryzae_KACC10331,Ptrichocarpa_156,oryLat2canon,gorGor3,ce7,xenTro3,Sscrofa9.58,droEre2,melGal1,canFam3,echTel1,droAna1,anoCar2,geoFor1,rn6,danRer2,dm3,eschColi_APEC_O1,caeRem3,droMoj1,droSec1,Tcacao_1.0,felCat4,tupBel1,eschColi_K12_DH10B,droSim1,pseuAeru_UCBPP_PA14,ce4,droMoj3,hg_g1k_v37,eschColi_O157H7_EC4115,galGal3,droYak1,galGal3canon,droMoj2,dm2,dp4,Homo_sapiens_nuHg19_mtrCRS,rheMac2,hg38,danRer6,panTro2canon,equCab2chrM,eschColi_O157H7_TW14359,sacCer3,burkPseu_1710B,xenTro1,dipOrd1,monDom4,Homo_sapiens_AK1,mm9female,apiMel1)", "inputs": {  "alignment_options|A": "2",  "alignment_options|B": "8",  "alignment_options|E": "2",  "alignment_options|E2": "1",  "alignment_options|O": "12",  "alignment_options|O2": "32",  "alignment_options|s": "40",  "alignment_options|z": "400",  "fastq_input|analysis_type_selector": "sr",  "fastq_input|fastq_input1": {   "id": "5ed24859f29b5df9",   "src": "hda"  },  "fastq_input|fastq_input_selector": "single",  "mapping_options|min_occ_floor": "1000",  "reference_source|ref_file": "bwa-mem-mt-genome",  "reference_source|reference_source_selector": "cached" }, "status": "error", "test_index": 6, "time_seconds": 16.442594051361084, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #8)" name="7" time="35.911718130111694">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.017*0.99] collected minimizers[M::mm_idx_gen::0.031*1.41] sorted minimizers[M::main::0.031*1.41] loaded/built the index for 25 target sequence(s)[M::mm_mapopt_update::0.034*1.38] mid_occ = 3[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25[M::mm_idx_stat::0.036*1.36] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935[M::worker_pipeline::0.051*1.48] mapped 25 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/7/a/0/dataset_7a0a9a66-48ff-442f-b49c-2091cb28b4f9.dat[M::main] Real time: 0.056 sec; CPU: 0.080 sec; Peak RSS: 0.009 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4 (Test #9)" name="8" time="28.2992103099823">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.88] collected minimizers[M::mm_idx_gen::0.005*1.16] sorted minimizers[M::main::0.005*1.15] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.006*1.15] mid_occ = 9[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.006*1.14] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057[M::worker_pipeline::0.060*1.01] mapped 1 sequences[M::main] Version: 2.17-r941[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/7/8/6/dataset_786379be-b7e8-48e3-bcd4-e864734d65f3.dat[M::main] Real time: 0.061 sec; CPU: 0.061 sec; Peak RSS: 0.010 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #1)" name="0" time="112.45915365219116">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/89/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat--pe1-2fastq:/galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/89/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat']      right reads: ['/galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/89/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/89/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/89/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/89/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat  0:00:00.518     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat  0:00:01.019     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.023    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.299    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.300    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.444    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.480    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.501    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.503    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.505    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.508    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.517    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.517    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.517    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat  0:00:01.563    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat  0:00:01.605    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.605    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.605    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.610    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.611    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.611    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.625    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.625    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat and /galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat  0:00:01.664    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.675    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.678    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.708    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.708    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.708    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/89/working/corrected/corrected.yaml  0:00:01.712    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/89/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/89/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/89/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.124     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.301   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.306     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.498   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.565     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.565     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.565     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.566     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.566     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.698     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.700    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.700    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.761    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.761    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.796    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.797    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.797    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.797    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.797    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.797    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.304     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.309    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.539    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.540    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.676    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.709    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.732    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.732    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.733    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.735    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:07.006    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.007    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.007    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.007    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.007    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.007    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.007    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.008    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.008    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.008    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.008    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.008    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.008    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.008    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.008    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.020    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.020    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.020    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.023    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.023    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.024    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/before_rr.fasta  0:00:07.028    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph.fastg  0:00:07.033    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/simplified_contigs.fasta  0:00:07.038    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/intermediate_contigs.fasta  0:00:07.046    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.046    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.046    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.046    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.046    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.046    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.117    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.247    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.044    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.044    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.053    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.201   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.204   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.209   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.212   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.212   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.212   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.229   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.238   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.259    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.259    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.260    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.264    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.265    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.265    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.265    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.265    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.276    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.280    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.281    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.281    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.281    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.281    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.281    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.281    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.281    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.281    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.281    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.282    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.282    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.282    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.282    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.283    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.283    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.283    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.283    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/89/working//K33/before_rr.fasta  0:00:09.288    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/89/working//K33/assembly_graph.fastg  0:00:09.292    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/89/working//K33/final_contigs.paths  0:00:09.299    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/89/working//K33/scaffolds.paths  0:00:09.316    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.318    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/89/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/89/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/89/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/89/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/89/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/89/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/89/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/89/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #2)" name="1" time="49.35424590110779">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/88/working--disable-gzip-output--only-assembler-t4-m8-k33--pe1-fr--pe1-1fasta:/galaxy/server/database/objects/6/6/b/dataset_66b13dd0-cb38-49d9-8a31-89027cebe4bb.dat--pe1-2fasta:/galaxy/server/database/objects/b/d/8/dataset_bd8e55f6-f116-41af-ba2c-a9cc91496f5c.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/88/workingMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/6/6/b/dataset_66b13dd0-cb38-49d9-8a31-89027cebe4bb.dat']      right reads: ['/galaxy/server/database/objects/b/d/8/dataset_bd8e55f6-f116-41af-ba2c-a9cc91496f5c.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/88/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/88/working/spades.log===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/88/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/88/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.297   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.304     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.477   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.533     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.533     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611  0:00:00.533     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.534     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.534     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.534     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.534     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.663     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.665    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.665    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.735    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:00.735    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.767    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.767    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.768    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.768    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.768    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.257     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.  0:00:01.262    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.485    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.  0:00:01.485    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.621    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.657    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).  0:00:01.677    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.679    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.680    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph  0:00:01.680    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths  0:00:01.681    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted  0:00:01.681    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops  0:00:01.681    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected  0:00:01.682    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.682    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.682    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.692    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).  0:00:01.692    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.704    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM  0:00:01.710    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding  0:00:01.710    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0  0:00:01.710    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356  0:00:01.710    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478  0:00:01.710    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.753    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:01.862    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.260    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:02.974    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.186    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.150    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849  0:00:06.151    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568  0:00:06.151    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251  0:00:06.151    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135  0:00:06.151    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738  0:00:06.151    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705  0:00:06.151    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135  0:00:06.151    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0  0:00:06.151    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer  0:00:06.151    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill  0:00:06.153    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:06.153    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:06.153    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:06.153    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:06.153    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:06.615     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.  0:00:06.619    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:06.832    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.  0:00:06.832    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:06.958    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:06.990    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:07.011    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).  0:00:07.011    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.  0:00:07.012    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled  0:00:07.014    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps  0:00:07.014    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)  0:00:07.018    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads  0:00:07.018    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices  0:00:07.018    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:07.018    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.019    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification  0:00:07.019    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:07.020    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover  0:00:07.020    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times  0:00:07.020    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification  0:00:07.020    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started  0:00:07.020    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07....913    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps  0:00:07.913    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.914    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.914    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.914    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.914    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.914    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.914    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.914    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.914    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.914    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865  0:00:07.914    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.914    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.914    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.925    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.925    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.925    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.927    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.927    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/88/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.928    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/88/working//K33/before_rr.fasta  0:00:07.932    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/88/working//K33/assembly_graph.fastg  0:00:07.936    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/88/working//K33/simplified_contigs.fasta  0:00:07.940    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/88/working//K33/intermediate_contigs.fasta  0:00:07.947    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.947    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.947    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.947    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.947    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.947    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:08.015    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.128    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.898    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.898    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges  0:00:09.904    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100  0:00:10.032   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:10.035   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.040   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.042   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:10.042   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:10.042   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:10.054   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:10.062   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:10.078    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:10.078    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:10.078    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:10.078    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:10.078    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.078    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.078    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.078    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:10.078    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:10.078    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:10.079    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.079    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:10.079    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:10.079    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:10.079    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:10.079    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:10.079    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:10.079    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:10.079    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:10.079    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:10.079    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:10.080    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.080    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865  0:00:10.080    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:10.080    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:10.080    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.080    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.080    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.080    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.080    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.080    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.080    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.080    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.080    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:10.080    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:10.081    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:10.081    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:10.081    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:10.081    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:10.081    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.081    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.081    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.081    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.081    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.081    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.081    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.081    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.081    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:10.081    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:10.081    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:10.081    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/88/working//K33/assembly_graph_with_scaffolds.gfa  0:00:10.081    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/88/working//K33/before_rr.fasta  0:00:10.086    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/88/working//K33/assembly_graph.fastg  0:00:10.090    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/88/working//K33/final_contigs.paths  0:00:10.098    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/88/working//K33/scaffolds.paths  0:00:10.112    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:10.114    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds===== Assembling finished. Used k-mer sizes: 33  * Assembled contigs are in /galaxy/server/database/jobs_directory/000/88/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/88/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/88/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/88/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/88/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/88/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/88/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #3)" name="2" time="59.46631097793579">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/90/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/f/a/8/dataset_fa88002b-22d0-4542-bd16-608620d10bd5.dat--pe1-2fastq.gz:/galaxy/server/database/objects/4/f/6/dataset_4f6b4eb4-deb1-4ae4-9c07-785185950927.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/90/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/f/a/8/dataset_fa88002b-22d0-4542-bd16-608620d10bd5.dat']      right reads: ['/galaxy/server/database/objects/4/f/6/dataset_4f6b4eb4-deb1-4ae4-9c07-785185950927.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/f/a/8/dataset_fa88002b-22d0-4542-bd16-608620d10bd5.dat  0:00:00.517     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/f/6/dataset_4f6b4eb4-deb1-4ae4-9c07-785185950927.dat  0:00:01.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.017    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.227    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.227    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.363    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.398    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.421    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.423    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.426    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.428    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.438    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.438    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.438    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/f/a/8/dataset_fa88002b-22d0-4542-bd16-608620d10bd5.dat  0:00:01.485    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/f/6/dataset_4f6b4eb4-deb1-4ae4-9c07-785185950927.dat  0:00:01.521    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.521    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.521    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.525    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.526    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.526    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.547    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.547    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.547    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.547    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/f/a/8/dataset_fa88002b-22d0-4542-bd16-608620d10bd5.dat and /galaxy/server/database/objects/4/f/6/dataset_4f6b4eb4-deb1-4ae4-9c07-785185950927.dat  0:00:01.584    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.595    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.599    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.632    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.632    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.633    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml  0:00:01.637    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.305     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.479   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.536     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.536     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.536     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.537     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.537     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.537     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.537     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.671     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.673    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.673    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.725    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.725    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.755    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.756    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.756    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.756    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.756    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.756    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.223     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.228    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.437    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.437    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.566    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.615    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.639    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.639    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.640    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.641    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU..osing short gaps  0:00:06.787    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:06.788    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:06.788    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:06.788    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:06.788    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:06.789    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:06.789    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:06.789    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:06.789    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:06.789    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:06.790    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:06.790    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.790    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.804    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:06.804    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:06.804    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:06.812    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.812    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa  0:00:06.813    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta  0:00:06.817    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg  0:00:06.821    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta  0:00:06.825    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta  0:00:06.832    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:06.832    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:06.832    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:06.832    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:06.832    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:06.832    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:06.910    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.051    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.841    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:08.841    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:08.847    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:08.983   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:08.986   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:08.992   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:08.993   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:08.993   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:08.993   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.009   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.018   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.039    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.040    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.040    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.040    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.040    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.040    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.040    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.040    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.040    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.040    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.040    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.040    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.040    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.041    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.041    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.041    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.041    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.041    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.041    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.041    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.041    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.041    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.041    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.041    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.041    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.041    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.041    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.042    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.042    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.042    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.042    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.042    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.042    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.042    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta  0:00:09.047    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg  0:00:09.052    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths  0:00:09.060    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths  0:00:09.075    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.077    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/90/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #4)" name="3" time="80.07839846611023">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/91/working--disable-gzip-output-t4-m8--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat--pe1-2fastq:/galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/91/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat']      right reads: ['/galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: automatic selection based on read length  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat  0:00:00.473     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat  0:00:00.954     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.959    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.174    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.174    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.313    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.352    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.375    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.377    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.379    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.382    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.391    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.391    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.391    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat  0:00:01.437    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat  0:00:01.478    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.478    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.483    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.484    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.484    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.499    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.499    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.499    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.499    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/0/4/dataset_0040e337-97e9-4618-96cc-9876dee3ae49.dat and /galaxy/server/database/objects/3/f/4/dataset_3f43710c-0a2f-4901-9357-2856216351e7.dat  0:00:01.530    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.541    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.545    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.575    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.575    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.575    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml  0:00:01.579    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K21/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=21  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.111    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.116     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.302   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.550     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.551     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.695     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.697    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.697    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.754    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.  0:00:00.754    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.786    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.786    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.786    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.787    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.787    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.787    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.260     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.  0:00:01.265    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.484    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.  0:00:01.484    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.617    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.650    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.672    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).  0:00:01.672    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.674    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.675    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping  0:00:01.675    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl.. short gaps  0:00:03.434    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:03.435    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:03.435    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:03.435    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:03.435    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:03.435    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.435    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:03.435    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:03.435    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:03.435    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62  0:00:03.435    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:03.435    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.435    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.447    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:03.447    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:03.447    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:03.450    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:03.450    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa  0:00:03.451    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta  0:00:03.455    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg  0:00:03.459    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/simplified_contigs.fasta  0:00:03.463    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/intermediate_contigs.fasta  0:00:03.475    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:03.475    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.475    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.475    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945  0:00:03.475    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:03.475    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:03.547    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:03.668    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.443    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:05.443    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges  0:00:05.450    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100  0:00:05.589   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:05.592   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.596   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.598   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:05.598   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:05.598   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:05.611   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:05.618   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.638    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:05.638    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:05.638    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:05.638    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:05.638    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.638    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.638    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.638    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:05.638    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:05.638    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:05.639    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.639    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:05.639    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:05.640    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:05.640    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:05.640    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:05.640    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:05.640    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:05.640    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:05.640    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:05.640    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:05.640    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:05.641    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.641    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62  0:00:05.641    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:05.641    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:05.641    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.641    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.641    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.641    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.641    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.641    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:05.641    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:05.641    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:05.641    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa  0:00:05.642    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta  0:00:05.646    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg  0:00:05.651    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/final_contigs.paths  0:00:05.658    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/scaffolds.paths  0:00:05.672    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:05.674    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds===== Assembling finished. Used k-mer sizes: 21, 33, 55  * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #5)" name="4" time="47.39125919342041">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/94/working--disable-gzip-output-t4-m8-k77--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/0/7/6/dataset_07601a86-d8b8-42e6-a0ab-6de537ad2b94.dat--pe1-2fastq:/galaxy/server/database/objects/7/d/7/dataset_7d7236b0-cfe9-4507-bf8c-8f7f800889f2.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/94/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/0/7/6/dataset_07601a86-d8b8-42e6-a0ab-6de537ad2b94.dat']      right reads: ['/galaxy/server/database/objects/7/d/7/dataset_7d7236b0-cfe9-4507-bf8c-8f7f800889f2.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [77]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/94/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.004     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/7/6/dataset_07601a86-d8b8-42e6-a0ab-6de537ad2b94.dat  0:00:00.494     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/7/d/7/dataset_7d7236b0-cfe9-4507-bf8c-8f7f800889f2.dat  0:00:00.988     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:00.992    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.201    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.201    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.337    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.373    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.396    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.398    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.400    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.402    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.410    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.410    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.410    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/7/6/dataset_07601a86-d8b8-42e6-a0ab-6de537ad2b94.dat  0:00:01.454    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/7/d/7/dataset_7d7236b0-cfe9-4507-bf8c-8f7f800889f2.dat  0:00:01.498    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.498    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.498    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.506    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.507    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.510    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.510    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.527    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.527    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.527    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.527    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/7/6/dataset_07601a86-d8b8-42e6-a0ab-6de537ad2b94.dat and /galaxy/server/database/objects/7/d/7/dataset_7d7236b0-cfe9-4507-bf8c-8f7f800889f2.dat  0:00:01.560    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.568    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.571    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.599    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.599    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.599    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml  0:00:01.603    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/94/working/K77/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/94/working/dataset.info) with K=77  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.117     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.298   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.304     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.488   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.550     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.551     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101  0:00:00.688     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.690    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.690    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.809    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.809    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.809    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.810    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.810    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.810    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525  0:00:01.305     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.  0:00:01.311    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.538    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.  0:00:01.538    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.674    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.726    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.750    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).  0:00:01.750    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.752    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.752    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:03.939    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:03.940    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:03.940    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:03.940    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:03.940    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:03.940    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:03.940    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:03.940    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:03.940    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:03.940    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594  0:00:03.940    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:03.940    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.940    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.947    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:03.947    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:03.947    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:03.949    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:03.949    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa  0:00:03.950    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta  0:00:03.954    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg  0:00:03.958    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/simplified_contigs.fasta  0:00:03.962    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/intermediate_contigs.fasta  0:00:03.968    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:03.968    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:03.968    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:03.968    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899  0:00:03.968    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:03.968    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:04.036    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:04.157    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:05.943    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:05.943    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges  0:00:05.950    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100  0:00:06.081   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:06.084   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.087   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:06.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:06.089   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:06.102   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:06.107   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:06.123    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:06.123    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:06.123    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:06.123    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:06.123    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:06.123    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:06.123    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:06.123    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:06.123    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:06.123    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:06.124    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:06.124    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:06.124    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:06.124    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:06.124    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:06.124    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:06.124    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:06.124    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:06.124    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:06.124    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:06.124    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:06.125    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:06.125    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594  0:00:06.125    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:06.125    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:06.125    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:06.125    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:06.125    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:06.125    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:06.125    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:06.125    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:06.125    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:06.125    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:06.125    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa  0:00:06.126    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta  0:00:06.132    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg  0:00:06.137    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/final_contigs.paths  0:00:06.144    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/scaffolds.paths  0:00:06.160    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:06.163    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds===== Assembling finished. Used k-mer sizes: 77  * Corrected reads are in /galaxy/server/database/jobs_directory/000/94/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #6)" name="5" time="64.58060097694397">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/97/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/1/8/6/dataset_18672c29-fa8e-4cc1-b613-1fc83b8a1bb4.dat--pe1-2fastq:/galaxy/server/database/objects/d/2/1/dataset_d210601c-3c8b-49c0-b31f-8871020bd13a.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/97/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/1/8/6/dataset_18672c29-fa8e-4cc1-b613-1fc83b8a1bb4.dat']      right reads: ['/galaxy/server/database/objects/d/2/1/dataset_d210601c-3c8b-49c0-b31f-8871020bd13a.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/8/6/dataset_18672c29-fa8e-4cc1-b613-1fc83b8a1bb4.dat  0:00:00.533     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/2/1/dataset_d210601c-3c8b-49c0-b31f-8871020bd13a.dat  0:00:01.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.011    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.229    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.229    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.362    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.395    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.417    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.418    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.420    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.423    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.432    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.432    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.432    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/8/6/dataset_18672c29-fa8e-4cc1-b613-1fc83b8a1bb4.dat  0:00:01.480    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/2/1/dataset_d210601c-3c8b-49c0-b31f-8871020bd13a.dat  0:00:01.519    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.519    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.519    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.522    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.523    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.523    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.538    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.538    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.538    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.538    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/1/8/6/dataset_18672c29-fa8e-4cc1-b613-1fc83b8a1bb4.dat and /galaxy/server/database/objects/d/2/1/dataset_d210601c-3c8b-49c0-b31f-8871020bd13a.dat  0:00:01.569    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.580    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.585    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.613    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.613    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.613    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml  0:00:01.617    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.114    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.119     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.307   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.313     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.490   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.548     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.548     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.548     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.548     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.549     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.676     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.678    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.678    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.731    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.731    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.766    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.766    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.766    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.767    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.767    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.767    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.267     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.272    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.497    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.497    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.631    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.665    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.688    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.688    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.689    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.690    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == ..osing short gaps  0:00:07.034    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.034    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.034    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.034    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.034    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.034    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.034    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.034    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.034    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.035    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.035    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.035    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.035    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.035    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.035    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.035    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.047    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.048    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.048    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.050    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.050    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.051    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta  0:00:07.055    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg  0:00:07.060    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/simplified_contigs.fasta  0:00:07.064    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/intermediate_contigs.fasta  0:00:07.072    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.072    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.072    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.072    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.072    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.072    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.141    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.296    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.081    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.082    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.088    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.214   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.217   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.222   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.224   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.224   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.224   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.238   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.246   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.264    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.264    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.264    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.264    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.264    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.266    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.266    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.266    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.266    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.266    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.266    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.267    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.267    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.267    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.267    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.267    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.267    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.267    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.267    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.267    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.267    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.267    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.267    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.267    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.267    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.268    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.268    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.268    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.268    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.268    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.268    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta  0:00:09.273    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg  0:00:09.278    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/final_contigs.paths  0:00:09.287    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/scaffolds.paths  0:00:09.303    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.305    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/97/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #7)" name="6" time="58.02585291862488">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/100/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq:/galaxy/server/database/objects/0/c/a/dataset_0caaac86-67f6-4b5b-a2b9-01b95eeac4b7.dat--pe1-2fastq:/galaxy/server/database/objects/9/3/7/dataset_937377e5-c69b-4d4a-9295-6a29ac80e7d1.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/100/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/0/c/a/dataset_0caaac86-67f6-4b5b-a2b9-01b95eeac4b7.dat']      right reads: ['/galaxy/server/database/objects/9/3/7/dataset_937377e5-c69b-4d4a-9295-6a29ac80e7d1.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.006     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.006     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/c/a/dataset_0caaac86-67f6-4b5b-a2b9-01b95eeac4b7.dat  0:00:00.522     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/3/7/dataset_937377e5-c69b-4d4a-9295-6a29ac80e7d1.dat  0:00:01.043     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.048    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.282    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.282    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.430    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.468    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.490    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.492    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.494    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.497    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.507    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.508    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.508    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/c/a/dataset_0caaac86-67f6-4b5b-a2b9-01b95eeac4b7.dat  0:00:01.548    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/3/7/dataset_937377e5-c69b-4d4a-9295-6a29ac80e7d1.dat  0:00:01.582    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.582    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.582    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.586    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.587    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.587    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.604    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.604    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.604    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.604    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/c/a/dataset_0caaac86-67f6-4b5b-a2b9-01b95eeac4b7.dat and /galaxy/server/database/objects/9/3/7/dataset_937377e5-c69b-4d4a-9295-6a29ac80e7d1.dat  0:00:01.635    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.646    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.652    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.684    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.684    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.684    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml  0:00:01.688    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.117    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.122     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.301   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.307     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.487   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.550     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.550     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.551     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.551     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.551     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.683     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.685    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.685    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.777    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.777    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.777    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.778    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.319     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.324    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.561    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.561    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.713    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.749    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.771    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.771    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.772    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.773    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO.. 0:00:07.209    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.213    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.213    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.213    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.213    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.213    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.213    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.213    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.213    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.213    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.213    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.213    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.213    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.227    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.227    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.227    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.230    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.230    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.230    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta  0:00:07.237    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg  0:00:07.242    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/simplified_contigs.fasta  0:00:07.246    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/intermediate_contigs.fasta  0:00:07.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.254    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.254    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.254    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.254    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.254    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.332    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.514    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.227    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.227    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.233    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.397   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.399   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.415   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.416   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.416   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.416   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.433   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.443   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.506    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.506    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.506    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.506    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.512    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.512    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.512    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.512    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.512    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.512    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.513    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.513    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.513    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.513    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.513    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.513    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.513    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.513    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.513    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.513    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.513    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.520    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.520    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.520    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.520    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.520    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.520    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.520    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.520    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.520    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.520    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.520    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.521    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.521    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.521    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta  0:00:09.527    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg  0:00:09.532    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/final_contigs.paths  0:00:09.541    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/scaffolds.paths  0:00:09.570    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.573    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/100/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1 (Test #8)" name="7" time="62.5827841758728">
        
            
            <system-out><![CDATA[
            Command line: /usr/local/bin/spades.py-o/galaxy/server/database/jobs_directory/000/103/working--disable-gzip-output-t4-m8-k33--pe1-fr--pe1-1fastq.gz:/galaxy/server/database/objects/0/0/5/dataset_005c5267-db6f-4dde-9e49-22a7014560f9.dat--pe1-2fastq.gz:/galaxy/server/database/objects/2/2/8/dataset_228c5028-655f-4b59-8557-e51019e8a2e6.datSystem information:  SPAdes version: 3.12.0  Python version: 3.9.2  OS: Linux-4.19.112+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/103/workingMode: read error correction and assemblingDebug mode is turned OFFDataset parameters:  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/objects/0/0/5/dataset_005c5267-db6f-4dde-9e49-22a7014560f9.dat']      right reads: ['/galaxy/server/database/objects/2/2/8/dataset_228c5028-655f-4b59-8557-e51019e8a2e6.dat']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedRead error correction parameters:  Iterations: 1  PHRED offset will be auto-detected  Corrected reads will NOT be compressedAssembly parameters:  k: [33]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/103/working/tmp  Threads: 4  Memory limit (in Gb): 8======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log===== Read error correction started. == Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes     === ITERATION 0 begins ===  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.004     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/0/5/dataset_005c5267-db6f-4dde-9e49-22a7014560f9.dat  0:00:00.521     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/2/8/dataset_228c5028-655f-4b59-8557-e51019e8a2e6.dat  0:00:01.018     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed  0:00:01.023    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.255    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.  0:00:01.255    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.399    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.433    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.455    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).  0:00:01.457    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order  0:00:01.459    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.  0:00:01.462    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters  0:00:01.472    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960  0:00:01.472    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.  0:00:01.472    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/0/5/dataset_005c5267-db6f-4dde-9e49-22a7014560f9.dat  0:00:01.515    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/2/8/dataset_228c5028-655f-4b59-8557-e51019e8a2e6.dat  0:00:01.551    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.  0:00:01.551    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.  0:00:01.551    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964  0:00:01.555    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))  0:00:01.555    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.  0:00:01.555    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.  0:00:01.576    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.  0:00:01.576    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized  0:00:01.576    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.  0:00:01.576    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/0/5/dataset_005c5267-db6f-4dde-9e49-22a7014560f9.dat and /galaxy/server/database/objects/2/2/8/dataset_228c5028-655f-4b59-8557-e51019e8a2e6.dat  0:00:01.619    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.  0:00:01.629    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0  0:00:01.635    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0  0:00:01.664    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.  0:00:01.664    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.  0:00:01.665    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml  0:00:01.669    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.== Dataset description file was created: /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml===== Read error correction finished. ===== Assembling started.== Running assembler: K33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/103/working/K33/configs/config.info  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/103/working/dataset.info) with K=33  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads  0:00:00.122    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written  0:00:00.127     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads  0:00:00.496   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written  0:00:00.555     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100  0:00:00.555     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526  0:00:00.555     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting  0:00:00.556     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.556     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.556     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb  0:00:00.556     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152  0:00:00.691     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K  0:00:00.693    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads  0:00:00.694    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.769    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.  0:00:00.769    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.803    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction  0:00:00.803    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.804    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.804    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.804    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb  0:00:00.804    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:01.314     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.  0:00:01.319    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.553    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.  0:00:01.553    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.704    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.750    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.774    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).  0:00:01.774    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.781    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.782    16M / 3G    INFO    General                 (stage.cpp                 : 101).. 0:00:07.477    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates  0:00:07.478    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup  0:00:07.478    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification  0:00:07.478    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled  0:00:07.478    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled  0:00:07.478    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times  0:00:07.478    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges  0:00:07.478    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times  0:00:07.478    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage  0:00:07.478    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839  0:00:07.478    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction  0:00:07.478    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.478    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.491    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions  0:00:07.491    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed  0:00:07.491    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides  0:00:07.494    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:07.494    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa  0:00:07.494    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta  0:00:07.499    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg  0:00:07.503    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/simplified_contigs.fasta  0:00:07.506    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/intermediate_contigs.fasta  0:00:07.525    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting  0:00:07.525    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process  0:00:07.525    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done  0:00:07.526    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967  0:00:07.526    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0  0:00:07.526    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)  0:00:07.599    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:07.753    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.550    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)  0:00:09.551    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges  0:00:09.564    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100  0:00:09.707   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0  0:00:09.711   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.727   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.734   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0  0:00:09.734   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)  0:00:09.734   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0  0:00:09.751   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper  0:00:09.759   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed  0:00:09.775    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done  0:00:09.775    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.775    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.775    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information  0:00:09.775    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.775    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index  0:00:09.775    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info  0:00:09.775    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2  0:00:09.775    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering  0:00:09.775    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index  0:00:09.775    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving  0:00:09.775    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving  0:00:09.775    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000  0:00:09.776    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.776    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839  0:00:09.776    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library  0:00:09.776    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library  0:00:09.776    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.776    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.776    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:09.776    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:09.776    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:09.776    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized  0:00:09.776    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished  0:00:09.777    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output  0:00:09.777    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa  0:00:09.777    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta  0:00:09.782    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg  0:00:09.786    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/final_contigs.paths  0:00:09.794    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/scaffolds.paths  0:00:09.808    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished  0:00:09.810    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds===== Assembling finished. Used k-mer sizes: 33  * Corrected reads are in /galaxy/server/database/jobs_directory/000/103/working/corrected/ * Assembled contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.fasta * Assembly graph is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph_with_scaffolds.gfa * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.paths======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.logThank you for using SPAdes!
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>
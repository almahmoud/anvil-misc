{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://35.190.161.210:8000/galaxy/", "results": {"total": 36, "errors": 3, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 61.37483596801758, "inputs": {"library|input_1": {"src": "hda", "id": "4d3eb3edf2b6448f"}, "library|input_2": {"src": "hda", "id": "1e292d78879e519e"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "802ce5df094f5d50"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "65be66fc8700ac05", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:21:42.606249", "create_time": "2021-04-17T15:21:13.339197", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-sksvt", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/a/7/9/dataset_a79b0eb0-fffa-4bbf-8dc3-8312ec8b7c4f.dat' genome && ln -s -f '/galaxy/server/database/objects/a/7/9/dataset_a79b0eb0-fffa-4bbf-8dc3-8312ec8b7c4f.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/1/3/5/dataset_135865b8-3303-4a0a-b8f2-11ad732fa589.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/e/2/e/dataset_e2e785dc-d2cd-463a-bff5-52b7278eecac.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/7/0/b/dataset_70b0c11b-c182-4b7f-9c51-18dc2f5b2d7d.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 30, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 28, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 29, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "4d3eb3edf2b6448f", "src": "hda", "uuid": "135865b8-3303-4a0a-b8f2-11ad732fa589"}, "own_file": {"id": "802ce5df094f5d50", "src": "hda", "uuid": "a79b0eb0-fffa-4bbf-8dc3-8312ec8b7c4f"}, "input_2": {"id": "1e292d78879e519e", "src": "hda", "uuid": "e2e785dc-d2cd-463a-bff5-52b7278eecac"}}, "outputs": {"output": {"id": "65be66fc8700ac05", "src": "hda", "uuid": "70b0c11b-c182-4b7f-9c51-18dc2f5b2d7d"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/7/9/dataset_a79b0eb0-fffa-4bbf-8dc3-8312ec8b7c4f.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\nGetting block 6 of 15\n  Reserving size (1554) for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/7/9/dataset_a79b0eb0-fffa-4bbf-8dc3-8312ec8b7c4f.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\nGetting block 6 of 15\n  Reserving size (1554) for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:21:39", "plugin": "core", "name": "start_epoch", "raw_value": "1618672899.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:21:40", "plugin": "core", "name": "end_epoch", "raw_value": "1618672900.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 51.896870374679565, "inputs": {"library|input_1": {"src": "hdca", "id": "60bfe5f6583b2c2a"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "2155683f8dffd901"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "5091144b31efdd0a", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:21:47.768829", "create_time": "2021-04-17T15:21:22.047443", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-9b9fv", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/b/f/dataset_5bffe128-cace-443d-8fc1-af56744d76c8.dat' genome && ln -s -f '/galaxy/server/database/objects/5/b/f/dataset_5bffe128-cace-443d-8fc1-af56744d76c8.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/c/c/e/dataset_cce83994-9083-4ee0-86fb-64ac64a0e1a0.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/6/a/0/dataset_6a069659-4254-4895-b2a5-df9d951c98f1.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/0/d/d/dataset_0dde518f-a7f2-45f1-bd9b-b805d13a3a5d.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/e/a/dataset_aea41a1c-5487-4d9c-87bf-bf47261e1cc2.dat'  && mv '/galaxy/server/database/objects/0/d/d/dataset_0dde518f-a7f2-45f1-bd9b-b805d13a3a5d.1.dat' '/galaxy/server/database/objects/0/d/d/dataset_0dde518f-a7f2-45f1-bd9b-b805d13a3a5d.dat' && mv '/galaxy/server/database/objects/0/d/d/dataset_0dde518f-a7f2-45f1-bd9b-b805d13a3a5d.2.dat' '/galaxy/server/database/objects/2/1/7/dataset_217930d7-0be4-4a2c-b84b-c95e0eaded51.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 34, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"own_file": {"id": "2155683f8dffd901", "src": "hda", "uuid": "5bffe128-cace-443d-8fc1-af56744d76c8"}, "input_12": {"id": "223626580a056df0", "src": "hda", "uuid": "6a069659-4254-4895-b2a5-df9d951c98f1"}, "input_11": {"id": "372495825aa0e031", "src": "hda", "uuid": "cce83994-9083-4ee0-86fb-64ac64a0e1a0"}}, "outputs": {"output_unaligned_reads_l": {"id": "a842a7ab850f5ecf", "src": "hda", "uuid": "0dde518f-a7f2-45f1-bd9b-b805d13a3a5d"}, "output_unaligned_reads_r": {"id": "897986974ed144c3", "src": "hda", "uuid": "217930d7-0be4-4a2c-b84b-c95e0eaded51"}, "output": {"id": "f8a8a7ac8bf59dcb", "src": "hda", "uuid": "aea41a1c-5487-4d9c-87bf-bf47261e1cc2"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/b/f/dataset_5bffe128-cace-443d-8fc1-af56744d76c8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/b/f/dataset_5bffe128-cace-443d-8fc1-af56744d76c8.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:21:44", "plugin": "core", "name": "start_epoch", "raw_value": "1618672904.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:21:45", "plugin": "core", "name": "end_epoch", "raw_value": "1618672905.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 42.65874528884888, "inputs": {"library|input_1": {"src": "hda", "id": "372495825aa0e031"}, "library|input_2": {"src": "hda", "id": "fa6ef84e636ab482"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "5091144b31efdd0a"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "897986974ed144c3", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:21:52.777100", "create_time": "2021-04-17T15:21:35.839955", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-ht7gt", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat' genome && ln -s -f '/galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/c/e/dataset_cce83994-9083-4ee0-86fb-64ac64a0e1a0.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/6/5/6/dataset_656049ad-f1c2-4ab2-bf5c-7dc6fc125fdf.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/2/9/dataset_029cc336-8253-46c9-bc28-c3ada769fe1e.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": \"\", \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": \"\", \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"own_file": {"id": "5091144b31efdd0a", "src": "hda", "uuid": "1e734187-f59b-4d7d-aba1-4c2a039f36d6"}, "input_1": {"id": "372495825aa0e031", "src": "hda", "uuid": "cce83994-9083-4ee0-86fb-64ac64a0e1a0"}, "input_2": {"id": "fa6ef84e636ab482", "src": "hda", "uuid": "656049ad-f1c2-4ab2-bf5c-7dc6fc125fdf"}}, "outputs": {"output": {"id": "ef586313ac19a5cc", "src": "hda", "uuid": "029cc336-8253-46c9-bc28-c3ada769fe1e"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  bucket 3: 100%\n  (Using difference cover)\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 1229 for bucket 3\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  bucket 7: 20%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  bucket 3: 100%\n  (Using difference cover)\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 1229 for bucket 3\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  bucket 7: 20%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:21:51", "plugin": "core", "name": "start_epoch", "raw_value": "1618672911.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:21:52", "plugin": "core", "name": "end_epoch", "raw_value": "1618672912.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 67.78196096420288, "inputs": {"library|input_1": {"src": "hda", "id": "372495825aa0e031"}, "library|input_2": {"src": "hda", "id": "fa6ef84e636ab482"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "5091144b31efdd0a"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "f8a8a7ac8bf59dcb", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:22:07.613515", "create_time": "2021-04-17T15:21:57.344157", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-kn8z8", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat' genome && ln -s -f '/galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/c/e/dataset_cce83994-9083-4ee0-86fb-64ac64a0e1a0.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/6/5/6/dataset_656049ad-f1c2-4ab2-bf5c-7dc6fc125fdf.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/6/0/b/dataset_60b53843-6a4b-4349-92d0-328803184f7a.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/4/b/dataset_24baec95-ac00-46f3-98cf-92458cb7f625.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_2": {"id": "fa6ef84e636ab482", "src": "hda", "uuid": "656049ad-f1c2-4ab2-bf5c-7dc6fc125fdf"}, "own_file": {"id": "5091144b31efdd0a", "src": "hda", "uuid": "1e734187-f59b-4d7d-aba1-4c2a039f36d6"}, "input_1": {"id": "372495825aa0e031", "src": "hda", "uuid": "cce83994-9083-4ee0-86fb-64ac64a0e1a0"}}, "outputs": {"mapping_stats": {"id": "2e84d9e97049f249", "src": "hda", "uuid": "60b53843-6a4b-4349-92d0-328803184f7a"}, "output": {"id": "4990dc9fb9d116eb", "src": "hda", "uuid": "24baec95-ac00-46f3-98cf-92458cb7f625"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 13: 10%\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 12: 80%\n  bucket 13: 30%\n  bucket 12: 90%\n  bucket 13: 40%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  bucket 7: 20%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  bucket 9: 20%\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 12 of 15\nGetting block 11 of 15\n  Reserving size (1554) for bucket 12\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/e/7/dataset_1e734187-f59b-4d7d-aba1-4c2a039f36d6.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 13: 10%\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 12: 80%\n  bucket 13: 30%\n  bucket 12: 90%\n  bucket 13: 40%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 15\n  bucket 7: 20%\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  bucket 9: 20%\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 12 of 15\nGetting block 11 of 15\n  Reserving size (1554) for bucket 12\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:22:05", "plugin": "core", "name": "start_epoch", "raw_value": "1618672925.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:22:05", "plugin": "core", "name": "end_epoch", "raw_value": "1618672925.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 60.315101623535156, "inputs": {"library|input_1": {"src": "hda", "id": "c017656b296d3d4f"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "8934542685845a42"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "5edb0f2b197d4a53", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:22:37.753576", "create_time": "2021-04-17T15:22:27.508425", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-f2mns", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat' genome && ln -s -f '/galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/f/8/e/dataset_f8e74f67-2a21-42da-bdf5-fe23d058c91a.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/3/3/dataset_e338203e-1925-4e57-abae-bf8ca5a377f5.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": \"\", \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": \"\", \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 44, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "c017656b296d3d4f", "src": "hda", "uuid": "f8e74f67-2a21-42da-bdf5-fe23d058c91a"}, "own_file": {"id": "8934542685845a42", "src": "hda", "uuid": "a9e802a0-27e7-4319-ac55-eb5363d97384"}}, "outputs": {"output": {"id": "6431226d7327e4d0", "src": "hda", "uuid": "e338203e-1925-4e57-abae-bf8ca5a377f5"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Sorting block time: 00:00:00\n  bucket 8: 10%\nReturning block of 1387 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  bucket 13: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  bucket 11: 20%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 50%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Sorting block time: 00:00:00\n  bucket 8: 10%\nReturning block of 1387 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  bucket 13: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\nGetting block 2 of 15\n  Reserving size (1554) for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 15\n  bucket 11: 20%\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 50%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:22:34", "plugin": "core", "name": "start_epoch", "raw_value": "1618672954.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:22:35", "plugin": "core", "name": "end_epoch", "raw_value": "1618672955.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 60.288208961486816, "inputs": {"library|input_1": {"src": "hda", "id": "7b5cc80ce1d37890"}, "library|input_2": {"src": "hda", "id": "7423bc12f7736933"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "8934542685845a42"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "9210f9face480dfa", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:22:46.742411", "create_time": "2021-04-17T15:22:27.643546", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-p2jft", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat' genome && ln -s -f '/galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/6/9/3/dataset_693495b3-a682-4429-a296-fdee4a906346.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/c/5/c/dataset_c5cf840d-fc3d-43ab-bcb5-35ba89d3a285.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/a/b/dataset_9ab83a13-c4ef-4357-9785-639bccf60668.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 46, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "7b5cc80ce1d37890", "src": "hda", "uuid": "693495b3-a682-4429-a296-fdee4a906346"}, "input_2": {"id": "7423bc12f7736933", "src": "hda", "uuid": "c5cf840d-fc3d-43ab-bcb5-35ba89d3a285"}, "own_file": {"id": "8934542685845a42", "src": "hda", "uuid": "a9e802a0-27e7-4319-ac55-eb5363d97384"}}, "outputs": {"output": {"id": "d9370494f80f8ce9", "src": "hda", "uuid": "9ab83a13-c4ef-4357-9785-639bccf60668"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  bucket 14: 90%\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  bucket 5: 10%\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 10: 60%\n  bucket 9: 50%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  bucket 14: 90%\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:22:43", "plugin": "core", "name": "start_epoch", "raw_value": "1618672963.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:22:43", "plugin": "core", "name": "end_epoch", "raw_value": "1618672963.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 60.28311634063721, "inputs": {"library|input_1": {"src": "hda", "id": "b6c5dd105f8ddb9f"}, "library|input_2": {"src": "hda", "id": "9210f9face480dfa"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "8934542685845a42"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "8934542685845a42", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:22:43.741648", "create_time": "2021-04-17T15:22:27.647008", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-s42mf", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat' genome && ln -s -f '/galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/d/3/e/dataset_d3e9265f-3361-48c2-94f7-a23f9b41e2bd.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/8/b/8/dataset_8b8f5ded-d77c-4ca9-98ac-29c7b13bbb84.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/7/5/0/dataset_750b11a9-73f0-4361-8133-d7556bdee3bc.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 45, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "b6c5dd105f8ddb9f", "src": "hda", "uuid": "d3e9265f-3361-48c2-94f7-a23f9b41e2bd"}, "input_2": {"id": "9210f9face480dfa", "src": "hda", "uuid": "8b8f5ded-d77c-4ca9-98ac-29c7b13bbb84"}, "own_file": {"id": "8934542685845a42", "src": "hda", "uuid": "a9e802a0-27e7-4319-ac55-eb5363d97384"}}, "outputs": {"output": {"id": "db9cb8c9f2053ee2", "src": "hda", "uuid": "750b11a9-73f0-4361-8133-d7556bdee3bc"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 1052 for bucket 3\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 6: 70%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\nGetting block 14 of 15\n  Reserving size (1554) for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\nGetting block 2 of 15\n  bucket 1: 40%\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 50%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 70%\n  bucket 2: 10%\n  bucket 1: 80%\n  bucket 2: 20%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 30%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  Sorting block time: 00:00:00\n  bucket 2: 80%\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 8 of 15\nGetting block 7 of 15\n  Reserving size (1554) for bucket 8\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9e802a0-27e7-4319-ac55-eb5363d97384.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  bucket 3: 10%\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 1052 for bucket 3\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 6: 70%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 13 of 15\nGetting block 14 of 15\n  Reserving size (1554) for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\nGetting block 2 of 15\n  bucket 1: 40%\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 50%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 70%\n  bucket 2: 10%\n  bucket 1: 80%\n  bucket 2: 20%\n  bucket 1: 90%\n  bucket 1: 100%\n  bucket 2: 30%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  Sorting block time: 00:00:00\n  bucket 2: 80%\nReturning block of 390 for bucket 1\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 6: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 8 of 15\nGetting block 7 of 15\n  Reserving size (1554) for bucket 8\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 15\n  Entering block accumulator loop for bucket 11:\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 15\n  Entering block accumulator loop for bucket 13:\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:22:40", "plugin": "core", "name": "start_epoch", "raw_value": "1618672960.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:22:41", "plugin": "core", "name": "end_epoch", "raw_value": "1618672961.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 62.1140239238739, "inputs": {"library|input_1": {"src": "hda", "id": "5bf8ac162dc832f6"}, "library|input_2": {"src": "hda", "id": "03a4ee610731d5e2"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "db179856efa22c1e"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "5bf8ac162dc832f6", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:23:08.627716", "create_time": "2021-04-17T15:22:57.877643", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-fsqtm", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/4/e/dataset_94e0cd4a-2b10-4426-8ff4-84bcd2db685e.dat' genome && ln -s -f '/galaxy/server/database/objects/9/4/e/dataset_94e0cd4a-2b10-4426-8ff4-84bcd2db685e.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/a/c/0/dataset_ac03391a-209b-4090-9a8e-1f0ee60b35e8.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/2/e/c/dataset_2ecf5464-8a4d-42cf-bfed-02807cda045d.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/6/9/2/dataset_6924ba53-34a6-41bb-9e24-7e2b57fb5084.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 57, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 56, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "5bf8ac162dc832f6", "src": "hda", "uuid": "ac03391a-209b-4090-9a8e-1f0ee60b35e8"}, "input_2": {"id": "03a4ee610731d5e2", "src": "hda", "uuid": "2ecf5464-8a4d-42cf-bfed-02807cda045d"}, "own_file": {"id": "db179856efa22c1e", "src": "hda", "uuid": "94e0cd4a-2b10-4426-8ff4-84bcd2db685e"}}, "outputs": {"output": {"id": "fb012feecf7b1336", "src": "hda", "uuid": "6924ba53-34a6-41bb-9e24-7e2b57fb5084"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/4/e/dataset_94e0cd4a-2b10-4426-8ff4-84bcd2db685e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 4 of 15\nGetting block 3 of 15\n  Reserving size (1554) for bucket 4\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\nGetting block 8 of 15\n  Reserving size (1554) for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/4/e/dataset_94e0cd4a-2b10-4426-8ff4-84bcd2db685e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 4 of 15\nGetting block 3 of 15\n  Reserving size (1554) for bucket 4\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\nGetting block 8 of 15\n  Reserving size (1554) for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:23:06", "plugin": "core", "name": "start_epoch", "raw_value": "1618672986.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:23:07", "plugin": "core", "name": "end_epoch", "raw_value": "1618672987.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 60.14989519119263, "inputs": {"library|input_1": {"src": "hda", "id": "495d98170570265d"}, "library|input_2": {"src": "hda", "id": "1a1ebf446b35d826"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ae42aa3ea9f1a7ae"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "e09d29ac0c9ec210", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:23:41.654112", "create_time": "2021-04-17T15:23:28.154906", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-7qwpr", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat' genome && ln -s -f '/galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/0/a/4/dataset_0a494638-eb97-4ca4-8928-d1df5fc153cf.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/6/1/9/dataset_61962c81-2281-4cbe-8a59-a5dbb84f1c4b.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/d/8/1/dataset_d8109daf-bcc2-4b79-9136-eab4bd18dae1.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 64, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 62, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "495d98170570265d", "src": "hda", "uuid": "0a494638-eb97-4ca4-8928-d1df5fc153cf"}, "input_2": {"id": "1a1ebf446b35d826", "src": "hda", "uuid": "61962c81-2281-4cbe-8a59-a5dbb84f1c4b"}, "own_file": {"id": "ae42aa3ea9f1a7ae", "src": "hda", "uuid": "31442a0b-8af2-4442-a94e-de536fe5cde0"}}, "outputs": {"output": {"id": "d89161155961274f", "src": "hda", "uuid": "d8109daf-bcc2-4b79-9136-eab4bd18dae1"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\nGetting block 12 of 15\n  Reserving size (1554) for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\nGetting block 4 of 15\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\nGetting block 12 of 15\n  Reserving size (1554) for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\nGetting block 6 of 15\n  Calculating Z arrays for bucket 5\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 5: 30%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\nGetting block 8 of 15\n  Calculating Z arrays for bucket 7\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 15\n  Reserving size (1554) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:23:40", "plugin": "core", "name": "end_epoch", "raw_value": "1618673020.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:23:40", "plugin": "core", "name": "start_epoch", "raw_value": "1618673020.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 59.727620124816895, "inputs": {"library|input_1": {"src": "hda", "id": "495d98170570265d"}, "library|input_2": {"src": "hda", "id": "1a1ebf446b35d826"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ae42aa3ea9f1a7ae"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "8878df93f583e82f", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:23:39.758650", "create_time": "2021-04-17T15:23:28.151197", "galaxy_version": "20.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "d1d58ad692afe07e", "external_id": "gxy-l29bm", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat' genome && ln -s -f '/galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/0/a/4/dataset_0a494638-eb97-4ca4-8928-d1df5fc153cf.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/6/1/9/dataset_61962c81-2281-4cbe-8a59-a5dbb84f1c4b.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/5/3/2/dataset_532c9a17-8fe4-4d1c-bc2e-bfa2e5608f7b.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 64, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 62, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "495d98170570265d", "src": "hda", "uuid": "0a494638-eb97-4ca4-8928-d1df5fc153cf"}, "input_2": {"id": "1a1ebf446b35d826", "src": "hda", "uuid": "61962c81-2281-4cbe-8a59-a5dbb84f1c4b"}, "own_file": {"id": "ae42aa3ea9f1a7ae", "src": "hda", "uuid": "31442a0b-8af2-4442-a94e-de536fe5cde0"}}, "outputs": {"output": {"id": "7c58475ee7555de4", "src": "hda", "uuid": "532c9a17-8fe4-4d1c-bc2e-bfa2e5608f7b"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 10%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 2 of 15\nGetting block 1 of 15\n  Reserving size (1554) for bucket 2\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 8 of 15\nGetting block 7 of 15\n  Reserving size (1554) for bucket 8\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\nGetting block 10 of 15\n  Reserving size (1554) for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 8\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/1/4/dataset_31442a0b-8af2-4442-a94e-de536fe5cde0.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 15\n  Reserving size (1554) for bucket 1\nGetting block 2 of 15\n  Calculating Z arrays for bucket 1\n  Reserving size (1554) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 1407 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 849 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1408 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 850 for bucket 2\nGetting block 3 of 15\nGetting block 4 of 15\n  Reserving size (1554) for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1478 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 1052 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1053 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1479 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 546 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 5\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 1246 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1247 for bucket 6\nGetting block 7 of 15\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 1386 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1387 for bucket 7\nGetting block 8 of 15\n  Reserving size (1554) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 543 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 8\nGetting block 9 of 15\n  Reserving size (1554) for bucket 9\nGetting block 10 of 15\n  Calculating Z arrays for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 681 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 1302 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 682 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 1303 for bucket 9\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\nGetting block 12 of 15\n  Calculating Z arrays for bucket 11\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 1077 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 716 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 1078 for bucket 11\nReturning block of 717 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\nGetting block 14 of 15\n  Calculating Z arrays for bucket 13\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 10%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 14: 40%\n  bucket 13: 30%\n  bucket 14: 50%\n  bucket 13: 40%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 1255 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1488 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1256 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 1489 for bucket 13\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1528 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1529 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 2071\nUsing parameters --bmax 1554 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1554 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 22 sample suffixes\nGenerating random suffixes\nQSorting 22 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 22 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 10; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 1103.6 (target: 1553)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 2 of 15\nGetting block 1 of 15\n  Reserving size (1554) for bucket 2\n  Reserving size (1554) for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 1: 100%\n  Sorting block of length 389 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 1283 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 390 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 1284 for bucket 2\nGetting block 3 of 15\n  Reserving size (1554) for bucket 3\nGetting block 4 of 15\n  Calculating Z arrays for bucket 3\n  Reserving size (1554) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 1229 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 1201 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1230 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 1202 for bucket 4\nGetting block 5 of 15\n  Reserving size (1554) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 15\n  Reserving size (1554) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 1530 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 481 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 482 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 1531 for bucket 5\nGetting block 8 of 15\nGetting block 7 of 15\n  Reserving size (1554) for bucket 8\n  Reserving size (1554) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 1495 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 1179 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1496 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 1180 for bucket 8\nGetting block 9 of 15\nGetting block 10 of 15\n  Reserving size (1554) for bucket 9\n  Reserving size (1554) for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 1339 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 1340 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 938 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 939 for bucket 10\nGetting block 11 of 15\n  Reserving size (1554) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 1105 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1106 for bucket 11\nGetting block 12 of 15\n  Reserving size (1554) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 990 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 991 for bucket 12\nGetting block 13 of 15\n  Reserving size (1554) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 1169 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1170 for bucket 13\nGetting block 14 of 15\n  Reserving size (1554) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 966 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 967 for bucket 14\nGetting block 15 of 15\n  Reserving size (1554) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 1260 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 1261 for bucket 15\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:23:36", "plugin": "core", "name": "end_epoch", "raw_value": "1618673016.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:23:36", "plugin": "core", "name": "start_epoch", "raw_value": "1618673016.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 33.87677001953125, "inputs": {"source|target": {"src": "hda", "id": "2e20ad4969f777c9"}, "source|ref_source": "history", "query": {"src": "hda", "id": "4657f76ab63d1604"}}, "job": {"model_class": "Job", "id": "6b21c9f1b0f3db3f", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:24:31.655384", "create_time": "2021-04-17T15:24:09.398594", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "d1d58ad692afe07e", "external_id": "gxy-n5gp4", "command_line": "lastz_D  '/galaxy/server/database/objects/7/3/e/dataset_73e8b92b-f774-4247-9dad-150bcb457bd1.dat'    '/galaxy/server/database/objects/c/3/2/dataset_c3290438-724a-4c39-88f6-8b35a8d3a6b0.dat'   --inferonly '--infscores=/galaxy/server/database/objects/3/d/2/dataset_3d263781-ec95-442c-983e-7a5e3900c6c7.dat'", "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "score_file": "null", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 78, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "2e20ad4969f777c9", "src": "hda", "uuid": "73e8b92b-f774-4247-9dad-150bcb457bd1"}, "query": {"id": "4657f76ab63d1604", "src": "hda", "uuid": "c3290438-724a-4c39-88f6-8b35a8d3a6b0"}}, "outputs": {"output": {"id": "b07ff93682454d24", "src": "hda", "uuid": "3d263781-ec95-442c-983e-7a5e3900c6c7"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:24:30", "plugin": "core", "name": "end_epoch", "raw_value": "1618673070.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:24:30", "plugin": "core", "name": "start_epoch", "raw_value": "1618673070.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 31.443899393081665, "inputs": {"source|target": {"src": "hda", "id": "2e20ad4969f777c9"}, "source|ref_source": "history", "query": {"src": "hda", "id": "4657f76ab63d1604"}, "score_file": {"src": "hda", "id": "6b21c9f1b0f3db3f"}}, "job": {"model_class": "Job", "id": "2fa53dae68bd55f7", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:24:33.736457", "create_time": "2021-04-17T15:24:20.134093", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "d1d58ad692afe07e", "external_id": "gxy-ppznd", "command_line": "lastz_D  '/galaxy/server/database/objects/7/3/e/dataset_73e8b92b-f774-4247-9dad-150bcb457bd1.dat'    '/galaxy/server/database/objects/c/3/2/dataset_c3290438-724a-4c39-88f6-8b35a8d3a6b0.dat'   '--inferonly=/galaxy/server/database/objects/d/b/3/dataset_db3d0cc3-e222-4d07-b124-11c2d4ca1c42.dat' '--infscores=/galaxy/server/database/objects/6/2/8/dataset_628252bd-173c-41bc-9018-2c8acddeaae7.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 78, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "2e20ad4969f777c9", "src": "hda", "uuid": "73e8b92b-f774-4247-9dad-150bcb457bd1"}, "query": {"id": "4657f76ab63d1604", "src": "hda", "uuid": "c3290438-724a-4c39-88f6-8b35a8d3a6b0"}, "score_file": {"id": "6b21c9f1b0f3db3f", "src": "hda", "uuid": "db3d0cc3-e222-4d07-b124-11c2d4ca1c42"}}, "outputs": {"output": {"id": "ed5be05b740d108f", "src": "hda", "uuid": "628252bd-173c-41bc-9018-2c8acddeaae7"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:24:30", "plugin": "core", "name": "end_epoch", "raw_value": "1618673070.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:24:30", "plugin": "core", "name": "start_epoch", "raw_value": "1618673070.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "tool_version": "0.2.2", "test_index": 0, "time_seconds": 55.08935761451721, "inputs": {"referenceSource|reference": {"src": "hda", "id": "165224226147492b"}, "single_or_paired|input_mate1": {"src": "hda", "id": "4635e27052657dd3"}, "single_or_paired|input_mate2": {"src": "hda", "id": "3afdc7288930b958"}, "single_or_paired|single_or_paired_opts": "paired"}, "job": {"model_class": "Job", "id": "165224226147492b", "state": "error", "exit_code": 1, "update_time": "2021-04-17T15:23:57.785049", "create_time": "2021-04-17T15:23:32.473701", "galaxy_version": "20.09", "command_version": "bwa-meth.py 0.2.2\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "d1d58ad692afe07e", "external_id": "gxy-ngqsr", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/f/5/3/dataset_f53b797f-e5e3-49f7-9c7d-3828a5f13fc9.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -f -s '/galaxy/server/database/objects/6/7/e/dataset_67e65350-26c0-4367-9877-bb84a66c8f7e.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/0/b/6/dataset_0b6aef0a-9e72-497e-be6c-b15b295a4bbd.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 71, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "165224226147492b", "src": "hda", "uuid": "f53b797f-e5e3-49f7-9c7d-3828a5f13fc9"}, "input_mate1": {"id": "4635e27052657dd3", "src": "hda", "uuid": "67e65350-26c0-4367-9877-bb84a66c8f7e"}, "input_mate2": {"id": "3afdc7288930b958", "src": "hda", "uuid": "0b6aef0a-9e72-497e-be6c-b15b295a4bbd"}}, "outputs": {"output": {"id": "84f7766f68c3bf44", "src": "hda", "uuid": "81b83e1d-f9a3-4d4d-988d-34dce6718b1c"}}, "tool_stdout": "", "tool_stderr": "converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in <module>\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in <genexpr>\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \">\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\n", "job_stdout": "", "job_stderr": "", "stderr": "converting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nTraceback (most recent call last):\n  File \"/usr/local/bin/bwameth.py\", line 509, in <module>\n    main(sys.argv[1:])\n  File \"/usr/local/bin/bwameth.py\", line 470, in main\n    sys.exit(bwa_index(convert_fasta(args[1])))\n  File \"/usr/local/bin/bwameth.py\", line 179, in convert_fasta\n    for header, seq in fasta_iter(ref_fasta):\n  File \"/usr/local/bin/bwameth.py\", line 91, in fasta_iter\n    for header in faiter:\n  File \"/usr/local/bin/bwameth.py\", line 90, in <genexpr>\n    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == \">\"))\n  File \"/usr/local/lib/python3.8/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\n", "stdout": "", "job_messages": [{"code_desc": "", "desc": "Fatal error: Exit code 1 ()", "error_level": 3, "exit_code": 1, "type": "exit_code"}, {"code_desc": "", "desc": "Fatal error: ", "error_level": 3, "match": "Error:", "stream": "stderr", "type": "regex"}], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:23:55", "plugin": "core", "name": "end_epoch", "raw_value": "1618673035.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:23:55", "plugin": "core", "name": "start_epoch", "raw_value": "1618673035.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Job in error state.", "Job in error state."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "tool_version": "0.2.2", "test_index": 1, "time_seconds": 50.36373496055603, "inputs": {"referenceSource|reference": {"src": "hda", "id": "165224226147492b"}, "single_or_paired|input_mate1": {"src": "hdca", "id": "4cba7a8317a33d3b"}, "single_or_paired|single_or_paired_opts": "paired_collection"}, "job": {"model_class": "Job", "id": "3afdc7288930b958", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:24:15.640193", "create_time": "2021-04-17T15:23:58.372075", "galaxy_version": "20.09", "command_version": "bwa-meth.py 0.2.2\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "d1d58ad692afe07e", "external_id": "gxy-dscrl", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/0/e/a/dataset_0ea4f846-a137-4914-bd98-b2dfc79e7023.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -s '/galaxy/server/database/objects/6/7/e/dataset_67e65350-26c0-4367-9877-bb84a66c8f7e.dat' input_f.fastq.gz &&  ln -s '/galaxy/server/database/objects/0/b/6/dataset_0b6aef0a-9e72-497e-be6c-b15b295a4bbd.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 74, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "76d5dfac5576ae1f", "src": "hda", "uuid": "0ea4f846-a137-4914-bd98-b2dfc79e7023"}, "input_mate11": {"id": "3afdc7288930b958", "src": "hda", "uuid": "0b6aef0a-9e72-497e-be6c-b15b295a4bbd"}, "input_mate12": {"id": "4635e27052657dd3", "src": "hda", "uuid": "67e65350-26c0-4367-9877-bb84a66c8f7e"}}, "outputs": {"output": {"id": "2b258c9dceb405b4", "src": "hda", "uuid": "99111244-34e4-4a33-ad24-a60219bc55a4"}}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.83 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.22 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.204 sec; CPU: 1.098 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.034 CPU sec, 0.018 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.126 sec; CPU: 0.043 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.02 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.83 seconds elapse.\n[bwa_index] Update BWT... 0.03 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.22 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 1.204 sec; CPU: 1.098 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.034 CPU sec, 0.018 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.126 sec; CPU: 0.043 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:24:13", "plugin": "core", "name": "end_epoch", "raw_value": "1618673053.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:24:12", "plugin": "core", "name": "start_epoch", "raw_value": "1618673052.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 0, "time_seconds": 27.9622642993927, "inputs": {"reads": {"src": "hda", "id": "7d715d0bd5c5f21f"}, "reference_source|ref": {"src": "hda", "id": "53112d65231f7ef3"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "38a1f1a9594acff6", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:26:35.344971", "create_time": "2021-04-17T15:26:16.598075", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-txvhw", "command_line": "ln -s '/galaxy/server/database/objects/5/1/4/dataset_514d33e6-d31e-4288-89d2-054505d5c7ee.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/1/f/0/dataset_1f0e2c65-b622-4632-a806-621c3c81b16a.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/e/a/5/metadata_ea55d685-b1b4-4f34-938c-d7c8e94ee9c6.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 142, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "7d715d0bd5c5f21f", "src": "hda", "uuid": "1f0e2c65-b622-4632-a806-621c3c81b16a"}, "ref": {"id": "53112d65231f7ef3", "src": "hda", "uuid": "514d33e6-d31e-4288-89d2-054505d5c7ee"}}, "outputs": {"variants": {"id": "24ba48db3827c11c", "src": "hda", "uuid": "422391e3-75eb-4c67-b81f-ebf15944cd91"}}, "tool_stdout": "INFO [2021-04-17 15:26:29,986]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-17 15:26:30,001]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:26:33,218]: Executing lofreq filter -i /tmp/lofreq2_call_parallel9bxmzt3j/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-17 15:26:29,986]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-17 15:26:30,001]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:26:33,218]: Executing lofreq filter -i /tmp/lofreq2_call_parallel9bxmzt3j/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:26:33", "plugin": "core", "name": "end_epoch", "raw_value": "1618673193.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:26:29", "plugin": "core", "name": "start_epoch", "raw_value": "1618673189.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 1, "time_seconds": 24.214664697647095, "inputs": {"reads": {"src": "hda", "id": "b02027e50741df76"}, "reference_source|ref": {"src": "hda", "id": "a1138cb2e7c222c5"}, "reference_source|ref_selector": "history", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "1a6386013c077f52", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:26:46.048110", "create_time": "2021-04-17T15:26:32.698641", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-r56j5", "command_line": "ln -s '/galaxy/server/database/objects/d/4/0/dataset_d4028521-8232-45b8-908e-698d25009568.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/d/8/0/dataset_d8091710-68ae-4547-a661-ecc0b06c5438.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/1/e/5/metadata_1e55e60c-5493-4efc-8cd9-cda058e81e42.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 0, \"src_qual\": \"\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 145, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "b02027e50741df76", "src": "hda", "uuid": "d8091710-68ae-4547-a661-ecc0b06c5438"}, "ref": {"id": "a1138cb2e7c222c5", "src": "hda", "uuid": "d4028521-8232-45b8-908e-698d25009568"}}, "outputs": {"variants": {"id": "02ddbf087d1724a7", "src": "hda", "uuid": "288d7738-d7ba-440e-8fe5-8606ddea8a51"}}, "tool_stdout": "INFO [2021-04-17 15:26:40,283]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-17 15:26:40,298]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:26:44,180]: Executing lofreq filter -i /tmp/lofreq2_call_parallel1uzg2xwf/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-17 15:26:40,283]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-17 15:26:40,298]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:26:44,180]: Executing lofreq filter -i /tmp/lofreq2_call_parallel1uzg2xwf/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:26:44", "plugin": "core", "name": "end_epoch", "raw_value": "1618673204.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:26:40", "plugin": "core", "name": "start_epoch", "raw_value": "1618673200.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 2, "time_seconds": 36.62487769126892, "inputs": {"reads": {"src": "hda", "id": "13dc923baff4eaae"}, "reference_source|ref": {"src": "hda", "id": "0cc7b6403eab010e"}, "reference_source|ref_selector": "history", "call_control|source_qual|use_src_qual|def_nm_q": "40", "call_control|source_qual|use_src_qual|ign_vcf": {"src": "hda", "id": "4e40abcd344bf536"}, "call_control|source_qual|use_src_qual|src_qual": "--src-qual", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "b666e253bcc36cf0", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:27:12.157104", "create_time": "2021-04-17T15:26:50.615235", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-j46c5", "command_line": "ln -s '/galaxy/server/database/objects/5/6/a/dataset_56a6f1cc-a19d-4b7c-b3e9-0b524de71402.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/7/a/0/dataset_7a002cbb-3c83-41e8-b6ae-9b65b17066a0.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/3/7/c/metadata_37ce644f-2803-4042-b7e0-c53746002a23.dat' reads.bam.bai && ln -s '/galaxy/server/database/objects/d/6/a/dataset_d6a0a5ab-a9d4-4bf0-b31a-26113840394b.dat' ign0.vcf &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --src-qual --ign-vcf 'ign0.vcf' --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 1, \"def_nm_q\": \"40\", \"ign_vcf\": {\"values\": [{\"id\": 149, \"src\": \"hda\"}]}, \"src_qual\": \"--src-qual\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "13dc923baff4eaae", "src": "hda", "uuid": "7a002cbb-3c83-41e8-b6ae-9b65b17066a0"}, "ref": {"id": "0cc7b6403eab010e", "src": "hda", "uuid": "56a6f1cc-a19d-4b7c-b3e9-0b524de71402"}, "call_control|source_qual|ign_vcf": {"id": "4e40abcd344bf536", "src": "hda", "uuid": "d6a0a5ab-a9d4-4bf0-b31a-26113840394b"}}, "outputs": {"variants": {"id": "5ff0e42516c3f068", "src": "hda", "uuid": "e651920a-8543-441d-9d00-79bfaddca578"}}, "tool_stdout": "INFO [2021-04-17 15:27:06,078]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-17 15:27:06,092]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:27:09,757]: Executing lofreq filter -i /tmp/lofreq2_call_parallelu5pyi902/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-17 15:27:06,078]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2021-04-17 15:27:06,092]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:27:09,757]: Executing lofreq filter -i /tmp/lofreq2_call_parallelu5pyi902/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:27:09", "plugin": "core", "name": "end_epoch", "raw_value": "1618673229.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:27:05", "plugin": "core", "name": "start_epoch", "raw_value": "1618673225.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 3, "time_seconds": 44.08112335205078, "inputs": {"reads": {"src": "hda", "id": "13dc923baff4eaae"}, "reference_source|ref": {"src": "hda", "id": "0cc7b6403eab010e"}, "reference_source|ref_selector": "history", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "e263f094c2d94e8c", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:27:21.323435", "create_time": "2021-04-17T15:27:02.088715", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-6g7rz", "command_line": "ln -s '/galaxy/server/database/objects/5/6/a/dataset_56a6f1cc-a19d-4b7c-b3e9-0b524de71402.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/7/a/0/dataset_7a002cbb-3c83-41e8-b6ae-9b65b17066a0.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/3/7/c/metadata_37ce644f-2803-4042-b7e0-c53746002a23.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "13dc923baff4eaae", "src": "hda", "uuid": "7a002cbb-3c83-41e8-b6ae-9b65b17066a0"}, "ref": {"id": "0cc7b6403eab010e", "src": "hda", "uuid": "56a6f1cc-a19d-4b7c-b3e9-0b524de71402"}}, "outputs": {"variants": {"id": "b9366e43fe27515d", "src": "hda", "uuid": "08cfac59-bbf6-447f-b5d9-fa7e6597f6d2"}}, "tool_stdout": "INFO [2021-04-17 15:27:17,242]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-17 15:27:17,255]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:27:20,385]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-17 15:27:17,242]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-17 15:27:17,255]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2021-04-17 15:27:20,385]: Copying concatenated vcf file to final destination\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:27:20", "plugin": "core", "name": "end_epoch", "raw_value": "1618673240.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:27:17", "plugin": "core", "name": "start_epoch", "raw_value": "1618673237.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "tool_version": "2.1.5+galaxy1", "test_index": 4, "time_seconds": 32.09046006202698, "inputs": {"reads": {"src": "hda", "id": "c60af6404254825d"}, "reference_source|ref": {"src": "hda", "id": "0cc7b6403eab010e"}, "reference_source|ref_selector": "history", "variant_types": "--call-indels --only-indels", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "32d93da2391a280a", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:27:18.284182", "create_time": "2021-04-17T15:27:02.189953", "galaxy_version": "20.09", "command_version": "2.1.5\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-fssd7", "command_line": "ln -s '/galaxy/server/database/objects/5/6/a/dataset_56a6f1cc-a19d-4b7c-b3e9-0b524de71402.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/8/b/8/dataset_8b82fa7d-98a6-47b3-b0dc-683e77ed7c9d.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/6/1/6/metadata_616406be-263f-446e-95d7-7202ee7dc7a5.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf --call-indels --only-indels    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"--call-indels --only-indels\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "c60af6404254825d", "src": "hda", "uuid": "8b82fa7d-98a6-47b3-b0dc-683e77ed7c9d"}, "ref": {"id": "0cc7b6403eab010e", "src": "hda", "uuid": "56a6f1cc-a19d-4b7c-b3e9-0b524de71402"}}, "outputs": {"variants": {"id": "2b1b28190307685e", "src": "hda", "uuid": "cf6155b5-c7a7-4852-a75e-ac022a682d07"}}, "tool_stdout": "INFO [2021-04-17 15:27:11,795]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-17 15:27:11,811]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2021-04-17 15:27:16,954]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2021-04-17 15:27:11,795]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2021-04-17 15:27:11,811]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2021-04-17 15:27:16,954]: Copying concatenated vcf file to final destination\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "6 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "6.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:27:17", "plugin": "core", "name": "end_epoch", "raw_value": "1618673237.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:27:11", "plugin": "core", "name": "start_epoch", "raw_value": "1618673231.0000000"}, {"title": "Memory Allocated (MB)", "value": "2147", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2147.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 45.67571520805359, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "1be2baba927b3c6e"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "93734620591257e5"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "ed8ab6ddb9fe12af", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:20:34.158533", "create_time": "2021-04-17T15:20:20.129704", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-8jhsp", "command_line": "ln -f -s '/galaxy/server/database/objects/8/0/7/dataset_8079b079-fa25-47ac-9962-a7580f38b33b.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/7/6/b/dataset_76b871bf-531b-4477-9712-d218c5fb9e15.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/6/8/f/dataset_68ff9c05-6e27-43d7-b374-a15a07d6db9e.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"fastq_input1": {"id": "93734620591257e5", "src": "hda", "uuid": "76b871bf-531b-4477-9712-d218c5fb9e15"}, "ref_file": {"id": "1be2baba927b3c6e", "src": "hda", "uuid": "8079b079-fa25-47ac-9962-a7580f38b33b"}}, "outputs": {"alignment_output": {"id": "ed8ab6ddb9fe12af", "src": "hda", "uuid": "68ff9c05-6e27-43d7-b374-a15a07d6db9e"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.95] collected minimizers\n[M::mm_idx_gen::0.005*1.19] sorted minimizers\n[M::main::0.006*1.19] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.19] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.18] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.010*1.25] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/6/b/dataset_76b871bf-531b-4477-9712-d218c5fb9e15.dat\n[M::main] Real time: 0.011 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*0.95] collected minimizers\n[M::mm_idx_gen::0.005*1.19] sorted minimizers\n[M::main::0.006*1.19] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.19] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.18] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.010*1.25] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/6/b/dataset_76b871bf-531b-4477-9712-d218c5fb9e15.dat\n[M::main] Real time: 0.011 sec; CPU: 0.014 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:20:31", "plugin": "core", "name": "end_epoch", "raw_value": "1618672831.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:20:31", "plugin": "core", "name": "start_epoch", "raw_value": "1618672831.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 45.32378387451172, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "1be2baba927b3c6e"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "93734620591257e5"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "CRAM"}, "job": {"model_class": "Job", "id": "0dc1252513aedd05", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:20:33.108021", "create_time": "2021-04-17T15:20:20.460337", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-rrvm7", "command_line": "ln -f -s '/galaxy/server/database/objects/8/0/7/dataset_8079b079-fa25-47ac-9962-a7580f38b33b.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/7/6/b/dataset_76b871bf-531b-4477-9712-d218c5fb9e15.dat' -a | samtools sort -T \"${TMPDIR:-.}\" -@${GALAXY_SLOTS:-2} -O CRAM  --reference reference.fa --output-fmt-option no_ref -o '/galaxy/server/database/objects/1/c/b/dataset_1cb98162-12cf-4cf7-8d5b-4afd5cfea3d3.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"CRAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"fastq_input1": {"id": "93734620591257e5", "src": "hda", "uuid": "76b871bf-531b-4477-9712-d218c5fb9e15"}, "ref_file": {"id": "1be2baba927b3c6e", "src": "hda", "uuid": "8079b079-fa25-47ac-9962-a7580f38b33b"}}, "outputs": {"alignment_output": {"id": "0dc1252513aedd05", "src": "hda", "uuid": "1cb98162-12cf-4cf7-8d5b-4afd5cfea3d3"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.96] collected minimizers\n[M::mm_idx_gen::0.004*1.23] sorted minimizers\n[M::main::0.004*1.23] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.23] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.22] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.007*1.22] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/6/b/dataset_76b871bf-531b-4477-9712-d218c5fb9e15.dat\n[M::main] Real time: 0.009 sec; CPU: 0.010 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*0.96] collected minimizers\n[M::mm_idx_gen::0.004*1.23] sorted minimizers\n[M::main::0.004*1.23] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.23] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.22] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.007*1.22] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/7/6/b/dataset_76b871bf-531b-4477-9712-d218c5fb9e15.dat\n[M::main] Real time: 0.009 sec; CPU: 0.010 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:20:31", "plugin": "core", "name": "end_epoch", "raw_value": "1618672831.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:20:31", "plugin": "core", "name": "start_epoch", "raw_value": "1618672831.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 54.419618129730225, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "1be2baba927b3c6e"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "b9be34ef182b2e2a"}, "fastq_input|fastq_input2": {"src": "hda", "id": "72f4dd9477358459"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "f99ca7b0378604ee", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:20:43.041878", "create_time": "2021-04-17T15:20:26.013229", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-nt2d7", "command_line": "ln -f -s '/galaxy/server/database/objects/8/0/7/dataset_8079b079-fa25-47ac-9962-a7580f38b33b.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/5/1/1/dataset_511819ab-72b0-465c-9cb8-a4e3b922ad99.dat' '/galaxy/server/database/objects/e/6/4/dataset_e64b6cd6-3839-488f-94cb-f1f8b9ca4662.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/0/8/c/dataset_08cbacae-433b-408d-8e8f-79cd6702c1ab.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 6, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 10, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"fastq_input2": {"id": "72f4dd9477358459", "src": "hda", "uuid": "e64b6cd6-3839-488f-94cb-f1f8b9ca4662"}, "fastq_input1": {"id": "b9be34ef182b2e2a", "src": "hda", "uuid": "511819ab-72b0-465c-9cb8-a4e3b922ad99"}, "ref_file": {"id": "1be2baba927b3c6e", "src": "hda", "uuid": "8079b079-fa25-47ac-9962-a7580f38b33b"}}, "outputs": {"alignment_output": {"id": "f99ca7b0378604ee", "src": "hda", "uuid": "08cbacae-433b-408d-8e8f-79cd6702c1ab"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*1.02] collected minimizers\n[M::mm_idx_gen::0.005*1.26] sorted minimizers\n[M::main::0.005*1.26] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.26] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.25] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.020*1.41] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/5/1/1/dataset_511819ab-72b0-465c-9cb8-a4e3b922ad99.dat /galaxy/server/database/objects/e/6/4/dataset_e64b6cd6-3839-488f-94cb-f1f8b9ca4662.dat\n[M::main] Real time: 0.022 sec; CPU: 0.029 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*1.02] collected minimizers\n[M::mm_idx_gen::0.005*1.26] sorted minimizers\n[M::main::0.005*1.26] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.26] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.25] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.020*1.41] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/5/1/1/dataset_511819ab-72b0-465c-9cb8-a4e3b922ad99.dat /galaxy/server/database/objects/e/6/4/dataset_e64b6cd6-3839-488f-94cb-f1f8b9ca4662.dat\n[M::main] Real time: 0.022 sec; CPU: 0.029 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:20:41", "plugin": "core", "name": "end_epoch", "raw_value": "1618672841.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:20:41", "plugin": "core", "name": "start_epoch", "raw_value": "1618672841.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 54.30395555496216, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "1be2baba927b3c6e"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "437c9e2d250468ee"}, "fastq_input|fastq_input2": {"src": "hda", "id": "72f4dd9477358459"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "d6da659baaf8f327", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:20:42.422736", "create_time": "2021-04-17T15:20:25.673407", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-mbfnp", "command_line": "ln -f -s '/galaxy/server/database/objects/8/0/7/dataset_8079b079-fa25-47ac-9962-a7580f38b33b.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/2/0/e/dataset_20ee6f63-14e6-4986-a68d-6e7c13a25666.dat' '/galaxy/server/database/objects/e/6/4/dataset_e64b6cd6-3839-488f-94cb-f1f8b9ca4662.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/4/5/6/dataset_45629327-b7f9-4d6c-956f-590ab6ee917c.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 10, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 4, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"fastq_input2": {"id": "72f4dd9477358459", "src": "hda", "uuid": "e64b6cd6-3839-488f-94cb-f1f8b9ca4662"}, "fastq_input1": {"id": "437c9e2d250468ee", "src": "hda", "uuid": "20ee6f63-14e6-4986-a68d-6e7c13a25666"}, "ref_file": {"id": "1be2baba927b3c6e", "src": "hda", "uuid": "8079b079-fa25-47ac-9962-a7580f38b33b"}}, "outputs": {"alignment_output": {"id": "d6da659baaf8f327", "src": "hda", "uuid": "45629327-b7f9-4d6c-956f-590ab6ee917c"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.94] collected minimizers\n[M::mm_idx_gen::0.005*1.16] sorted minimizers\n[M::main::0.005*1.16] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.16] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.15] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.36] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/2/0/e/dataset_20ee6f63-14e6-4986-a68d-6e7c13a25666.dat /galaxy/server/database/objects/e/6/4/dataset_e64b6cd6-3839-488f-94cb-f1f8b9ca4662.dat\n[M::main] Real time: 0.019 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.003*0.94] collected minimizers\n[M::mm_idx_gen::0.005*1.16] sorted minimizers\n[M::main::0.005*1.16] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.16] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.15] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.017*1.36] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/2/0/e/dataset_20ee6f63-14e6-4986-a68d-6e7c13a25666.dat /galaxy/server/database/objects/e/6/4/dataset_e64b6cd6-3839-488f-94cb-f1f8b9ca4662.dat\n[M::main] Real time: 0.019 sec; CPU: 0.025 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2021-04-17 15:20:38", "plugin": "core", "name": "end_epoch", "raw_value": "1618672838.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:20:38", "plugin": "core", "name": "start_epoch", "raw_value": "1618672838.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 31.457385063171387, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "64b750a2f0bc144d"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hdca", "id": "d1d58ad692afe07e"}, "fastq_input|fastq_input_selector": "paired_collection"}, "job": {"model_class": "Job", "id": "91129039a8e4b5fc", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:21:04.923818", "create_time": "2021-04-17T15:20:54.426299", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-qmw7k", "command_line": "ln -f -s '/galaxy/server/database/objects/d/6/e/dataset_d6e7a17c-ad58-4213-92d0-9c6fb56f91a9.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/2/f/1/dataset_2f159d21-648b-4258-bb42-4b349fe09b5d.dat' '/galaxy/server/database/objects/6/7/c/dataset_67c9ce6f-84f2-45f6-916f-2dc6fed6e204.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/f/5/0/dataset_f50d3b33-b5b0-4c3a-b7b2-d82f521c6167.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 15, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "64b750a2f0bc144d", "src": "hda", "uuid": "d6e7a17c-ad58-4213-92d0-9c6fb56f91a9"}, "fastq_input11": {"id": "9e642466fdd4db5e", "src": "hda", "uuid": "2f159d21-648b-4258-bb42-4b349fe09b5d"}, "fastq_input12": {"id": "c28e52772b21a84c", "src": "hda", "uuid": "67c9ce6f-84f2-45f6-916f-2dc6fed6e204"}}, "outputs": {"alignment_output": {"id": "91129039a8e4b5fc", "src": "hda", "uuid": "f50d3b33-b5b0-4c3a-b7b2-d82f521c6167"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*1.06] collected minimizers\n[M::mm_idx_gen::0.005*1.26] sorted minimizers\n[M::main::0.005*1.25] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.25] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.24] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.019*1.46] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/2/f/1/dataset_2f159d21-648b-4258-bb42-4b349fe09b5d.dat /galaxy/server/database/objects/6/7/c/dataset_67c9ce6f-84f2-45f6-916f-2dc6fed6e204.dat\n[M::main] Real time: 0.022 sec; CPU: 0.029 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.004*1.06] collected minimizers\n[M::mm_idx_gen::0.005*1.26] sorted minimizers\n[M::main::0.005*1.25] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.25] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.24] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.019*1.46] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 2 -a reference.fa /galaxy/server/database/objects/2/f/1/dataset_2f159d21-648b-4258-bb42-4b349fe09b5d.dat /galaxy/server/database/objects/6/7/c/dataset_67c9ce6f-84f2-45f6-916f-2dc6fed6e204.dat\n[M::main] Real time: 0.022 sec; CPU: 0.029 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:21:02", "plugin": "core", "name": "start_epoch", "raw_value": "1618672862.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:21:03", "plugin": "core", "name": "end_epoch", "raw_value": "1618672863.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 5, "time_seconds": 13.943482637405396, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "c2549a88a5e19717"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: oryLat1,rheMac3,monDom1,felCat4,Amel_4.5,AgamP3,taeGut2,mm9canon,priPac1,panTro4,galGal2canon,PhumU1,Hydra_JCVI,musFur1,ponAbe2,eschColi_O157H7_EC4115,eschColi_O157H7_TW14359,monDom4,Schizosaccharomyces_pombe_1.1,Tcas_3.0,fr2,ce10,burkPseu_K96243,hg19_rCRS_pUC18_phiX174,hg17,hg38female,hg17canon,nomLeu2,dp3,Xanthomonas_oryzae_KACC10331,gadMor1,susScr2,galGal4,tetNig2canon,rn6,eriEur1,caeRem4,mm7canon,Sscrofa9.58,ce3,papAnu2,gasAcu1,sacCer1,criGri1,sacCer2,otoGar1,cb3canon,eschColi_K12_W3110,Araly1,mm8,caeJap1,echTel1,droGri1,myoLuc2,mm9,droYak1,caeJap3,hg38canon,Bombyx_mori_p50T_2.0,equCab1,mm8canon,ce4,susScr1,tetNig1canon,bosTau5,bosTau7,danRer7,monDom5,Arabidopsis_thaliana_TAIR9,rn3,droSim1,caeJap4,hg_g1k_v37,pseuAeru_PA7,felCat3,ci2full,otoGar3,canFam2,mm10,nomLeu1,ce7,Spur_v2.6,rheMac2,strePneu_R6,hg38,canFam1,triCas2,pUC18,latCha1,ce6,bosTau8,eschColi_O157H7_EDL933,equCab2,susScr3,dasNov3,burkPseu_1710B,strPur2,sacCer3,eschColi_APEC_O1,danRer4,anoGam1,chrPic1,droGri2,burkPseu_1106A,papHam1,caeRem2,taeGut1canon,cavPor3,danRer2,droMoj1,hg18,panTro2canon,panTro3full,xenTro2,felCat4canon,sarHar1,caePb3,bosTau4,eschColi_O157H7,geoFor1,ente638,saiBol1,danRer6,droSec1,melGal1,borEut13,oryCun1,panTro3canon,Ptrichocarpa_156,hg19chrM,braFlo1,danRer3,caeRem1,gorGor3,oryLat2,Xanthomonas_oryzae_MAFF_311018,dipOrd1,melUnd1,apiMel2,felCat8,vicPac1,CpipJ1,droMoj3,Arabidopsis_thaliana_TAIR10,oryCun2,lMaj5,hg18canon,anoCar2,droVir1,panTro1,calJac3canon,phiX,ailMel1,loxAfr3,rn3canon,hg19chrX,eschColi_K12_DH10B,droWil1,fr1,danRer5,galGal3canon,choHof1,anoCar1,hg19female,droVir3,pseuAeru_UCBPP_PA14,aptMan1,ce9,Xanthomonas_oryzae_PXO99A,rn4canon,dp4,hetGla1,xenTro1,droMoj2,dm6,galGal3,hg18nohaps,tetNig2,ci2canon,caePb1,eschColi_CFT073,allMis1,eschColi_K12,tupBel1,Zea_mays_B73_RefGen_v2,caeRem3,27835,calJac3,Tcacao_1.0,bordBron,caeJap2,droAna2,venter1,mm9female,panPan1,strPur3,apiMel1,hg19canon,bosTau2,droYak2,panTro1canon,droAna1,micMur1,speTri2,dm2,petMar1,taeGut1,danRer10,dasNov1,oviAri1,panTro2,canFam3,tarSyr1,equCab2chrM,droEre1,ce5,cb3full,vicPac2,apiMel4,burkPseu_668,bosTau3,xenTro3,Homo_sapiens_AK1,nomLeu3,ce2,baciSubt,droPer1,hg19,rn4,droEre2,turTru2,bosTau6,pseuAeru_PAO1,caePb2,droVir2,hg18chr21,calJac1,felCat5,bosTauMd3,apiMel3,AaegL1,mm7,tetNig1,cerSim1,rn5,oryza_sativa_japonica_nipponbare_IRGSP4.0,oryLat2canon,Homo_sapiens_nuHg19_mtrCRS,galGal2,IscaW1,aplCal1,ce8,loxAfr1,ornAna1,droAna3,sorAra1,dm3)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 6, "time_seconds": 12.9839928150177, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "c2549a88a5e19717"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "mapping_options|min_occ_floor": "1000", "alignment_options|A": "2", "alignment_options|B": "8", "alignment_options|O": "12", "alignment_options|O2": "32", "alignment_options|E": "2", "alignment_options|E2": "1", "alignment_options|z": "400", "alignment_options|s": "40"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: oryLat1,rheMac3,monDom1,felCat4,Amel_4.5,AgamP3,taeGut2,mm9canon,priPac1,panTro4,galGal2canon,PhumU1,Hydra_JCVI,musFur1,ponAbe2,eschColi_O157H7_EC4115,eschColi_O157H7_TW14359,monDom4,Schizosaccharomyces_pombe_1.1,Tcas_3.0,fr2,ce10,burkPseu_K96243,hg19_rCRS_pUC18_phiX174,hg17,hg38female,hg17canon,nomLeu2,dp3,Xanthomonas_oryzae_KACC10331,gadMor1,susScr2,galGal4,tetNig2canon,rn6,eriEur1,caeRem4,mm7canon,Sscrofa9.58,ce3,papAnu2,gasAcu1,sacCer1,criGri1,sacCer2,otoGar1,cb3canon,eschColi_K12_W3110,Araly1,mm8,caeJap1,echTel1,droGri1,myoLuc2,mm9,droYak1,caeJap3,hg38canon,Bombyx_mori_p50T_2.0,equCab1,mm8canon,ce4,susScr1,tetNig1canon,bosTau5,bosTau7,danRer7,monDom5,Arabidopsis_thaliana_TAIR9,rn3,droSim1,caeJap4,hg_g1k_v37,pseuAeru_PA7,felCat3,ci2full,otoGar3,canFam2,mm10,nomLeu1,ce7,Spur_v2.6,rheMac2,strePneu_R6,hg38,canFam1,triCas2,pUC18,latCha1,ce6,bosTau8,eschColi_O157H7_EDL933,equCab2,susScr3,dasNov3,burkPseu_1710B,strPur2,sacCer3,eschColi_APEC_O1,danRer4,anoGam1,chrPic1,droGri2,burkPseu_1106A,papHam1,caeRem2,taeGut1canon,cavPor3,danRer2,droMoj1,hg18,panTro2canon,panTro3full,xenTro2,felCat4canon,sarHar1,caePb3,bosTau4,eschColi_O157H7,geoFor1,ente638,saiBol1,danRer6,droSec1,melGal1,borEut13,oryCun1,panTro3canon,Ptrichocarpa_156,hg19chrM,braFlo1,danRer3,caeRem1,gorGor3,oryLat2,Xanthomonas_oryzae_MAFF_311018,dipOrd1,melUnd1,apiMel2,felCat8,vicPac1,CpipJ1,droMoj3,Arabidopsis_thaliana_TAIR10,oryCun2,lMaj5,hg18canon,anoCar2,droVir1,panTro1,calJac3canon,phiX,ailMel1,loxAfr3,rn3canon,hg19chrX,eschColi_K12_DH10B,droWil1,fr1,danRer5,galGal3canon,choHof1,anoCar1,hg19female,droVir3,pseuAeru_UCBPP_PA14,aptMan1,ce9,Xanthomonas_oryzae_PXO99A,rn4canon,dp4,hetGla1,xenTro1,droMoj2,dm6,galGal3,hg18nohaps,tetNig2,ci2canon,caePb1,eschColi_CFT073,allMis1,eschColi_K12,tupBel1,Zea_mays_B73_RefGen_v2,caeRem3,27835,calJac3,Tcacao_1.0,bordBron,caeJap2,droAna2,venter1,mm9female,panPan1,strPur3,apiMel1,hg19canon,bosTau2,droYak2,panTro1canon,droAna1,micMur1,speTri2,dm2,petMar1,taeGut1,danRer10,dasNov1,oviAri1,panTro2,canFam3,tarSyr1,equCab2chrM,droEre1,ce5,cb3full,vicPac2,apiMel4,burkPseu_668,bosTau3,xenTro3,Homo_sapiens_AK1,nomLeu3,ce2,baciSubt,droPer1,hg19,rn4,droEre2,turTru2,bosTau6,pseuAeru_PAO1,caePb2,droVir2,hg18chr21,calJac1,felCat5,bosTauMd3,apiMel3,AaegL1,mm7,tetNig1,cerSim1,rn5,oryza_sativa_japonica_nipponbare_IRGSP4.0,oryLat2canon,Homo_sapiens_nuHg19_mtrCRS,galGal2,IscaW1,aplCal1,ce8,loxAfr1,ornAna1,droAna3,sorAra1,dm3)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 31.491652011871338, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "f26b3f40d3a2f361"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "f26b3f40d3a2f361"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "d582569f8500ca51", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:21:14.418559", "create_time": "2021-04-17T15:21:02.264968", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-nx2n5", "command_line": "ln -f -s '/galaxy/server/database/objects/6/3/e/dataset_63ef96ab-8f7f-4d07-a027-0d35e9f78119.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/6/3/e/dataset_63ef96ab-8f7f-4d07-a027-0d35e9f78119.dat' > '/galaxy/server/database/objects/2/5/7/dataset_257b83da-3e8a-4372-a059-7867497f9cd7.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"paf\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 20, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "f26b3f40d3a2f361", "src": "hda", "uuid": "63ef96ab-8f7f-4d07-a027-0d35e9f78119"}, "fastq_input1": {"id": "f26b3f40d3a2f361", "src": "hda", "uuid": "63ef96ab-8f7f-4d07-a027-0d35e9f78119"}}, "outputs": {"alignment_output": {"id": "d582569f8500ca51", "src": "hda", "uuid": "257b83da-3e8a-4372-a059-7867497f9cd7"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.018*0.99] collected minimizers\n[M::mm_idx_gen::0.037*1.45] sorted minimizers\n[M::main::0.037*1.45] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.040*1.41] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.042*1.39] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.060*1.48] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/6/3/e/dataset_63ef96ab-8f7f-4d07-a027-0d35e9f78119.dat\n[M::main] Real time: 0.067 sec; CPU: 0.096 sec; Peak RSS: 0.009 GB\n", "stderr": "\n[M::mm_idx_gen::0.018*0.99] collected minimizers\n[M::mm_idx_gen::0.037*1.45] sorted minimizers\n[M::main::0.037*1.45] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.040*1.41] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.042*1.39] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.060*1.48] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 2 reference.fa /galaxy/server/database/objects/6/3/e/dataset_63ef96ab-8f7f-4d07-a027-0d35e9f78119.dat\n[M::main] Real time: 0.067 sec; CPU: 0.096 sec; Peak RSS: 0.009 GB\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:21:10", "plugin": "core", "name": "start_epoch", "raw_value": "1618672870.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:21:11", "plugin": "core", "name": "end_epoch", "raw_value": "1618672871.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 27.070531129837036, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "b7df4f2741851744"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "b7df4f2741851744"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "72f047700ba8dffe", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:21:15.233156", "create_time": "2021-04-17T15:21:02.946343", "galaxy_version": "20.09", "command_version": "2.17-r941\n", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "d1d58ad692afe07e", "external_id": "gxy-cv9ks", "command_line": "ln -f -s '/galaxy/server/database/objects/0/5/a/dataset_05aacce0-068b-4152-b56a-ab3dd613f7a2.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/0/5/a/dataset_05aacce0-068b-4152-b56a-ab3dd613f7a2.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/9/8/b/dataset_98be8728-a63f-46e7-9d86-abaade1ff32c.dat'", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "b7df4f2741851744", "src": "hda", "uuid": "05aacce0-068b-4152-b56a-ab3dd613f7a2"}, "fastq_input1": {"id": "b7df4f2741851744", "src": "hda", "uuid": "05aacce0-068b-4152-b56a-ab3dd613f7a2"}}, "outputs": {"alignment_output": {"id": "72f047700ba8dffe", "src": "hda", "uuid": "98be8728-a63f-46e7-9d86-abaade1ff32c"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*1.04] collected minimizers\n[M::mm_idx_gen::0.006*1.14] sorted minimizers\n[M::main::0.006*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.13] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*1.13] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.072*0.94] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/0/5/a/dataset_05aacce0-068b-4152-b56a-ab3dd613f7a2.dat\n[M::main] Real time: 0.073 sec; CPU: 0.068 sec; Peak RSS: 0.010 GB\n", "stderr": "\n[M::mm_idx_gen::0.004*1.04] collected minimizers\n[M::mm_idx_gen::0.006*1.14] sorted minimizers\n[M::main::0.006*1.14] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.13] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*1.13] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.072*0.94] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 2 -a reference.fa /galaxy/server/database/objects/0/5/a/dataset_05aacce0-068b-4152-b56a-ab3dd613f7a2.dat\n[M::main] Real time: 0.073 sec; CPU: 0.068 sec; Peak RSS: 0.010 GB\n", "stdout": "", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "17179", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "17179.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:21:13", "plugin": "core", "name": "start_epoch", "raw_value": "1618672873.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:21:13", "plugin": "core", "name": "end_epoch", "raw_value": "1618672873.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 0, "time_seconds": 58.35882925987244, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "2fa53dae68bd55f7"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "88b72e69c762611a"}}, "job": {"model_class": "Job", "id": "ed5be05b740d108f", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:24:56.056270", "create_time": "2021-04-17T15:24:23.534653", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-gqkc2", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat --pe1-2 fastq:/galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat && python '/galaxy/server/database/jobs_directory/000/84/configs/tmp58ytsu2k' < contigs.fasta > '/galaxy/server/database/objects/3/d/f/dataset_3dff0e5d-4531-47f3-96ac-df8bc46cdba5.dat' && python '/galaxy/server/database/jobs_directory/000/84/configs/tmp58ytsu2k' < scaffolds.fasta > '/galaxy/server/database/objects/1/4/6/dataset_146d99c1-95a8-4e4e-a99a-48f736510a22.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 81, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 82, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "2fa53dae68bd55f7", "src": "hda", "uuid": "b129d927-7634-4ee6-9113-2a83f294378d"}, "libraries_0|files_0|rev_reads": {"id": "88b72e69c762611a", "src": "hda", "uuid": "dd2b44dc-2cca-40e1-90e2-e274c2c336db"}}, "outputs": {"out_contig_stats": {"id": "bb2371fec1237c98", "src": "hda", "uuid": "3dff0e5d-4531-47f3-96ac-df8bc46cdba5"}, "out_scaffold_stats": {"id": "1bd6ab7fa457e980", "src": "hda", "uuid": "146d99c1-95a8-4e4e-a99a-48f736510a22"}, "out_contigs": {"id": "0fb3d8ac1f09cc6a", "src": "hda", "uuid": "db1a59ff-8db1-471e-8421-d16727a07e0a"}, "out_scaffolds": {"id": "2b40f5426d5c6194", "src": "hda", "uuid": "9d6161d6-614e-44f5-945a-3a7173294c1f"}, "out_log": {"id": "e9f3fa8f2542fd13", "src": "hda", "uuid": "f299ddad-ebd8-42fc-881b-3a835b314f37"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/84/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/84/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat']\n      right reads: ['/galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/84/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/84/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/84/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/84/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.004     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.006     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.007     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat\n  0:00:00.612     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\n  0:00:01.206     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.212    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.479    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.479    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.661    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.705    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.733    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.735    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.738    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.741    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.757    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.758    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.758    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat\n  0:00:01.808    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\n  0:00:01.856    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.856    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.856    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.864    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.866    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.867    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.886    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.886    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.886    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.886    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat and /galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\n  0:00:01.920    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.932    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.938    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.968    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.968    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.968    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/84/working/corrected/corrected.yaml\n  0:00:01.978    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/84/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/84/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/84/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.135    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.139     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.338   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.343     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.516   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.587     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.587     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.587     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.588     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.588     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.588     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.588     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.740     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.805    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.806    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.844    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.844    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.844    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.845    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.845    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.845    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.379     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.384    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.625    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.625    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.771    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.815    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.838    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.838    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.840    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:07.080    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.096    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.096    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.097    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.099    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.099    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.100    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/before_rr.fasta\n  0:00:07.104    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph.fastg\n  0:00:07.108    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/simplified_contigs.fasta\n  0:00:07.112    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/intermediate_contigs.fasta\n  0:00:07.120    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.120    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.120    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.120    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.120    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.120    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.193    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.307    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.086    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.086    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.094    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.226   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.234   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.236   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.236   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.236   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.249   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.257   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.275    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.275    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.275    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.275    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.275    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.275    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.276    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.277    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.277    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.277    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.277    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.277    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.278    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/before_rr.fasta\n  0:00:09.283    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph.fastg\n  0:00:09.287    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/84/working//K33/final_contigs.paths\n  0:00:09.295    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/84/working//K33/scaffolds.paths\n  0:00:09.311    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.313    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/84/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/84/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/84/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/84/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/84/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/84/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/84/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/84/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/84/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/84/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat']\n      right reads: ['/galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/84/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/84/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/84/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/84/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.004     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.006     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.006     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.007     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.007     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat\n  0:00:00.612     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\n  0:00:01.206     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.212    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.479    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.479    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.661    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.705    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.733    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.735    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.738    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.741    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.757    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.758    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.758    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat\n  0:00:01.808    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\n  0:00:01.856    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.856    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.856    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.864    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.865    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.866    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.867    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.886    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.886    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.886    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.886    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/1/2/dataset_b129d927-7634-4ee6-9113-2a83f294378d.dat and /galaxy/server/database/objects/d/d/2/dataset_dd2b44dc-2cca-40e1-90e2-e274c2c336db.dat\n  0:00:01.920    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.932    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.938    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.968    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.968    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.968    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/84/working/corrected/corrected.yaml\n  0:00:01.978    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/84/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/84/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/84/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.135    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.139     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.338   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.343     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.516   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.587     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.587     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.587     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.588     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.588     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.588     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.588     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.740     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.805    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.806    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.844    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.844    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.844    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.845    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.845    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.845    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.379     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.384    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.625    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.625    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.771    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.815    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.838    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.838    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.840    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.840    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:07.080    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.083    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.083    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.083    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.083    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.083    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.096    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.096    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.097    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.099    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.099    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.100    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/before_rr.fasta\n  0:00:07.104    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph.fastg\n  0:00:07.108    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/simplified_contigs.fasta\n  0:00:07.112    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/intermediate_contigs.fasta\n  0:00:07.120    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.120    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.120    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.120    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.120    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.120    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.193    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.307    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.086    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.086    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.094    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.226   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.234   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.236   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.236   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.236   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.249   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.257   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.275    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.275    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.275    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.275    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.275    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.275    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.275    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.275    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.276    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.276    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.277    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.277    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.277    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.277    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.277    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.277    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.277    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.277    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.278    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/84/working//K33/before_rr.fasta\n  0:00:09.283    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/84/working//K33/assembly_graph.fastg\n  0:00:09.287    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/84/working//K33/final_contigs.paths\n  0:00:09.295    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/84/working//K33/scaffolds.paths\n  0:00:09.311    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.313    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/84/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/84/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/84/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/84/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/84/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/84/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/84/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/84/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:24:55", "plugin": "core", "name": "end_epoch", "raw_value": "1618673095.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:24:43", "plugin": "core", "name": "start_epoch", "raw_value": "1618673083.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 1, "time_seconds": 55.1702721118927, "inputs": {"sc": false, "onlyassembler": true, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "8562661576b42f24"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "ebaf9d899fb1d698"}}, "job": {"model_class": "Job", "id": "8562661576b42f24", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:25:10.779902", "create_time": "2021-04-17T15:24:29.614810", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-2cfgf", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/d/d/2/dataset_dd2e67e7-2472-4086-a46f-d42611b1545a.dat --pe1-2 fasta:/galaxy/server/database/objects/d/e/e/dataset_deee0ae3-f4bc-44f0-bf2d-1e877b3d9624.dat && python '/galaxy/server/database/jobs_directory/000/85/configs/tmp1a1yxh7n' < contigs.fasta > '/galaxy/server/database/objects/5/c/5/dataset_5c5c347f-a0fb-41f2-965b-d2aa4bb9051c.dat' && python '/galaxy/server/database/jobs_directory/000/85/configs/tmp1a1yxh7n' < scaffolds.fasta > '/galaxy/server/database/objects/6/b/3/dataset_6b3bc8f1-daed-468a-8fa2-45c4f2349f88.dat'", "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 85, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"true\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "8562661576b42f24", "src": "hda", "uuid": "dd2e67e7-2472-4086-a46f-d42611b1545a"}, "libraries_0|files_0|rev_reads": {"id": "ebaf9d899fb1d698", "src": "hda", "uuid": "deee0ae3-f4bc-44f0-bf2d-1e877b3d9624"}}, "outputs": {"out_contig_stats": {"id": "79918a5d1636ab9d", "src": "hda", "uuid": "5c5c347f-a0fb-41f2-965b-d2aa4bb9051c"}, "out_scaffold_stats": {"id": "ff41ffe96bf8e2b0", "src": "hda", "uuid": "6b3bc8f1-daed-468a-8fa2-45c4f2349f88"}, "out_contigs": {"id": "9aa3b88a75825858", "src": "hda", "uuid": "60f25341-d763-431a-9cd2-42c61ccac26c"}, "out_scaffolds": {"id": "5743b9d55fac2812", "src": "hda", "uuid": "3b37431b-78ab-4e46-a35e-842500add961"}, "out_log": {"id": "c5adc09c251b64cf", "src": "hda", "uuid": "38ec2596-7e82-44e4-8094-2b68d8501d16"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/85/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/d/d/2/dataset_dd2e67e7-2472-4086-a46f-d42611b1545a.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/d/e/e/dataset_deee0ae3-f4bc-44f0-bf2d-1e877b3d9624.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/85/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/d/2/dataset_dd2e67e7-2472-4086-a46f-d42611b1545a.dat']\n      right reads: ['/galaxy/server/database/objects/d/e/e/dataset_deee0ae3-f4bc-44f0-bf2d-1e877b3d9624.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/85/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/85/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/85/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/85/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.124     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.309   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.316     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.499   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.556     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.556     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.556     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.556     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.557     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.680     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.682    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.682    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.741    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.741    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.772    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.772    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.772    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.773    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.773    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.773    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.248     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.254    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.482    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.482    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.615    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.649    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.672    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.672    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.673    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.675    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.675    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.676    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.676    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.677    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.677    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.688    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.688    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.701    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.707    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.751    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.863    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.259    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.939    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.222    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.394    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.395    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.395    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.395    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.395    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.395    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.397    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.397    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.397    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.397    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:06.397    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.926     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.931    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:07.152    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:07.152    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:07.291    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.328    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.348    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.348    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.355    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.356    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.356    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.361    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.361    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.361    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.361    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.362    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.362    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.363    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.364    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.364    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.364    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.364    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.\n..\n.357    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:08.357    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.357    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.357    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.357    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.357    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.357    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.357    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.357    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.358    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.358    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.358    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:08.358    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.358    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.358    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.371    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.371    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.371    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.372    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.372    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.373    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/before_rr.fasta\n  0:00:08.380    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph.fastg\n  0:00:08.385    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/simplified_contigs.fasta\n  0:00:08.389    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/intermediate_contigs.fasta\n  0:00:08.403    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.403    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.403    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.403    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.403    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.403    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.476    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.591    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.367    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.367    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:10.373    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.512   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.515   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.518   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.520   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.520   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.520   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.533   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.540   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.557    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.557    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.557    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.557    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.558    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.558    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.558    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.558    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.558    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.558    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.558    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.558    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.558    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.558    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.558    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.559    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.559    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.560    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/before_rr.fasta\n  0:00:10.565    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph.fastg\n  0:00:10.569    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/85/working//K33/final_contigs.paths\n  0:00:10.576    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/85/working//K33/scaffolds.paths\n  0:00:10.591    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.593    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/85/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/85/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/85/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/85/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/85/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/85/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/85/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/85/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/d/d/2/dataset_dd2e67e7-2472-4086-a46f-d42611b1545a.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/d/e/e/dataset_deee0ae3-f4bc-44f0-bf2d-1e877b3d9624.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/85/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/d/2/dataset_dd2e67e7-2472-4086-a46f-d42611b1545a.dat']\n      right reads: ['/galaxy/server/database/objects/d/e/e/dataset_deee0ae3-f4bc-44f0-bf2d-1e877b3d9624.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/85/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/85/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/85/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/85/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.124     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.309   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.316     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.499   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.556     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.556     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.556     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.556     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.557     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.680     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.682    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.682    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.741    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:00.741    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.772    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.772    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.772    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.773    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.773    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.773    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.248     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:01.254    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.482    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:01.482    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.615    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.649    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.672    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:01.672    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.673    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.675    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:01.675    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:01.676    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:01.676    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:01.677    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.677    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.677    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.688    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:01.688    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.701    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:01.707    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:01.707    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.751    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.863    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.259    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:02.939    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.222    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:06.394    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:06.395    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:06.395    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:06.395    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:06.395    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:06.395    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:06.395    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:06.397    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:06.397    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:06.397    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:06.397    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:06.397    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:06.926     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:06.931    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:07.152    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:07.152    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:07.291    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:07.328    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:07.348    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:07.348    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:07.355    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:07.356    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:07.356    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:07.361    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:07.361    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:07.361    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:07.361    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.362    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:07.362    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:07.363    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:07.363    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:07.364    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:07.364    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:07.364    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:07.364    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.\n..\n.357    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:08.357    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:08.357    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:08.357    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:08.357    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:08.357    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:08.357    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:08.357    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.357    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:08.358    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:08.358    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:08.358    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:08.358    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:08.358    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:08.358    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.358    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.371    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:08.371    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:08.371    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:08.372    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:08.372    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:08.373    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/before_rr.fasta\n  0:00:08.380    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph.fastg\n  0:00:08.385    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/simplified_contigs.fasta\n  0:00:08.389    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/intermediate_contigs.fasta\n  0:00:08.403    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:08.403    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:08.403    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:08.403    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:08.403    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:08.403    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:08.476    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:08.591    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.367    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.367    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:10.373    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.512   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.515   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.518   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.520   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.520   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.520   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.533   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.540   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.557    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.557    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.557    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.557    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.557    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.558    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.558    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.558    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.558    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.558    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.558    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.558    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.558    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.558    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.558    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.558    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.559    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.559    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.559    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.559    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.559    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.559    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.560    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/85/working//K33/before_rr.fasta\n  0:00:10.565    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/85/working//K33/assembly_graph.fastg\n  0:00:10.569    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/85/working//K33/final_contigs.paths\n  0:00:10.576    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/85/working//K33/scaffolds.paths\n  0:00:10.591    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.593    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/85/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/85/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/85/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/85/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/85/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/85/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/85/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:25:09", "plugin": "core", "name": "end_epoch", "raw_value": "1618673109.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:24:58", "plugin": "core", "name": "start_epoch", "raw_value": "1618673098.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 2, "time_seconds": 80.18750190734863, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "a83cad680f6e351a"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "8c2111405b1bbb8d"}}, "job": {"model_class": "Job", "id": "2b40f5426d5c6194", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:25:46.855246", "create_time": "2021-04-17T15:24:47.030397", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-25gr4", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat && python '/galaxy/server/database/jobs_directory/000/90/configs/tmptkbtrysi' < contigs.fasta > '/galaxy/server/database/objects/2/7/5/dataset_2756742b-eeca-4210-a885-f34e111aff68.dat' && python '/galaxy/server/database/jobs_directory/000/90/configs/tmptkbtrysi' < scaffolds.fasta > '/galaxy/server/database/objects/d/d/8/dataset_dd81f6c0-d0d2-43fa-aba6-60406cd4589d.dat'", "params": {"__input_ext": "\"fastq.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 97, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 98, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "a83cad680f6e351a", "src": "hda", "uuid": "0ca35204-08c2-4bd5-8d12-bb14554fbcde"}, "libraries_0|files_0|rev_reads": {"id": "8c2111405b1bbb8d", "src": "hda", "uuid": "e43bda9d-cd1a-44ac-81b2-dbccca93014f"}}, "outputs": {"out_contig_stats": {"id": "816374c5dd178199", "src": "hda", "uuid": "2756742b-eeca-4210-a885-f34e111aff68"}, "out_scaffold_stats": {"id": "1ce2d1df8ede52a2", "src": "hda", "uuid": "dd81f6c0-d0d2-43fa-aba6-60406cd4589d"}, "out_contigs": {"id": "893ba842ea941901", "src": "hda", "uuid": "93bd1d26-d84b-4c09-aef9-c8bacc368abc"}, "out_scaffolds": {"id": "8a3f9f88cd9bc3b3", "src": "hda", "uuid": "9a9b4fab-baab-41ef-b31e-2a6adaf9deca"}, "out_log": {"id": "28a34bf329c75c4c", "src": "hda", "uuid": "b062fd95-61ae-4b40-9340-a38d9dd30a76"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/90/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/90/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat']\n      right reads: ['/galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat\n  0:00:00.524     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\n  0:00:01.020     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.025    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.237    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.237    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.378    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.412    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.431    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.433    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.437    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat\n  0:00:01.477    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\n  0:00:01.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.509    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.536    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.536    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.536    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.536    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat and /galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\n  0:00:01.575    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.585    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.589    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.618    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.618    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.618    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n  0:00:01.622    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.488   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.547     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.548     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.549     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.694     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.696    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.696    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.753    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.753    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.785    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.785    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.785    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.785    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.785    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.785    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.271     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.277    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.501    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.501    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.634    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.673    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.694    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.694    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.696    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.699    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU\n..\nosing short gaps\n  0:00:07.056    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.058    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.058    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.058    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.058    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.058    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.058    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.058    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.071    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.071    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.071    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.075    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.075    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.075    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:07.080    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:07.084    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta\n  0:00:07.088    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta\n  0:00:07.096    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.096    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.096    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.096    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.096    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.096    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.175    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.300    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.077    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.077    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.084    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.217   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.220   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.226   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.244   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.252   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.270    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.270    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.270    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.270    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.271    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.271    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.271    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.271    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.271    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.271    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.272    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.272    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.273    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.273    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.274    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:09.279    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:09.284    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths\n  0:00:09.291    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths\n  0:00:09.306    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.308    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/90/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/90/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/90/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat']\n      right reads: ['/galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/90/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/90/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat\n  0:00:00.524     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\n  0:00:01.020     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.025    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.237    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.237    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.378    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.412    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.431    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.433    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.437    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat\n  0:00:01.477    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\n  0:00:01.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.509    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.513    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.514    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.536    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.536    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.536    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.536    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/0/c/a/dataset_0ca35204-08c2-4bd5-8d12-bb14554fbcde.dat and /galaxy/server/database/objects/e/4/3/dataset_e43bda9d-cd1a-44ac-81b2-dbccca93014f.dat\n  0:00:01.575    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.585    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.589    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.618    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.618    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.618    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n  0:00:01.622    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/90/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/90/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/90/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.112    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.305   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.488   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.547     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.547     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.548     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.549     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.694     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.696    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.696    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.753    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.753    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.785    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.785    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.785    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.785    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.785    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.785    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.271     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.277    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.501    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.501    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.634    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.673    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.694    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.694    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.696    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.699    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDU\n..\nosing short gaps\n  0:00:07.056    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.058    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.058    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.058    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.058    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.058    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.058    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.058    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.058    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.058    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.071    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.071    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.071    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.075    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.075    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.075    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:07.080    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:07.084    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/simplified_contigs.fasta\n  0:00:07.088    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/intermediate_contigs.fasta\n  0:00:07.096    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.096    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.096    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.096    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.096    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.096    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.175    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.300    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.077    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.077    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.084    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.217   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.220   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.226   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.229   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.244   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.252   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.270    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.270    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.270    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.270    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.271    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.271    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.271    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.271    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.271    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.271    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.271    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.271    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.272    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.272    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.272    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.272    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.273    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.273    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.273    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.273    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.273    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.274    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/90/working//K33/before_rr.fasta\n  0:00:09.279    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/90/working//K33/assembly_graph.fastg\n  0:00:09.284    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/final_contigs.paths\n  0:00:09.291    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/90/working//K33/scaffolds.paths\n  0:00:09.306    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.308    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/90/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/90/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/90/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/90/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/90/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:25:46", "plugin": "core", "name": "end_epoch", "raw_value": "1618673146.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:25:34", "plugin": "core", "name": "start_epoch", "raw_value": "1618673134.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 3, "time_seconds": 64.14843487739563, "inputs": {"sc": false, "careful": false, "kmer_choice|auto_kmer_choice": true, "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "adefa684e9158c6d"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "2487e98982acd728"}}, "job": {"model_class": "Job", "id": "e9f3fa8f2542fd13", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:25:33.057484", "create_time": "2021-04-17T15:24:48.182097", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-zvc4b", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat --pe1-2 fastq:/galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat && python '/galaxy/server/database/jobs_directory/000/91/configs/tmp532ev60b' < contigs.fasta > '/galaxy/server/database/objects/e/7/0/dataset_e703391f-f538-4956-98e1-db7756a8c303.dat' && python '/galaxy/server/database/jobs_directory/000/91/configs/tmp532ev60b' < scaffolds.fasta > '/galaxy/server/database/objects/f/2/2/dataset_f2217d22-e039-4dcd-84cb-71045185fe33.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 99, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 100, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "adefa684e9158c6d", "src": "hda", "uuid": "556865dd-d2dc-447c-8b0d-bdfaeeab243e"}, "libraries_0|files_0|rev_reads": {"id": "2487e98982acd728", "src": "hda", "uuid": "bc79f8af-fa64-4215-b8a7-96be6a76c569"}}, "outputs": {"out_contig_stats": {"id": "38a1f1a9594acff6", "src": "hda", "uuid": "e703391f-f538-4956-98e1-db7756a8c303"}, "out_scaffold_stats": {"id": "b850ed69f333f0b6", "src": "hda", "uuid": "f2217d22-e039-4dcd-84cb-71045185fe33"}, "out_contigs": {"id": "a683c9a549147525", "src": "hda", "uuid": "471b3a70-b150-4dac-9d32-86917ac41c14"}, "out_scaffolds": {"id": "1a6386013c077f52", "src": "hda", "uuid": "d89aea55-136e-4f27-aea1-9cd6b526094a"}, "out_log": {"id": "299b8218936e1be9", "src": "hda", "uuid": "d68b62ad-bd5f-4208-8157-8e263f45869f"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/91/working\t--disable-gzip-output\t-t\t4\t-m\t8\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/91/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat']\n      right reads: ['/galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat\n  0:00:00.497     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\n  0:00:00.978     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.983    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.175    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.175    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.311    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.353    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.375    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.377    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.379    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.382    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.391    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.391    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.391    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat\n  0:00:01.426    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\n  0:00:01.466    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.466    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.466    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat and /galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\n  0:00:01.519    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.527    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.530    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.559    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n  0:00:01.564    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.120     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.304   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.489   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.549     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.549     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.549     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.550     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.550     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.550     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.550     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.681     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.777    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.778    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.778    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.280     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.285    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.506    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.506    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.642    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.677    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.696    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.696    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.698    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.698    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.698    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl\n..\n short gaps\n  0:00:03.636    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.637    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.637    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.637    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.637    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.637    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.637    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.637    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.649    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.649    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.649    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.652    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.652    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.653    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:03.658    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:03.662    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/simplified_contigs.fasta\n  0:00:03.667    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/intermediate_contigs.fasta\n  0:00:03.674    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.674    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.674    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.674    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.674    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.674    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.745    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.869    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.646    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.647    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.653    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.785   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.789   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.791   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.791   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.791   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.804   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.811   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.828    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.828    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.828    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.828    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.828    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.828    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.828    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.828    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.829    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.829    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.830    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:05.836    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:05.840    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/final_contigs.paths\n  0:00:05.848    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/scaffolds.paths\n  0:00:05.864    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:05.866    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/91/working\t--disable-gzip-output\t-t\t4\t-m\t8\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/91/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat']\n      right reads: ['/galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/91/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/91/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat\n  0:00:00.497     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\n  0:00:00.978     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.983    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.175    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.175    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.311    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.353    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.375    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.377    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.379    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.382    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.391    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.391    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.391    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat\n  0:00:01.426    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\n  0:00:01.466    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.466    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.466    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.470    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.486    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/5/5/6/dataset_556865dd-d2dc-447c-8b0d-bdfaeeab243e.dat and /galaxy/server/database/objects/b/c/7/dataset_bc79f8af-fa64-4215-b8a7-96be6a76c569.dat\n  0:00:01.519    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.527    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.530    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.559    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n  0:00:01.564    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/91/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/91/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/91/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.115    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.120     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.304   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.312     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.489   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.549     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.549     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.549     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.550     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.550     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.550     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.550     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.681     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.683    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:00.743    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.777    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.778    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.778    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.778    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.280     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:01.285    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.506    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:01.506    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.642    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.677    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.696    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:01.696    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.698    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.698    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:01.698    16M / 3G    INFO    General                 (construction.cpp          : 253)   Earl\n..\n short gaps\n  0:00:03.636    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:03.637    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:03.637    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:03.637    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:03.637    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:03.637    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:03.637    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:03.637    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:03.637    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.637    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.649    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:03.649    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:03.649    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:03.652    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:03.652    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:03.653    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:03.658    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:03.662    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/simplified_contigs.fasta\n  0:00:03.667    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/intermediate_contigs.fasta\n  0:00:03.674    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:03.674    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:03.674    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:03.674    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:03.674    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:03.674    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:03.745    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:03.869    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.646    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:05.647    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:05.653    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:05.782   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:05.785   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.789   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.791   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:05.791   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:05.791   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:05.804   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:05.811   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:05.828    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:05.828    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:05.828    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.828    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:05.828    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:05.828    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:05.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:05.828    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:05.828    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:05.828    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:05.829    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.829    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.829    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:05.829    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:05.829    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:05.829    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:05.830    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/91/working//K55/before_rr.fasta\n  0:00:05.836    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/91/working//K55/assembly_graph.fastg\n  0:00:05.840    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/final_contigs.paths\n  0:00:05.848    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/91/working//K55/scaffolds.paths\n  0:00:05.864    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:05.866    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 5 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/91/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/91/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/91/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/91/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/91/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:25:31", "plugin": "core", "name": "end_epoch", "raw_value": "1618673131.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:25:12", "plugin": "core", "name": "start_epoch", "raw_value": "1618673112.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 4, "time_seconds": 96.2562906742096, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "77", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "de207afad3285aea"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "d2448d8b77036327"}}, "job": {"model_class": "Job", "id": "9aa3b88a75825858", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:26:31.201339", "create_time": "2021-04-17T15:25:09.548113", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-gvqlp", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat --pe1-2 fastq:/galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat && python '/galaxy/server/database/jobs_directory/000/94/configs/tmpug7thhpq' < contigs.fasta > '/galaxy/server/database/objects/1/e/0/dataset_1e070224-016b-4a3a-a42b-f71b68bc2416.dat' && python '/galaxy/server/database/jobs_directory/000/94/configs/tmpug7thhpq' < scaffolds.fasta > '/galaxy/server/database/objects/5/7/7/dataset_577d0ae4-9850-4211-b766-eeabe37e79d5.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 111, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 112, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "de207afad3285aea", "src": "hda", "uuid": "4cf43d99-8947-44cf-967d-4fe0ab9e723a"}, "libraries_0|files_0|rev_reads": {"id": "d2448d8b77036327", "src": "hda", "uuid": "141cd5d0-2a82-4546-9799-e778c1a24de7"}}, "outputs": {"out_contig_stats": {"id": "e6a53357d01e0618", "src": "hda", "uuid": "1e070224-016b-4a3a-a42b-f71b68bc2416"}, "out_scaffold_stats": {"id": "0536acfdd3a7b299", "src": "hda", "uuid": "577d0ae4-9850-4211-b766-eeabe37e79d5"}, "out_contigs": {"id": "b4f8b694419b4618", "src": "hda", "uuid": "55b6e7d8-9821-4bf9-b5e9-aab5268ef119"}, "out_scaffolds": {"id": "b3aa8a123628ee6d", "src": "hda", "uuid": "b0ef2ca2-cabf-42e1-90a4-45c3126cd477"}, "out_log": {"id": "b666e253bcc36cf0", "src": "hda", "uuid": "c25974fa-0d50-4a8c-a928-f462bf415a99"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/94/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/94/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat']\n      right reads: ['/galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/94/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat\n  0:00:00.532     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\n  0:00:01.036     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.041    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.408    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.445    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.467    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.469    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.484    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.484    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.484    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat\n  0:00:01.524    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\n  0:00:01.560    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.560    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat and /galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\n  0:00:01.612    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.622    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.627    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.656    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.656    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.656    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n  0:00:01.661    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/94/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/94/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.123    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.311   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.318     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.510   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.572     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.572     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.572     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.573     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.574     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.574     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.574     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.708     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.710    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.710    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.776    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.776    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.811    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.812    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.812    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.812    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.812    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.812    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.313     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.318    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.560    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.561    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.701    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.734    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.755    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.755    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.756    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.757    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:04.223    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:04.224    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:04.224    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:04.224    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.224    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:04.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:04.233    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:04.235    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:04.235    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:04.235    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:04.239    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:04.243    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/simplified_contigs.fasta\n  0:00:04.247    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/intermediate_contigs.fasta\n  0:00:04.255    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:04.255    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.255    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.255    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:04.255    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:04.255    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:04.334    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.476    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.255    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.256    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:06.264    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.420   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.426   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.429   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.431   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.431   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.431   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.446   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.452   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.469    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.469    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.469    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.469    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.470    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.470    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.470    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.470    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.470    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.470    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.471    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.471    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:06.472    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:06.478    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:06.484    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/final_contigs.paths\n  0:00:06.492    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/scaffolds.paths\n  0:00:06.506    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.508    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/94/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/94/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/94/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat']\n      right reads: ['/galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/94/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/94/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat\n  0:00:00.532     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\n  0:00:01.036     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.041    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.408    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.445    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.467    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.469    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.471    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.484    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.484    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.484    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat\n  0:00:01.524    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\n  0:00:01.560    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.560    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.564    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.565    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.580    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.580    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/c/f/dataset_4cf43d99-8947-44cf-967d-4fe0ab9e723a.dat and /galaxy/server/database/objects/1/4/1/dataset_141cd5d0-2a82-4546-9799-e778c1a24de7.dat\n  0:00:01.612    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.622    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.627    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.656    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.656    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.656    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n  0:00:01.661    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/94/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/94/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/94/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.123    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.311   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.318     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.510   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.572     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.572     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.572     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.573     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.574     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.574     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.574     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.708     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.710    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.710    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.776    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:00.776    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.811    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.812    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.812    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.812    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.812    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.812    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:01.313     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:01.318    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.560    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:01.561    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.701    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.734    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.755    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:01.755    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.756    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.757    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:04.223    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:04.224    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:04.224    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:04.224    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:04.224    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:04.224    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:04.224    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.224    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:04.233    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:04.233    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:04.235    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:04.235    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:04.235    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:04.239    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:04.243    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/simplified_contigs.fasta\n  0:00:04.247    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/intermediate_contigs.fasta\n  0:00:04.255    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:04.255    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:04.255    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:04.255    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:04.255    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:04.255    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:04.334    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:04.476    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.255    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:06.256    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:06.264    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:06.420   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:06.426   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.429   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.431   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:06.431   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:06.431   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:06.446   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:06.452   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:06.469    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:06.469    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:06.469    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:06.469    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:06.470    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.470    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:06.470    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:06.470    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:06.470    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:06.470    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:06.470    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:06.470    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:06.471    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:06.471    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:06.471    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:06.471    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:06.471    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:06.471    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:06.472    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/94/working//K77/before_rr.fasta\n  0:00:06.478    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/94/working//K77/assembly_graph.fastg\n  0:00:06.484    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/final_contigs.paths\n  0:00:06.492    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/94/working//K77/scaffolds.paths\n  0:00:06.506    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:06.508    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 6 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/94/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/94/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/94/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/94/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/94/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "9 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "9.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:26:27", "plugin": "core", "name": "end_epoch", "raw_value": "1618673187.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:26:18", "plugin": "core", "name": "start_epoch", "raw_value": "1618673178.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 5, "time_seconds": 51.3138747215271, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "e263f094c2d94e8c"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "32d93da2391a280a"}, "contig_graph_out": true, "scaffold_graph_out": true}, "job": {"model_class": "Job", "id": "a83cad680f6e351a", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:26:01.745002", "create_time": "2021-04-17T15:25:24.320916", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-p2h9l", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat --pe1-2 fastq:/galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat && python '/galaxy/server/database/jobs_directory/000/97/configs/tmp96mb2wcg' < contigs.fasta > '/galaxy/server/database/objects/4/f/6/dataset_4f68c5bf-c7c1-4a83-857b-4d801ad3fb48.dat' && python '/galaxy/server/database/jobs_directory/000/97/configs/tmp96mb2wcg' < scaffolds.fasta > '/galaxy/server/database/objects/c/9/6/dataset_c9608b0e-655a-42d0-ae1f-0f186fa5cd93.dat'", "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"true\"", "contig_graph_out": "\"true\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 118, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 119, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "e263f094c2d94e8c", "src": "hda", "uuid": "c8fe6448-a363-4834-9cd5-81eb4112e07f"}, "libraries_0|files_0|rev_reads": {"id": "32d93da2391a280a", "src": "hda", "uuid": "d3aed635-9e27-4282-a1bb-632485841b10"}}, "outputs": {"out_scaffold_stats": {"id": "2f3ef9ef0f4ec125", "src": "hda", "uuid": "c9608b0e-655a-42d0-ae1f-0f186fa5cd93"}, "out_contig_stats": {"id": "9185a40217304881", "src": "hda", "uuid": "4f68c5bf-c7c1-4a83-857b-4d801ad3fb48"}, "out_contigs": {"id": "e2fd5c84236961ed", "src": "hda", "uuid": "6c3ccb0e-ff30-4770-b86e-5d50e2e240af"}, "out_scaffolds": {"id": "5005dfbcfa29f2e8", "src": "hda", "uuid": "df3cf533-6970-464e-8c8c-ba143982294b"}, "out_log": {"id": "6784400a409340e9", "src": "hda", "uuid": "0a9098f7-7fc2-4aee-b9de-cae44037a527"}, "contig_graph": {"id": "26d93233a7f43edc", "src": "hda", "uuid": "6602f1dc-5d9d-414b-8e4a-43935787fd21"}, "scaffold_graph": {"id": "540cf3804719d47d", "src": "hda", "uuid": "5130ad4b-3078-4a22-89ca-7dbe29f976c7"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/97/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/97/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat']\n      right reads: ['/galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat\n  0:00:00.498     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\n  0:00:00.980     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.984    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.317    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.352    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.373    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.375    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.380    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.388    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat\n  0:00:01.428    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\n  0:00:01.469    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.469    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.469    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.488    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.488    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat and /galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\n  0:00:01.519    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.527    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.531    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n  0:00:01.564    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.123    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.309   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.315     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.492   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.548     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.548     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.548     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.548     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.549     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.673     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.675    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.675    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.767    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.767    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.767    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.768    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.768    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.231     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.236    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.455    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.455    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.587    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.624    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.646    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.646    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.648    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.648    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:07.151    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.151    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.151    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.151    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.151    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.151    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.152    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.152    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.152    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.152    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.152    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.152    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.152    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.152    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.152    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.164    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.164    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.164    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.165    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.165    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.166    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:07.171    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:07.175    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/simplified_contigs.fasta\n  0:00:07.179    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/intermediate_contigs.fasta\n  0:00:07.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.185    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.185    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.185    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.263    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.392    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.166    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.166    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.172    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.305   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.309   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.312   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.314   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.314   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.314   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.326   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.333   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.349    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.349    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.349    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.349    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.350    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.350    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.350    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.350    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.350    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.350    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.351    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.351    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.352    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:09.358    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:09.362    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/final_contigs.paths\n  0:00:09.370    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/scaffolds.paths\n  0:00:09.385    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.387    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/97/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/97/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/97/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat']\n      right reads: ['/galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/97/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.002     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat\n  0:00:00.498     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\n  0:00:00.980     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.984    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.192    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.317    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.352    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.373    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.375    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.377    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.380    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.388    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.388    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat\n  0:00:01.428    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\n  0:00:01.469    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.469    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.469    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.473    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.474    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.488    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.488    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.488    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/c/8/f/dataset_c8fe6448-a363-4834-9cd5-81eb4112e07f.dat and /galaxy/server/database/objects/d/3/a/dataset_d3aed635-9e27-4282-a1bb-632485841b10.dat\n  0:00:01.519    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.527    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.531    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.559    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.560    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n  0:00:01.564    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/97/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.123    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.309   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.315     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.492   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.548     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.548     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.548     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.548     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.549     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.549     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.673     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.675    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.675    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.733    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.767    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.767    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.767    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.767    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.768    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.768    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.231     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.236    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.455    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.455    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.587    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.624    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.646    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.646    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.648    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.648    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == \n..\nosing short gaps\n  0:00:07.151    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.151    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.151    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.151    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.151    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.151    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.151    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.152    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.152    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.152    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.152    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.152    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.152    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.152    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.152    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.152    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.164    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.164    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.164    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.165    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.165    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.166    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:07.171    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:07.175    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/simplified_contigs.fasta\n  0:00:07.179    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/intermediate_contigs.fasta\n  0:00:07.185    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.185    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.185    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.185    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.185    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.263    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.392    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.166    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.166    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.172    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.305   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.309   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.312   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.314   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.314   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.314   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.326   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.333   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.349    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.349    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.349    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.349    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.350    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.350    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.350    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.350    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.350    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.350    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.350    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.350    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.351    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.351    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.351    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.351    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.351    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.351    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.352    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/97/working//K33/before_rr.fasta\n  0:00:09.358    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/97/working//K33/assembly_graph.fastg\n  0:00:09.362    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/final_contigs.paths\n  0:00:09.370    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/97/working//K33/scaffolds.paths\n  0:00:09.385    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.387    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/97/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "11 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "11.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:26:00", "plugin": "core", "name": "end_epoch", "raw_value": "1618673160.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:25:49", "plugin": "core", "name": "start_epoch", "raw_value": "1618673149.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 6, "time_seconds": 43.63285708427429, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "1f5ab6eb50606fe7"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "51bc6cf2a2c50b70"}}, "job": {"model_class": "Job", "id": "2487e98982acd728", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:26:16.516816", "create_time": "2021-04-17T15:25:46.310114", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-6529z", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat --pe1-2 fastq:/galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat && python '/galaxy/server/database/jobs_directory/000/100/configs/tmphfpu7ppp' < contigs.fasta > '/galaxy/server/database/objects/a/1/1/dataset_a11e8301-3ddf-4c6b-bd87-7ff425a1cd36.dat' && python '/galaxy/server/database/jobs_directory/000/100/configs/tmphfpu7ppp' < scaffolds.fasta > '/galaxy/server/database/objects/6/8/3/dataset_683ec0ae-06d9-4551-8bbe-61a4bb72c2f1.dat'", "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 127, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 128, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "1f5ab6eb50606fe7", "src": "hda", "uuid": "60f5fc13-468c-438d-a0ba-7098866680de"}, "libraries_0|files_0|rev_reads": {"id": "51bc6cf2a2c50b70", "src": "hda", "uuid": "67ef0673-603e-4c63-abe2-70eece60ae14"}}, "outputs": {"out_contigs": {"id": "87d8e4b3dc8767cc", "src": "hda", "uuid": "a8747f06-7479-47ae-a701-ce09c9494dcf"}, "out_scaffolds": {"id": "1ca6a91229f87d4b", "src": "hda", "uuid": "c477efaf-6917-4a5a-a824-89d511092eb6"}, "out_contig_stats": {"id": "f770c27716e7a738", "src": "hda", "uuid": "a11e8301-3ddf-4c6b-bd87-7ff425a1cd36"}, "out_scaffold_stats": {"id": "d5ce9dec026b38c9", "src": "hda", "uuid": "683ec0ae-06d9-4551-8bbe-61a4bb72c2f1"}, "out_log": {"id": "cc4572e40e1ef08a", "src": "hda", "uuid": "32d9decc-46cb-4904-844c-d595f9ea9689"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/100/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/100/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat']\n      right reads: ['/galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat\n  0:00:00.490     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\n  0:00:00.982     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.987    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.191    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.191    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.317    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.370    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.371    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.374    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.376    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.383    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.383    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.383    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat\n  0:00:01.415    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\n  0:00:01.454    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.454    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.454    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.460    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.460    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.478    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.478    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat and /galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\n  0:00:01.510    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.521    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.525    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.556    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.556    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.557    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n  0:00:01.561    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.296   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.302     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.486   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.545     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.545     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.545     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.546     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.546     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.546     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.546     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.670     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.672    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.672    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.762    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.762    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.763    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.763    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.763    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.237     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.242    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.603    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.637    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.660    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.660    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.662    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.663    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:07.048    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.049    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.049    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.049    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.049    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.049    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.049    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.049    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.062    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.063    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.063    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.065    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.065    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.066    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:07.070    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:07.074    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/simplified_contigs.fasta\n  0:00:07.079    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/intermediate_contigs.fasta\n  0:00:07.087    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.087    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.087    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.087    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.087    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.087    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.151    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.309    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.098    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.098    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.106    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.241   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.244   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.249   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.252   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.252   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.252   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.268   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.276   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.299    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.299    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.312    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.312    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.313    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.316    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.317    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.317    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.317    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.317    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.317    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.317    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.317    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.317    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.317    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.318    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.319    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.320    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.320    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.321    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:09.327    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:09.332    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/final_contigs.paths\n  0:00:09.340    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/scaffolds.paths\n  0:00:09.355    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.357    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/100/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/100/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/100/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat']\n      right reads: ['/galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/100/working/corrected/configs/config.info\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.001     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.001     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.004     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.004     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.005     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat\n  0:00:00.490     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\n  0:00:00.982     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:00.987    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.191    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.191    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.317    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.351    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.370    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.371    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.374    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.376    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.383    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.383    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.383    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat\n  0:00:01.415    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\n  0:00:01.454    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.454    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.454    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.460    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.460    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.460    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.478    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.478    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.478    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/0/f/dataset_60f5fc13-468c-438d-a0ba-7098866680de.dat and /galaxy/server/database/objects/6/7/e/dataset_67ef0673-603e-4c63-abe2-70eece60ae14.dat\n  0:00:01.510    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.521    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.525    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.556    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.556    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.557    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n  0:00:01.561    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/100/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.296   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.302     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.486   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.545     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.545     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.545     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.546     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.546     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.546     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.546     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.670     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.672    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.672    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.726    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.762    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.762    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.762    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.763    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.763    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.763    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.237     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.242    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.472    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.603    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.637    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.660    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.660    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.662    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.663    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:07.048    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.049    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.049    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.049    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.049    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.049    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.049    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.049    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.049    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.049    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.062    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.063    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.063    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.065    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.065    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.066    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:07.070    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:07.074    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/simplified_contigs.fasta\n  0:00:07.079    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/intermediate_contigs.fasta\n  0:00:07.087    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.087    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.087    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.087    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.087    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.087    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.151    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.309    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.098    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.098    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.106    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.241   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.244   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.249   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.252   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.252   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.252   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.268   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.276   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.299    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.299    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.299    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.312    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.312    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.312    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.313    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.316    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.317    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.317    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.317    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.317    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.317    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.317    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.317    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.317    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.317    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.318    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.319    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.319    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.319    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.320    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.320    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.320    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.320    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.320    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.321    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working//K33/before_rr.fasta\n  0:00:09.327    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working//K33/assembly_graph.fastg\n  0:00:09.332    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/final_contigs.paths\n  0:00:09.340    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working//K33/scaffolds.paths\n  0:00:09.355    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.357    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/100/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:26:15", "plugin": "core", "name": "end_epoch", "raw_value": "1618673175.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:26:03", "plugin": "core", "name": "start_epoch", "raw_value": "1618673163.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "tool_version": "3.12.0+galaxy1", "test_index": 7, "time_seconds": 61.6569504737854, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "fd9ed5140f1b1b51"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "06bd6b25a96305b3"}}, "job": {"model_class": "Job", "id": "893ba842ea941901", "state": "ok", "exit_code": 0, "update_time": "2021-04-17T15:26:48.515081", "create_time": "2021-04-17T15:26:02.172851", "galaxy_version": "20.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "d1d58ad692afe07e", "external_id": "gxy-qggls", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat && python '/galaxy/server/database/jobs_directory/000/103/configs/tmp3gy36jve' < contigs.fasta > '/galaxy/server/database/objects/d/0/f/dataset_d0f63523-be3c-4d5f-b014-573b91a1d581.dat' && python '/galaxy/server/database/jobs_directory/000/103/configs/tmp3gy36jve' < scaffolds.fasta > '/galaxy/server/database/objects/7/a/c/dataset_7ac74d09-4ab8-42a6-bf6c-35ed141ec5c3.dat'", "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": "null", "trusted_contigs": "null", "sanger_reads": "null", "nanopore_reads": "null", "pacbio_reads": "null", "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 135, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "fd9ed5140f1b1b51", "src": "hda", "uuid": "4786271b-8c23-4ce7-b2a7-726e754a08d6"}, "libraries_0|files_0|rev_reads": {"id": "06bd6b25a96305b3", "src": "hda", "uuid": "2c55cf55-92eb-4263-937c-b7f0ad437d42"}}, "outputs": {"out_contig_stats": {"id": "eb77e3528656fe58", "src": "hda", "uuid": "d0f63523-be3c-4d5f-b014-573b91a1d581"}, "out_scaffold_stats": {"id": "5fea779344ad815f", "src": "hda", "uuid": "7ac74d09-4ab8-42a6-bf6c-35ed141ec5c3"}, "out_contigs": {"id": "0c4d34b60cb3f1d3", "src": "hda", "uuid": "5b6dfd09-8022-4f77-97c5-096fbfec73a7"}, "out_scaffolds": {"id": "e3c690e574a577c3", "src": "hda", "uuid": "56ee2b8d-b983-459c-93d6-c2541d520770"}, "out_log": {"id": "751c257e7c591517", "src": "hda", "uuid": "7f4ca992-97ab-4547-8dbb-cf08cc7f46bf"}}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/103/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/103/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat']\n      right reads: ['/galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/103/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat\n  0:00:00.528     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\n  0:00:01.025     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.030    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.238    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.238    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.370    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.407    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.428    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.433    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat\n  0:00:01.493    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\n  0:00:01.527    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.527    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.527    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.532    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.532    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.557    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.557    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.557    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.557    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat and /galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\n  0:00:01.594    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.602    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.605    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.633    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.633    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.633    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n  0:00:01.637    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/103/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/103/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.319   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.325     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.518   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.578     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.578     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.578     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.579     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.707     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.709    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.709    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.798    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.798    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.798    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.799    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.799    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.799    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.327     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.336    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.577    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.578    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.738    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.781    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.804    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.804    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.805    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.806    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:07.697    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.697    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.697    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.697    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.697    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.697    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.697    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.698    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.698    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.698    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.698    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.698    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.698    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.710    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.710    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.710    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.712    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.712    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.712    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:07.716    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:07.720    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/simplified_contigs.fasta\n  0:00:07.724    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/intermediate_contigs.fasta\n  0:00:07.731    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.731    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.731    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.731    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.731    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.731    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.811    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.969    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.764    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.901   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.904   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.909   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.911   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.912   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.912   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.929   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.953   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.968    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.968    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.968    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.968    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.969    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.969    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.969    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.969    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.969    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.969    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.970    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.970    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.971    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.971    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.971    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.971    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.971    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.971    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.971    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.971    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:09.977    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:09.982    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/final_contigs.paths\n  0:00:09.990    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/scaffolds.paths\n  0:00:10.005    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.007    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/103/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/103/working\t--disable-gzip-output\t-t\t4\t-m\t8\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-4.19.112+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/103/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat']\n      right reads: ['/galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/103/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 8\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/103/working/corrected/configs/config.info\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.002     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.002     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.003     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.005     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.005     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.006     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat\n  0:00:00.528     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\n  0:00:01.025     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.030    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.238    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.238    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.370    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.407    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.428    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.433    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.435    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.446    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.446    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat\n  0:00:01.493    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\n  0:00:01.527    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.527    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.527    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.531    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.532    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.532    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.557    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.557    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.557    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.557    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/7/8/dataset_4786271b-8c23-4ce7-b2a7-726e754a08d6.dat and /galaxy/server/database/objects/2/c/5/dataset_2c55cf55-92eb-4263-937c-b7f0ad437d42.dat\n  0:00:01.594    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.602    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.605    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.633    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.633    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.633    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n  0:00:01.637    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/103/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/103/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 8 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/103/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.113    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.118     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.319   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.325     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.518   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.578     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.578     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.578     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.579     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.666341 Gb\n  0:00:00.579     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.707     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.709    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.709    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.764    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.798    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.798    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.798    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.799    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.799    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 0.665365 Gb\n  0:00:00.799    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:01.327     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:01.336    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.577    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:01.578    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.738    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.781    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.804    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:01.804    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.805    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.806    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:07.697    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:07.697    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:07.697    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:07.697    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:07.697    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:07.697    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:07.697    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:07.697    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:07.698    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:07.698    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:07.698    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:07.698    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:07.698    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.698    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.710    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:07.710    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:07.710    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:07.712    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:07.712    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:07.712    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:07.716    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:07.720    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/simplified_contigs.fasta\n  0:00:07.724    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/intermediate_contigs.fasta\n  0:00:07.731    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:07.731    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:07.731    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:07.731    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:07.731    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:07.731    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:07.811    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:07.969    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.758    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.764    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.901   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.904   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.909   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.911   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.912   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.912   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.929   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.953   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.968    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.968    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.968    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.968    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.969    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.969    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.969    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.969    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.969    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.969    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.969    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.969    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.970    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.970    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.970    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.970    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.970    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.971    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.971    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.971    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.971    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.971    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.971    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.971    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.971    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.971    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/103/working//K33/before_rr.fasta\n  0:00:09.977    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/103/working//K33/assembly_graph.fastg\n  0:00:09.982    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/final_contigs.paths\n  0:00:09.990    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/103/working//K33/scaffolds.paths\n  0:00:10.005    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.007    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/103/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/103/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/103/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/103/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/103/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "user_email": "alex@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2021-04-17 15:26:46", "plugin": "core", "name": "end_epoch", "raw_value": "1618673206.0000000"}, {"title": "Job Start Time", "value": "2021-04-17 15:26:34", "plugin": "core", "name": "start_epoch", "raw_value": "1618673194.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}]}